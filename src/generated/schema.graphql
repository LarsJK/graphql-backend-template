### This file was autogenerated by Nexus 0.11.2
### Do not make changes to this file directly


type Character {
  applications(after: String, before: String, first: Int, last: Int, orderBy: GuildApplicationOrderByInput, skip: Int, where: GuildApplicationWhereInput): [GuildApplication!]
  class: CharacterClassEnum!
  createdAt: DateTime!
  guild: GuildMember
  id: UUID!
  name: String!
  realm: Realm!
  user: User!
}

enum CharacterClassEnum {
  DRUID
  HUNTER
  MAGE
  PALADIN
  PRIEST
  ROGUE
  SHAMAN
  WARLOCK
  WARRIOR
}

input CharacterCreateManyWithoutRealmInput {
  connect: [CharacterWhereUniqueInput!]
  create: [CharacterCreateWithoutRealmInput!]
}

input CharacterCreateManyWithoutUserInput {
  connect: [CharacterWhereUniqueInput!]
  create: [CharacterCreateWithoutUserInput!]
}

input CharacterCreateOneWithoutApplicationsInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutApplicationsInput
}

input CharacterCreateOneWithoutGuildInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutGuildInput
}

input CharacterCreateWithoutApplicationsInput {
  class: CharacterClassEnum!
  guild: GuildMemberCreateOneWithoutCharacterInput
  name: String!
  realm: RealmCreateOneWithoutCharactersInput!
  user: UserCreateOneWithoutCharactersInput!
}

input CharacterCreateWithoutGuildInput {
  applications: GuildApplicationCreateManyWithoutCharacterInput
  class: CharacterClassEnum!
  name: String!
  realm: RealmCreateOneWithoutCharactersInput!
  user: UserCreateOneWithoutCharactersInput!
}

input CharacterCreateWithoutRealmInput {
  applications: GuildApplicationCreateManyWithoutCharacterInput
  class: CharacterClassEnum!
  guild: GuildMemberCreateOneWithoutCharacterInput
  name: String!
  user: UserCreateOneWithoutCharactersInput!
}

input CharacterCreateWithoutUserInput {
  applications: GuildApplicationCreateManyWithoutCharacterInput
  class: CharacterClassEnum!
  guild: GuildMemberCreateOneWithoutCharacterInput
  name: String!
  realm: RealmCreateOneWithoutCharactersInput!
}

enum CharacterOrderByInput {
  class_ASC
  class_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CharacterWhereInput {
  AND: [CharacterWhereInput!]
  applications_every: GuildApplicationWhereInput
  applications_none: GuildApplicationWhereInput
  applications_some: GuildApplicationWhereInput
  class: CharacterClassEnum
  class_in: [CharacterClassEnum!]
  class_not: CharacterClassEnum
  class_not_in: [CharacterClassEnum!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  guild: GuildMemberWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  realm: RealmWhereInput
  user: UserWhereInput
}

input CharacterWhereUniqueInput {
  id: UUID
}

scalar DateTime

type Guild {
  applicationForm: GuildApplicationForm
  applications(after: String, before: String, first: Int, last: Int, orderBy: GuildApplicationOrderByInput, skip: Int, where: GuildApplicationWhereInput): [GuildApplication!]
  avatar: String
  createdAt: DateTime!
  events(after: String, before: String, first: Int, last: Int, orderBy: GuildEventOrderByInput, skip: Int, where: GuildEventWhereInput): [GuildEvent!]
  id: UUID!
  lootingSystem: GuildLootingSystem!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: GuildPostOrderByInput, skip: Int, where: GuildPostWhereInput): [GuildPost!]
  realm: Realm!
  roster(after: String, before: String, first: Int, last: Int, orderBy: GuildMemberOrderByInput, skip: Int, where: GuildMemberWhereInput): [GuildMember!]
}

type GuildApplication {
  answers(after: String, before: String, first: Int, last: Int, orderBy: GuildApplicationFormQuestionAnswerOrderByInput, skip: Int, where: GuildApplicationFormQuestionAnswerWhereInput): [GuildApplicationFormQuestionAnswer!]
  character: Character!
  comment: String
  createdAt: DateTime!
  guild: Guild!
  id: UUID!
  status: GuildApplicationStatus!
}

input GuildApplicationCreateManyWithoutCharacterInput {
  connect: [GuildApplicationWhereUniqueInput!]
  create: [GuildApplicationCreateWithoutCharacterInput!]
}

input GuildApplicationCreateManyWithoutGuildInput {
  connect: [GuildApplicationWhereUniqueInput!]
  create: [GuildApplicationCreateWithoutGuildInput!]
}

input GuildApplicationCreateWithoutCharacterInput {
  answers: GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput
  comment: String
  guild: GuildCreateOneWithoutApplicationsInput!
  status: GuildApplicationStatus!
}

input GuildApplicationCreateWithoutGuildInput {
  answers: GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput
  character: CharacterCreateOneWithoutApplicationsInput!
  comment: String
  status: GuildApplicationStatus!
}

type GuildApplicationForm {
  guild: Guild!
  id: UUID!
  lastUpdatedAt: DateTime!
  questions(after: String, before: String, first: Int, last: Int, orderBy: GuildApplicationFormQuestionOrderByInput, skip: Int, where: GuildApplicationFormQuestionWhereInput): [GuildApplicationFormQuestion!]
}

input GuildApplicationFormCreateOneWithoutGuildInput {
  connect: GuildApplicationFormWhereUniqueInput
  create: GuildApplicationFormCreateWithoutGuildInput
}

input GuildApplicationFormCreateOneWithoutQuestionsInput {
  connect: GuildApplicationFormWhereUniqueInput
  create: GuildApplicationFormCreateWithoutQuestionsInput
}

input GuildApplicationFormCreateWithoutGuildInput {
  lastUpdatedAt: DateTime!
  questions: GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput
}

input GuildApplicationFormCreateWithoutQuestionsInput {
  guild: GuildCreateOneWithoutApplicationFormInput!
  lastUpdatedAt: DateTime!
}

type GuildApplicationFormQuestion {
  guildApplicationForm: GuildApplicationForm!
  id: UUID!
  question: String!
  sequence: Float
}

type GuildApplicationFormQuestionAnswer {
  answer: String!
  application: GuildApplication!
  id: UUID!
  question: GuildApplicationFormQuestion!
}

input GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput {
  connect: [GuildApplicationFormQuestionAnswerWhereUniqueInput!]
  create: [GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput!]
}

input GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput {
  answer: String!
  question: GuildApplicationFormQuestionCreateOneInput!
}

enum GuildApplicationFormQuestionAnswerOrderByInput {
  answer_ASC
  answer_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GuildApplicationFormQuestionAnswerWhereInput {
  AND: [GuildApplicationFormQuestionAnswerWhereInput!]
  answer: String
  answer_contains: String
  answer_ends_with: String
  answer_gt: String
  answer_gte: String
  answer_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_not: String
  answer_not_contains: String
  answer_not_ends_with: String
  answer_not_in: [String!]
  answer_not_starts_with: String
  answer_starts_with: String
  application: GuildApplicationWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  NOT: [GuildApplicationFormQuestionAnswerWhereInput!]
  OR: [GuildApplicationFormQuestionAnswerWhereInput!]
  question: GuildApplicationFormQuestionWhereInput
}

input GuildApplicationFormQuestionAnswerWhereUniqueInput {
  id: UUID
}

input GuildApplicationFormQuestionCreateInput {
  guildApplicationForm: GuildApplicationFormCreateOneWithoutQuestionsInput!
  question: String!
  sequence: Float
}

input GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput {
  connect: [GuildApplicationFormQuestionWhereUniqueInput!]
  create: [GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput!]
}

input GuildApplicationFormQuestionCreateOneInput {
  connect: GuildApplicationFormQuestionWhereUniqueInput
  create: GuildApplicationFormQuestionCreateInput
}

input GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput {
  question: String!
  sequence: Float
}

enum GuildApplicationFormQuestionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  sequence_ASC
  sequence_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GuildApplicationFormQuestionWhereInput {
  AND: [GuildApplicationFormQuestionWhereInput!]
  guildApplicationForm: GuildApplicationFormWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  NOT: [GuildApplicationFormQuestionWhereInput!]
  OR: [GuildApplicationFormQuestionWhereInput!]
  question: String
  question_contains: String
  question_ends_with: String
  question_gt: String
  question_gte: String
  question_in: [String!]
  question_lt: String
  question_lte: String
  question_not: String
  question_not_contains: String
  question_not_ends_with: String
  question_not_in: [String!]
  question_not_starts_with: String
  question_starts_with: String
  sequence: Float
  sequence_gt: Float
  sequence_gte: Float
  sequence_in: [Float!]
  sequence_lt: Float
  sequence_lte: Float
  sequence_not: Float
  sequence_not_in: [Float!]
}

input GuildApplicationFormQuestionWhereUniqueInput {
  id: UUID
}

input GuildApplicationFormWhereInput {
  AND: [GuildApplicationFormWhereInput!]
  guild: GuildWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  lastUpdatedAt: DateTime
  lastUpdatedAt_gt: DateTime
  lastUpdatedAt_gte: DateTime
  lastUpdatedAt_in: [DateTime!]
  lastUpdatedAt_lt: DateTime
  lastUpdatedAt_lte: DateTime
  lastUpdatedAt_not: DateTime
  lastUpdatedAt_not_in: [DateTime!]
  NOT: [GuildApplicationFormWhereInput!]
  OR: [GuildApplicationFormWhereInput!]
  questions_every: GuildApplicationFormQuestionWhereInput
  questions_none: GuildApplicationFormQuestionWhereInput
  questions_some: GuildApplicationFormQuestionWhereInput
}

input GuildApplicationFormWhereUniqueInput {
  id: UUID
}

enum GuildApplicationOrderByInput {
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum GuildApplicationStatus {
  ACCEPTED
  DECLINED
  NEW
}

input GuildApplicationWhereInput {
  AND: [GuildApplicationWhereInput!]
  answers_every: GuildApplicationFormQuestionAnswerWhereInput
  answers_none: GuildApplicationFormQuestionAnswerWhereInput
  answers_some: GuildApplicationFormQuestionAnswerWhereInput
  character: CharacterWhereInput
  comment: String
  comment_contains: String
  comment_ends_with: String
  comment_gt: String
  comment_gte: String
  comment_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_not: String
  comment_not_contains: String
  comment_not_ends_with: String
  comment_not_in: [String!]
  comment_not_starts_with: String
  comment_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  guild: GuildWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  NOT: [GuildApplicationWhereInput!]
  OR: [GuildApplicationWhereInput!]
  status: GuildApplicationStatus
  status_in: [GuildApplicationStatus!]
  status_not: GuildApplicationStatus
  status_not_in: [GuildApplicationStatus!]
}

input GuildApplicationWhereUniqueInput {
  id: UUID
}

input GuildCreateManyWithoutRealmInput {
  connect: [GuildWhereUniqueInput!]
  create: [GuildCreateWithoutRealmInput!]
}

input GuildCreateOneWithoutApplicationFormInput {
  connect: GuildWhereUniqueInput
  create: GuildCreateWithoutApplicationFormInput
}

input GuildCreateOneWithoutApplicationsInput {
  connect: GuildWhereUniqueInput
  create: GuildCreateWithoutApplicationsInput
}

input GuildCreateOneWithoutEventsInput {
  connect: GuildWhereUniqueInput
  create: GuildCreateWithoutEventsInput
}

input GuildCreateOneWithoutRosterInput {
  connect: GuildWhereUniqueInput
  create: GuildCreateWithoutRosterInput
}

input GuildCreateWithoutApplicationFormInput {
  applications: GuildApplicationCreateManyWithoutGuildInput
  avatar: String
  events: GuildEventCreateManyWithoutGuildInput
  lootingSystem: GuildLootingSystem
  name: String!
  posts: GuildPostCreateManyWithoutGuildInput
  realm: RealmCreateOneWithoutGuildsInput!
  roster: GuildMemberCreateManyWithoutGuildInput
}

input GuildCreateWithoutApplicationsInput {
  applicationForm: GuildApplicationFormCreateOneWithoutGuildInput
  avatar: String
  events: GuildEventCreateManyWithoutGuildInput
  lootingSystem: GuildLootingSystem
  name: String!
  posts: GuildPostCreateManyWithoutGuildInput
  realm: RealmCreateOneWithoutGuildsInput!
  roster: GuildMemberCreateManyWithoutGuildInput
}

input GuildCreateWithoutEventsInput {
  applicationForm: GuildApplicationFormCreateOneWithoutGuildInput
  applications: GuildApplicationCreateManyWithoutGuildInput
  avatar: String
  lootingSystem: GuildLootingSystem
  name: String!
  posts: GuildPostCreateManyWithoutGuildInput
  realm: RealmCreateOneWithoutGuildsInput!
  roster: GuildMemberCreateManyWithoutGuildInput
}

input GuildCreateWithoutRealmInput {
  applicationForm: GuildApplicationFormCreateOneWithoutGuildInput
  applications: GuildApplicationCreateManyWithoutGuildInput
  avatar: String
  events: GuildEventCreateManyWithoutGuildInput
  lootingSystem: GuildLootingSystem
  name: String!
  posts: GuildPostCreateManyWithoutGuildInput
  roster: GuildMemberCreateManyWithoutGuildInput
}

input GuildCreateWithoutRosterInput {
  applicationForm: GuildApplicationFormCreateOneWithoutGuildInput
  applications: GuildApplicationCreateManyWithoutGuildInput
  avatar: String
  events: GuildEventCreateManyWithoutGuildInput
  lootingSystem: GuildLootingSystem
  name: String!
  posts: GuildPostCreateManyWithoutGuildInput
  realm: RealmCreateOneWithoutGuildsInput!
}

type GuildEvent {
  createdAt: DateTime!
  guild: Guild!
  id: UUID!
  instance: Instance!
  roster(after: String, before: String, first: Int, last: Int, orderBy: GuildMemberOrderByInput, skip: Int, where: GuildMemberWhereInput): [GuildMember!]
  startingAt: DateTime!
  title: String!
}

input GuildEventCreateManyWithoutGuildInput {
  connect: [GuildEventWhereUniqueInput!]
  create: [GuildEventCreateWithoutGuildInput!]
}

input GuildEventCreateManyWithoutRosterInput {
  connect: [GuildEventWhereUniqueInput!]
  create: [GuildEventCreateWithoutRosterInput!]
}

input GuildEventCreateWithoutGuildInput {
  instance: InstanceCreateOneInput!
  roster: GuildMemberCreateManyWithoutEventsInput
  startingAt: DateTime!
  title: String!
}

input GuildEventCreateWithoutRosterInput {
  guild: GuildCreateOneWithoutEventsInput!
  instance: InstanceCreateOneInput!
  startingAt: DateTime!
  title: String!
}

enum GuildEventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  startingAt_ASC
  startingAt_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GuildEventWhereInput {
  AND: [GuildEventWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  guild: GuildWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  instance: InstanceWhereInput
  NOT: [GuildEventWhereInput!]
  OR: [GuildEventWhereInput!]
  roster_every: GuildMemberWhereInput
  roster_none: GuildMemberWhereInput
  roster_some: GuildMemberWhereInput
  startingAt: DateTime
  startingAt_gt: DateTime
  startingAt_gte: DateTime
  startingAt_in: [DateTime!]
  startingAt_lt: DateTime
  startingAt_lte: DateTime
  startingAt_not: DateTime
  startingAt_not_in: [DateTime!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input GuildEventWhereUniqueInput {
  id: UUID
}

enum GuildLootingSystem {
  COUNCIL
  CUSTOM
  DKP
  NONE
}

type GuildMember {
  character: Character!
  dkp: Float
  events(after: String, before: String, first: Int, last: Int, orderBy: GuildEventOrderByInput, skip: Int, where: GuildEventWhereInput): [GuildEvent!]
  guild: Guild!
  guildRole: GuildRole!
  id: UUID!
  role: Role!
}

input GuildMemberCreateManyWithoutEventsInput {
  connect: [GuildMemberWhereUniqueInput!]
  create: [GuildMemberCreateWithoutEventsInput!]
}

input GuildMemberCreateManyWithoutGuildInput {
  connect: [GuildMemberWhereUniqueInput!]
  create: [GuildMemberCreateWithoutGuildInput!]
}

input GuildMemberCreateOneWithoutCharacterInput {
  connect: GuildMemberWhereUniqueInput
  create: GuildMemberCreateWithoutCharacterInput
}

input GuildMemberCreateWithoutCharacterInput {
  dkp: Float
  events: GuildEventCreateManyWithoutRosterInput
  guild: GuildCreateOneWithoutRosterInput!
  guildRole: GuildRole!
  role: Role!
}

input GuildMemberCreateWithoutEventsInput {
  character: CharacterCreateOneWithoutGuildInput!
  dkp: Float
  guild: GuildCreateOneWithoutRosterInput!
  guildRole: GuildRole!
  role: Role!
}

input GuildMemberCreateWithoutGuildInput {
  character: CharacterCreateOneWithoutGuildInput!
  dkp: Float
  events: GuildEventCreateManyWithoutRosterInput
  guildRole: GuildRole!
  role: Role!
}

enum GuildMemberOrderByInput {
  createdAt_ASC
  createdAt_DESC
  dkp_ASC
  dkp_DESC
  guildRole_ASC
  guildRole_DESC
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GuildMemberWhereInput {
  AND: [GuildMemberWhereInput!]
  character: CharacterWhereInput
  dkp: Float
  dkp_gt: Float
  dkp_gte: Float
  dkp_in: [Float!]
  dkp_lt: Float
  dkp_lte: Float
  dkp_not: Float
  dkp_not_in: [Float!]
  events_every: GuildEventWhereInput
  events_none: GuildEventWhereInput
  events_some: GuildEventWhereInput
  guild: GuildWhereInput
  guildRole: GuildRole
  guildRole_in: [GuildRole!]
  guildRole_not: GuildRole
  guildRole_not_in: [GuildRole!]
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  NOT: [GuildMemberWhereInput!]
  OR: [GuildMemberWhereInput!]
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
}

input GuildMemberWhereUniqueInput {
  id: UUID
}

enum GuildOrderByInput {
  avatar_ASC
  avatar_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  lootingSystem_ASC
  lootingSystem_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GuildPost {
  body: String!
  createdAt: DateTime!
  guild: Guild!
  id: UUID!
  title: String!
}

input GuildPostCreateManyWithoutGuildInput {
  connect: [GuildPostWhereUniqueInput!]
  create: [GuildPostCreateWithoutGuildInput!]
}

input GuildPostCreateWithoutGuildInput {
  body: String!
  title: String!
}

enum GuildPostOrderByInput {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GuildPostWhereInput {
  AND: [GuildPostWhereInput!]
  body: String
  body_contains: String
  body_ends_with: String
  body_gt: String
  body_gte: String
  body_in: [String!]
  body_lt: String
  body_lte: String
  body_not: String
  body_not_contains: String
  body_not_ends_with: String
  body_not_in: [String!]
  body_not_starts_with: String
  body_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  guild: GuildWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  NOT: [GuildPostWhereInput!]
  OR: [GuildPostWhereInput!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input GuildPostWhereUniqueInput {
  id: UUID
}

enum GuildRole {
  Alt
  GuildMaster
  Member
  Officer
  Trail
}

input GuildWhereInput {
  AND: [GuildWhereInput!]
  applicationForm: GuildApplicationFormWhereInput
  applications_every: GuildApplicationWhereInput
  applications_none: GuildApplicationWhereInput
  applications_some: GuildApplicationWhereInput
  avatar: String
  avatar_contains: String
  avatar_ends_with: String
  avatar_gt: String
  avatar_gte: String
  avatar_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_not: String
  avatar_not_contains: String
  avatar_not_ends_with: String
  avatar_not_in: [String!]
  avatar_not_starts_with: String
  avatar_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  events_every: GuildEventWhereInput
  events_none: GuildEventWhereInput
  events_some: GuildEventWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  lootingSystem: GuildLootingSystem
  lootingSystem_in: [GuildLootingSystem!]
  lootingSystem_not: GuildLootingSystem
  lootingSystem_not_in: [GuildLootingSystem!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [GuildWhereInput!]
  OR: [GuildWhereInput!]
  posts_every: GuildPostWhereInput
  posts_none: GuildPostWhereInput
  posts_some: GuildPostWhereInput
  realm: RealmWhereInput
  roster_every: GuildMemberWhereInput
  roster_none: GuildMemberWhereInput
  roster_some: GuildMemberWhereInput
}

input GuildWhereUniqueInput {
  id: UUID
}

type Instance {
  Abbreviation: String
  id: UUID!
  image: String
  location: String
  name: String!
  playersCap: Float
  suggestedLevel: String
  wiki: String
}

input InstanceCreateInput {
  Abbreviation: String
  image: String
  location: String
  name: String!
  playersCap: Float
  suggestedLevel: String
  wiki: String
}

input InstanceCreateOneInput {
  connect: InstanceWhereUniqueInput
  create: InstanceCreateInput
}

input InstanceWhereInput {
  Abbreviation: String
  Abbreviation_contains: String
  Abbreviation_ends_with: String
  Abbreviation_gt: String
  Abbreviation_gte: String
  Abbreviation_in: [String!]
  Abbreviation_lt: String
  Abbreviation_lte: String
  Abbreviation_not: String
  Abbreviation_not_contains: String
  Abbreviation_not_ends_with: String
  Abbreviation_not_in: [String!]
  Abbreviation_not_starts_with: String
  Abbreviation_starts_with: String
  AND: [InstanceWhereInput!]
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  location: String
  location_contains: String
  location_ends_with: String
  location_gt: String
  location_gte: String
  location_in: [String!]
  location_lt: String
  location_lte: String
  location_not: String
  location_not_contains: String
  location_not_ends_with: String
  location_not_in: [String!]
  location_not_starts_with: String
  location_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [InstanceWhereInput!]
  OR: [InstanceWhereInput!]
  playersCap: Float
  playersCap_gt: Float
  playersCap_gte: Float
  playersCap_in: [Float!]
  playersCap_lt: Float
  playersCap_lte: Float
  playersCap_not: Float
  playersCap_not_in: [Float!]
  suggestedLevel: String
  suggestedLevel_contains: String
  suggestedLevel_ends_with: String
  suggestedLevel_gt: String
  suggestedLevel_gte: String
  suggestedLevel_in: [String!]
  suggestedLevel_lt: String
  suggestedLevel_lte: String
  suggestedLevel_not: String
  suggestedLevel_not_contains: String
  suggestedLevel_not_ends_with: String
  suggestedLevel_not_in: [String!]
  suggestedLevel_not_starts_with: String
  suggestedLevel_starts_with: String
  wiki: String
  wiki_contains: String
  wiki_ends_with: String
  wiki_gt: String
  wiki_gte: String
  wiki_in: [String!]
  wiki_lt: String
  wiki_lte: String
  wiki_not: String
  wiki_not_contains: String
  wiki_not_ends_with: String
  wiki_not_in: [String!]
  wiki_not_starts_with: String
  wiki_starts_with: String
}

input InstanceWhereUniqueInput {
  id: UUID
  name: String
}

type Mutation {
  createUser(data: UserCreateInput!): User!
}

type Query {
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

type Realm {
  characters(after: String, before: String, first: Int, last: Int, orderBy: CharacterOrderByInput, skip: Int, where: CharacterWhereInput): [Character!]
  guilds(after: String, before: String, first: Int, last: Int, orderBy: GuildOrderByInput, skip: Int, where: GuildWhereInput): [Guild!]
  id: UUID!
  name: String!
  population: RealmPopulation!
  type: RealmType!
}

input RealmCreateOneWithoutCharactersInput {
  connect: RealmWhereUniqueInput
  create: RealmCreateWithoutCharactersInput
}

input RealmCreateOneWithoutGuildsInput {
  connect: RealmWhereUniqueInput
  create: RealmCreateWithoutGuildsInput
}

input RealmCreateWithoutCharactersInput {
  guilds: GuildCreateManyWithoutRealmInput
  name: String!
  population: RealmPopulation
  type: RealmType
}

input RealmCreateWithoutGuildsInput {
  characters: CharacterCreateManyWithoutRealmInput
  name: String!
  population: RealmPopulation
  type: RealmType
}

enum RealmPopulation {
  FULL
  HIGH
  LOW
  NORMAL
}

enum RealmType {
  NORMAL
  PVE
  PVP
  RP
  RPPVP
}

input RealmWhereInput {
  AND: [RealmWhereInput!]
  characters_every: CharacterWhereInput
  characters_none: CharacterWhereInput
  characters_some: CharacterWhereInput
  guilds_every: GuildWhereInput
  guilds_none: GuildWhereInput
  guilds_some: GuildWhereInput
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [RealmWhereInput!]
  OR: [RealmWhereInput!]
  population: RealmPopulation
  population_in: [RealmPopulation!]
  population_not: RealmPopulation
  population_not_in: [RealmPopulation!]
  type: RealmType
  type_in: [RealmType!]
  type_not: RealmType
  type_not_in: [RealmType!]
}

input RealmWhereUniqueInput {
  id: UUID
  name: String
}

enum Role {
  HEALER
  MELEE
  RANGED
  TANK
}

type User {
  avatar: String
  characters(after: String, before: String, first: Int, last: Int, orderBy: CharacterOrderByInput, skip: Int, where: CharacterWhereInput): [Character!]
  confirmed: Boolean!
  createdAt: DateTime!
  displayName: String!
  email: String!
  id: UUID!
  password: String!
}

input UserCreateInput {
  avatar: String
  characters: CharacterCreateManyWithoutUserInput
  confirmed: Boolean
  displayName: String!
  email: String!
  password: String!
}

input UserCreateOneWithoutCharactersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCharactersInput
}

input UserCreateWithoutCharactersInput {
  avatar: String
  confirmed: Boolean
  displayName: String!
  email: String!
  password: String!
}

enum UserOrderByInput {
  avatar_ASC
  avatar_DESC
  confirmed_ASC
  confirmed_DESC
  createdAt_ASC
  createdAt_DESC
  displayName_ASC
  displayName_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  avatar: String
  avatar_contains: String
  avatar_ends_with: String
  avatar_gt: String
  avatar_gte: String
  avatar_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_not: String
  avatar_not_contains: String
  avatar_not_ends_with: String
  avatar_not_in: [String!]
  avatar_not_starts_with: String
  avatar_starts_with: String
  characters_every: CharacterWhereInput
  characters_none: CharacterWhereInput
  characters_some: CharacterWhereInput
  confirmed: Boolean
  confirmed_not: Boolean
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  displayName: String
  displayName_contains: String
  displayName_ends_with: String
  displayName_gt: String
  displayName_gte: String
  displayName_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_not: String
  displayName_not_contains: String
  displayName_not_ends_with: String
  displayName_not_in: [String!]
  displayName_not_starts_with: String
  displayName_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: UUID
  id_contains: UUID
  id_ends_with: UUID
  id_gt: UUID
  id_gte: UUID
  id_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_not: UUID
  id_not_contains: UUID
  id_not_ends_with: UUID
  id_not_in: [UUID!]
  id_not_starts_with: UUID
  id_starts_with: UUID
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
}

input UserWhereUniqueInput {
  email: String
  id: UUID
}

scalar UUID
