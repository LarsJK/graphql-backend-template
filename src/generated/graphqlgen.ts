// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Character,
  Realm,
  Guild,
  GuildMember,
  GuildEvent,
  Instance,
  GuildPost,
  GuildApplication,
  GuildApplicationFormQuestionAnswer,
  GuildApplicationFormQuestion,
  GuildApplicationForm
} from "./prisma-client";
import { Context } from "../types";

export type RealmType = "RP" | "RPPVP" | "PVP" | "NORMAL" | "PVE";
export type RealmPopulation = "LOW" | "NORMAL" | "HIGH" | "FULL";
export type GuildLootingSystem = "DKP" | "COUNCIL" | "CUSTOM" | "NONE";
export type GuildRole = "GuildMaster" | "Officer" | "Member" | "Trail" | "Alt";
export type Role = "TANK" | "MELEE" | "RANGED" | "HEALER";
export type GuildApplicationStatus = "ACCEPTED" | "DECLINED" | "NEW";
export type CharacterClassEnum =
  | "DRUID"
  | "HUNTER"
  | "MAGE"
  | "PALADIN"
  | "PRIEST"
  | "ROGUE"
  | "SHAMAN"
  | "WARLOCK"
  | "WARRIOR";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    id: string;
  }

  export interface ArgsGuild {
    id: string;
  }

  export type UsersResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>;
      };

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type RealmsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Realm[] | Promise<Realm[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm[] | Promise<Realm[]>;
      };

  export type CharactersResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Character[] | null | Promise<Character[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character[] | null | Promise<Character[] | null>;
      };

  export type GuildResolver =
    | ((
        parent: undefined,
        args: ArgsGuild,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | null | Promise<Guild | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsGuild,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | null | Promise<Guild | null>;
      };

  export type GuildsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild[] | Promise<Guild[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild[] | Promise<Guild[]>;
      };

  export interface Type {
    users:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>;
        };

    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    realms:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm[] | Promise<Realm[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Realm[] | Promise<Realm[]>;
        };

    characters:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character[] | null | Promise<Character[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Character[] | null | Promise<Character[] | null>;
        };

    guild:
      | ((
          parent: undefined,
          args: ArgsGuild,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | null | Promise<Guild | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsGuild,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | null | Promise<Guild | null>;
        };

    guilds:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild[] | Promise<Guild[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild[] | Promise<Guild[]>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    createdAt: (parent: User) => parent.createdAt,
    displayName: (parent: User) => parent.displayName,
    email: (parent: User) => parent.email,
    password: (parent: User) => parent.password,
    confirmed: (parent: User) => parent.confirmed,
    avatar: (parent: User) =>
      parent.avatar === undefined ? null : parent.avatar
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type DisplayNameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PasswordResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ConfirmedResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type AvatarResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type CharactersResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Character[] | Promise<Character[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character[] | Promise<Character[]>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    displayName:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    password:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    confirmed:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    avatar:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    characters:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character[] | Promise<Character[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Character[] | Promise<Character[]>;
        };
  }
}

export namespace CharacterResolvers {
  export const defaultResolvers = {
    id: (parent: Character) => parent.id,
    createdAt: (parent: Character) => parent.createdAt,
    name: (parent: Character) => parent.name,
    class: (parent: Character) => parent.class
  };

  export type IdResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UserResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type RealmResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Realm | Promise<Realm>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm | Promise<Realm>;
      };

  export type NameResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ClassResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CharacterClassEnum | Promise<CharacterClassEnum>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CharacterClassEnum | Promise<CharacterClassEnum>;
      };

  export type GuildResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildMember | null | Promise<GuildMember | null>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember | null | Promise<GuildMember | null>;
      };

  export type ApplicationsResolver =
    | ((
        parent: Character,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplication[] | Promise<GuildApplication[]>)
    | {
        fragment: string;
        resolve: (
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplication[] | Promise<GuildApplication[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    user:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    realm:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm | Promise<Realm>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Realm | Promise<Realm>;
        };

    name:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    class:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CharacterClassEnum | Promise<CharacterClassEnum>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CharacterClassEnum | Promise<CharacterClassEnum>;
        };

    guild:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember | null | Promise<GuildMember | null>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildMember | null | Promise<GuildMember | null>;
        };

    applications:
      | ((
          parent: Character,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplication[] | Promise<GuildApplication[]>)
      | {
          fragment: string;
          resolve: (
            parent: Character,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildApplication[] | Promise<GuildApplication[]>;
        };
  }
}

export namespace RealmResolvers {
  export const defaultResolvers = {
    id: (parent: Realm) => parent.id,
    name: (parent: Realm) => parent.name,
    type: (parent: Realm) => parent.type,
    population: (parent: Realm) => parent.population
  };

  export type IdResolver =
    | ((
        parent: Realm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Realm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TypeResolver =
    | ((
        parent: Realm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RealmType | Promise<RealmType>)
    | {
        fragment: string;
        resolve: (
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RealmType | Promise<RealmType>;
      };

  export type PopulationResolver =
    | ((
        parent: Realm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RealmPopulation | Promise<RealmPopulation>)
    | {
        fragment: string;
        resolve: (
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RealmPopulation | Promise<RealmPopulation>;
      };

  export type CharactersResolver =
    | ((
        parent: Realm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Character[] | Promise<Character[]>)
    | {
        fragment: string;
        resolve: (
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character[] | Promise<Character[]>;
      };

  export type GuildsResolver =
    | ((
        parent: Realm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild[] | Promise<Guild[]>)
    | {
        fragment: string;
        resolve: (
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild[] | Promise<Guild[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Realm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Realm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    type:
      | ((
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RealmType | Promise<RealmType>)
      | {
          fragment: string;
          resolve: (
            parent: Realm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RealmType | Promise<RealmType>;
        };

    population:
      | ((
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RealmPopulation | Promise<RealmPopulation>)
      | {
          fragment: string;
          resolve: (
            parent: Realm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RealmPopulation | Promise<RealmPopulation>;
        };

    characters:
      | ((
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character[] | Promise<Character[]>)
      | {
          fragment: string;
          resolve: (
            parent: Realm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Character[] | Promise<Character[]>;
        };

    guilds:
      | ((
          parent: Realm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild[] | Promise<Guild[]>)
      | {
          fragment: string;
          resolve: (
            parent: Realm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild[] | Promise<Guild[]>;
        };
  }
}

export namespace GuildResolvers {
  export const defaultResolvers = {
    id: (parent: Guild) => parent.id,
    createdAt: (parent: Guild) => parent.createdAt,
    name: (parent: Guild) => parent.name,
    avatar: (parent: Guild) =>
      parent.avatar === undefined ? null : parent.avatar,
    lootingSystem: (parent: Guild) => parent.lootingSystem
  };

  export type IdResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type AvatarResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RealmResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Realm | Promise<Realm>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm | Promise<Realm>;
      };

  export type LootingSystemResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildLootingSystem | Promise<GuildLootingSystem>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildLootingSystem | Promise<GuildLootingSystem>;
      };

  export type RosterResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildMember[] | Promise<GuildMember[]>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember[] | Promise<GuildMember[]>;
      };

  export type PostsResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildPost[] | Promise<GuildPost[]>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildPost[] | Promise<GuildPost[]>;
      };

  export type EventsResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildEvent[] | Promise<GuildEvent[]>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildEvent[] | Promise<GuildEvent[]>;
      };

  export type ApplicationsResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplication[] | Promise<GuildApplication[]>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplication[] | Promise<GuildApplication[]>;
      };

  export type ApplicationFormResolver =
    | ((
        parent: Guild,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplicationForm | null | Promise<GuildApplicationForm | null>)
    | {
        fragment: string;
        resolve: (
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplicationForm | null | Promise<GuildApplicationForm | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    avatar:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    realm:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm | Promise<Realm>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Realm | Promise<Realm>;
        };

    lootingSystem:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildLootingSystem | Promise<GuildLootingSystem>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildLootingSystem | Promise<GuildLootingSystem>;
        };

    roster:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember[] | Promise<GuildMember[]>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildMember[] | Promise<GuildMember[]>;
        };

    posts:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildPost[] | Promise<GuildPost[]>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildPost[] | Promise<GuildPost[]>;
        };

    events:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildEvent[] | Promise<GuildEvent[]>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildEvent[] | Promise<GuildEvent[]>;
        };

    applications:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplication[] | Promise<GuildApplication[]>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildApplication[] | Promise<GuildApplication[]>;
        };

    applicationForm:
      | ((
          parent: Guild,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplicationForm | null | Promise<GuildApplicationForm | null>)
      | {
          fragment: string;
          resolve: (
            parent: Guild,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | GuildApplicationForm
            | null
            | Promise<GuildApplicationForm | null>;
        };
  }
}

export namespace GuildMemberResolvers {
  export const defaultResolvers = {
    id: (parent: GuildMember) => parent.id,
    guildRole: (parent: GuildMember) => parent.guildRole,
    role: (parent: GuildMember) => parent.role,
    dkp: (parent: GuildMember) => (parent.dkp === undefined ? null : parent.dkp)
  };

  export type IdResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CharacterResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Character | Promise<Character>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character | Promise<Character>;
      };

  export type GuildResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | Promise<Guild>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>;
      };

  export type GuildRoleResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildRole | Promise<GuildRole>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildRole | Promise<GuildRole>;
      };

  export type RoleResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Role | Promise<Role>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Role | Promise<Role>;
      };

  export type DkpResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export type EventsResolver =
    | ((
        parent: GuildMember,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildEvent[] | Promise<GuildEvent[]>)
    | {
        fragment: string;
        resolve: (
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildEvent[] | Promise<GuildEvent[]>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    character:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character | Promise<Character>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Character | Promise<Character>;
        };

    guild:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | Promise<Guild>;
        };

    guildRole:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildRole | Promise<GuildRole>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildRole | Promise<GuildRole>;
        };

    role:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Role | Promise<Role>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Role | Promise<Role>;
        };

    dkp:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };

    events:
      | ((
          parent: GuildMember,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildEvent[] | Promise<GuildEvent[]>)
      | {
          fragment: string;
          resolve: (
            parent: GuildMember,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildEvent[] | Promise<GuildEvent[]>;
        };
  }
}

export namespace GuildEventResolvers {
  export const defaultResolvers = {
    id: (parent: GuildEvent) => parent.id,
    createdAt: (parent: GuildEvent) => parent.createdAt,
    title: (parent: GuildEvent) => parent.title,
    startingAt: (parent: GuildEvent) => parent.startingAt
  };

  export type IdResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type StartingAtResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type InstanceResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Instance | Promise<Instance>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Instance | Promise<Instance>;
      };

  export type GuildResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | Promise<Guild>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>;
      };

  export type RosterResolver =
    | ((
        parent: GuildEvent,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildMember[] | Promise<GuildMember[]>)
    | {
        fragment: string;
        resolve: (
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember[] | Promise<GuildMember[]>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    startingAt:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    instance:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Instance | Promise<Instance>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Instance | Promise<Instance>;
        };

    guild:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | Promise<Guild>;
        };

    roster:
      | ((
          parent: GuildEvent,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember[] | Promise<GuildMember[]>)
      | {
          fragment: string;
          resolve: (
            parent: GuildEvent,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildMember[] | Promise<GuildMember[]>;
        };
  }
}

export namespace InstanceResolvers {
  export const defaultResolvers = {
    id: (parent: Instance) => parent.id,
    name: (parent: Instance) => parent.name,
    Abbreviation: (parent: Instance) =>
      parent.Abbreviation === undefined ? null : parent.Abbreviation,
    image: (parent: Instance) =>
      parent.image === undefined ? null : parent.image,
    wiki: (parent: Instance) =>
      parent.wiki === undefined ? null : parent.wiki,
    suggestedLevel: (parent: Instance) =>
      parent.suggestedLevel === undefined ? null : parent.suggestedLevel,
    playersCap: (parent: Instance) =>
      parent.playersCap === undefined ? null : parent.playersCap,
    location: (parent: Instance) =>
      parent.location === undefined ? null : parent.location
  };

  export type IdResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type AbbreviationResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ImageResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type WikiResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type SuggestedLevelResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PlayersCapResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export type LocationResolver =
    | ((
        parent: Instance,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    Abbreviation:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    image:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    wiki:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    suggestedLevel:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    playersCap:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };

    location:
      | ((
          parent: Instance,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Instance,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace GuildPostResolvers {
  export const defaultResolvers = {
    id: (parent: GuildPost) => parent.id,
    createdAt: (parent: GuildPost) => parent.createdAt,
    title: (parent: GuildPost) => parent.title,
    body: (parent: GuildPost) => parent.body
  };

  export type IdResolver =
    | ((
        parent: GuildPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: GuildPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type GuildResolver =
    | ((
        parent: GuildPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | Promise<Guild>)
    | {
        fragment: string;
        resolve: (
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>;
      };

  export type TitleResolver =
    | ((
        parent: GuildPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type BodyResolver =
    | ((
        parent: GuildPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    guild:
      | ((
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>)
      | {
          fragment: string;
          resolve: (
            parent: GuildPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | Promise<Guild>;
        };

    title:
      | ((
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    body:
      | ((
          parent: GuildPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace GuildApplicationResolvers {
  export const defaultResolvers = {
    id: (parent: GuildApplication) => parent.id,
    createdAt: (parent: GuildApplication) => parent.createdAt,
    status: (parent: GuildApplication) => parent.status,
    comment: (parent: GuildApplication) =>
      parent.comment === undefined ? null : parent.comment
  };

  export type IdResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type GuildResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | Promise<Guild>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>;
      };

  export type CharacterResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Character | Promise<Character>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character | Promise<Character>;
      };

  export type AnswersResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | GuildApplicationFormQuestionAnswer[]
        | Promise<GuildApplicationFormQuestionAnswer[]>
      )
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | GuildApplicationFormQuestionAnswer[]
          | Promise<GuildApplicationFormQuestionAnswer[]>;
      };

  export type StatusResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplicationStatus | Promise<GuildApplicationStatus>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplicationStatus | Promise<GuildApplicationStatus>;
      };

  export type CommentResolver =
    | ((
        parent: GuildApplication,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    guild:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | Promise<Guild>;
        };

    character:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character | Promise<Character>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Character | Promise<Character>;
        };

    answers:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | GuildApplicationFormQuestionAnswer[]
          | Promise<GuildApplicationFormQuestionAnswer[]>
        )
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | GuildApplicationFormQuestionAnswer[]
            | Promise<GuildApplicationFormQuestionAnswer[]>;
        };

    status:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplicationStatus | Promise<GuildApplicationStatus>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildApplicationStatus | Promise<GuildApplicationStatus>;
        };

    comment:
      | ((
          parent: GuildApplication,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplication,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace GuildApplicationFormQuestionAnswerResolvers {
  export const defaultResolvers = {
    id: (parent: GuildApplicationFormQuestionAnswer) => parent.id,
    answer: (parent: GuildApplicationFormQuestionAnswer) => parent.answer
  };

  export type IdResolver =
    | ((
        parent: GuildApplicationFormQuestionAnswer,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ApplicationResolver =
    | ((
        parent: GuildApplicationFormQuestionAnswer,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplication | Promise<GuildApplication>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplication | Promise<GuildApplication>;
      };

  export type QuestionResolver =
    | ((
        parent: GuildApplicationFormQuestionAnswer,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplicationFormQuestion | Promise<GuildApplicationFormQuestion>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | GuildApplicationFormQuestion
          | Promise<GuildApplicationFormQuestion>;
      };

  export type AnswerResolver =
    | ((
        parent: GuildApplicationFormQuestionAnswer,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestionAnswer,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    application:
      | ((
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplication | Promise<GuildApplication>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestionAnswer,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildApplication | Promise<GuildApplication>;
        };

    question:
      | ((
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | GuildApplicationFormQuestion
          | Promise<GuildApplicationFormQuestion>
        )
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestionAnswer,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | GuildApplicationFormQuestion
            | Promise<GuildApplicationFormQuestion>;
        };

    answer:
      | ((
          parent: GuildApplicationFormQuestionAnswer,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestionAnswer,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace GuildApplicationFormQuestionResolvers {
  export const defaultResolvers = {
    id: (parent: GuildApplicationFormQuestion) => parent.id,
    question: (parent: GuildApplicationFormQuestion) => parent.question,
    sequence: (parent: GuildApplicationFormQuestion) =>
      parent.sequence === undefined ? null : parent.sequence
  };

  export type IdResolver =
    | ((
        parent: GuildApplicationFormQuestion,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type GuildApplicationFormResolver =
    | ((
        parent: GuildApplicationFormQuestion,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildApplicationForm | Promise<GuildApplicationForm>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplicationForm | Promise<GuildApplicationForm>;
      };

  export type QuestionResolver =
    | ((
        parent: GuildApplicationFormQuestion,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type SequenceResolver =
    | ((
        parent: GuildApplicationFormQuestion,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestion,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    guildApplicationForm:
      | ((
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildApplicationForm | Promise<GuildApplicationForm>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestion,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildApplicationForm | Promise<GuildApplicationForm>;
        };

    question:
      | ((
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestion,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    sequence:
      | ((
          parent: GuildApplicationFormQuestion,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationFormQuestion,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };
  }
}

export namespace GuildApplicationFormResolvers {
  export const defaultResolvers = {
    id: (parent: GuildApplicationForm) => parent.id
  };

  export type IdResolver =
    | ((
        parent: GuildApplicationForm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type LastUpStringdAtResolver =
    | ((
        parent: GuildApplicationForm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type GuildResolver =
    | ((
        parent: GuildApplicationForm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | Promise<Guild>)
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>;
      };

  export type QuestionsResolver =
    | ((
        parent: GuildApplicationForm,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | GuildApplicationFormQuestion[]
        | Promise<GuildApplicationFormQuestion[]>
      )
    | {
        fragment: string;
        resolve: (
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | GuildApplicationFormQuestion[]
          | Promise<GuildApplicationFormQuestion[]>;
      };

  export interface Type {
    id:
      | ((
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationForm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    lastUpStringdAt:
      | ((
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationForm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    guild:
      | ((
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | Promise<Guild>)
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationForm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | Promise<Guild>;
        };

    questions:
      | ((
          parent: GuildApplicationForm,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | GuildApplicationFormQuestion[]
          | Promise<GuildApplicationFormQuestion[]>
        )
      | {
          fragment: string;
          resolve: (
            parent: GuildApplicationForm,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | GuildApplicationFormQuestion[]
            | Promise<GuildApplicationFormQuestion[]>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreateCharacterInput {
    user: string;
    realm: string;
    name: string;
    class?: CharacterClassEnum | null;
  }
  export interface CreateGuildInput {
    realm: string;
    name: string;
  }
  export interface JoinGuildInput {
    character: string;
    guild: string;
    guildRole: GuildRole;
    role: Role;
  }

  export interface ArgsCreateUser {
    displayName: string;
    email: string;
    password: string;
    confirmed: boolean;
  }

  export interface ArgsDeleteUser {
    id: string;
  }

  export interface ArgsCreateCharacter {
    input: CreateCharacterInput;
  }

  export interface ArgsCreateRealm {
    name: string;
    type: RealmType;
    population: RealmPopulation;
  }

  export interface ArgsCreateGuild {
    input: CreateGuildInput;
  }

  export interface ArgsCreateGuildMember {
    input: JoinGuildInput;
  }

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type DeleteUserResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type CreateCharacterResolver =
    | ((
        parent: undefined,
        args: ArgsCreateCharacter,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Character | null | Promise<Character | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateCharacter,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character | null | Promise<Character | null>;
      };

  export type CreateRealmResolver =
    | ((
        parent: undefined,
        args: ArgsCreateRealm,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Realm | null | Promise<Realm | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateRealm,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm | null | Promise<Realm | null>;
      };

  export type CreateGuildResolver =
    | ((
        parent: undefined,
        args: ArgsCreateGuild,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Guild | null | Promise<Guild | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateGuild,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | null | Promise<Guild | null>;
      };

  export type CreateGuildMemberResolver =
    | ((
        parent: undefined,
        args: ArgsCreateGuildMember,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => GuildMember | null | Promise<GuildMember | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateGuildMember,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember | null | Promise<GuildMember | null>;
      };

  export interface Type {
    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    deleteUser:
      | ((
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    createCharacter:
      | ((
          parent: undefined,
          args: ArgsCreateCharacter,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Character | null | Promise<Character | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateCharacter,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Character | null | Promise<Character | null>;
        };

    createRealm:
      | ((
          parent: undefined,
          args: ArgsCreateRealm,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Realm | null | Promise<Realm | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateRealm,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Realm | null | Promise<Realm | null>;
        };

    createGuild:
      | ((
          parent: undefined,
          args: ArgsCreateGuild,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Guild | null | Promise<Guild | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateGuild,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Guild | null | Promise<Guild | null>;
        };

    createGuildMember:
      | ((
          parent: undefined,
          args: ArgsCreateGuildMember,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => GuildMember | null | Promise<GuildMember | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateGuildMember,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => GuildMember | null | Promise<GuildMember | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Character: CharacterResolvers.Type;
  Realm: RealmResolvers.Type;
  Guild: GuildResolvers.Type;
  GuildMember: GuildMemberResolvers.Type;
  GuildEvent: GuildEventResolvers.Type;
  Instance: InstanceResolvers.Type;
  GuildPost: GuildPostResolvers.Type;
  GuildApplication: GuildApplicationResolvers.Type;
  GuildApplicationFormQuestionAnswer: GuildApplicationFormQuestionAnswerResolvers.Type;
  GuildApplicationFormQuestion: GuildApplicationFormQuestionResolvers.Type;
  GuildApplicationForm: GuildApplicationFormResolvers.Type;
  Mutation: MutationResolvers.Type;
}
