/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Guild: GuildObject
      Realm: RealmObject
      Character: CharacterObject
      User: UserObject
      GuildMember: GuildMemberObject
      GuildEvent: GuildEventObject
      Instance: InstanceObject
      GuildApplication: GuildApplicationObject
      GuildApplicationFormQuestionAnswer: GuildApplicationFormQuestionAnswerObject
      GuildApplicationFormQuestion: GuildApplicationFormQuestionObject
      GuildApplicationForm: GuildApplicationFormObject
      GuildPost: GuildPostObject
      GuildConnection: GuildConnectionObject
      PageInfo: PageInfoObject
      GuildEdge: GuildEdgeObject
      AggregateGuild: AggregateGuildObject
      GuildEventConnection: GuildEventConnectionObject
      GuildEventEdge: GuildEventEdgeObject
      AggregateGuildEvent: AggregateGuildEventObject
      GuildMemberConnection: GuildMemberConnectionObject
      GuildMemberEdge: GuildMemberEdgeObject
      AggregateGuildMember: AggregateGuildMemberObject
      GuildPostConnection: GuildPostConnectionObject
      GuildPostEdge: GuildPostEdgeObject
      AggregateGuildPost: AggregateGuildPostObject
      GuildApplicationConnection: GuildApplicationConnectionObject
      GuildApplicationEdge: GuildApplicationEdgeObject
      AggregateGuildApplication: AggregateGuildApplicationObject
      GuildApplicationFormConnection: GuildApplicationFormConnectionObject
      GuildApplicationFormEdge: GuildApplicationFormEdgeObject
      AggregateGuildApplicationForm: AggregateGuildApplicationFormObject
      GuildApplicationFormQuestionConnection: GuildApplicationFormQuestionConnectionObject
      GuildApplicationFormQuestionEdge: GuildApplicationFormQuestionEdgeObject
      AggregateGuildApplicationFormQuestion: AggregateGuildApplicationFormQuestionObject
      GuildApplicationFormQuestionAnswerConnection: GuildApplicationFormQuestionAnswerConnectionObject
      GuildApplicationFormQuestionAnswerEdge: GuildApplicationFormQuestionAnswerEdgeObject
      AggregateGuildApplicationFormQuestionAnswer: AggregateGuildApplicationFormQuestionAnswerObject
      InstanceConnection: InstanceConnectionObject
      InstanceEdge: InstanceEdgeObject
      AggregateInstance: AggregateInstanceObject
      CharacterConnection: CharacterConnectionObject
      CharacterEdge: CharacterEdgeObject
      AggregateCharacter: AggregateCharacterObject
      RealmConnection: RealmConnectionObject
      RealmEdge: RealmEdgeObject
      AggregateRealm: AggregateRealmObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      GuildSubscriptionPayload: GuildSubscriptionPayloadObject
      GuildPreviousValues: GuildPreviousValuesObject
      GuildEventSubscriptionPayload: GuildEventSubscriptionPayloadObject
      GuildEventPreviousValues: GuildEventPreviousValuesObject
      GuildMemberSubscriptionPayload: GuildMemberSubscriptionPayloadObject
      GuildMemberPreviousValues: GuildMemberPreviousValuesObject
      GuildPostSubscriptionPayload: GuildPostSubscriptionPayloadObject
      GuildPostPreviousValues: GuildPostPreviousValuesObject
      GuildApplicationSubscriptionPayload: GuildApplicationSubscriptionPayloadObject
      GuildApplicationPreviousValues: GuildApplicationPreviousValuesObject
      GuildApplicationFormSubscriptionPayload: GuildApplicationFormSubscriptionPayloadObject
      GuildApplicationFormPreviousValues: GuildApplicationFormPreviousValuesObject
      GuildApplicationFormQuestionSubscriptionPayload: GuildApplicationFormQuestionSubscriptionPayloadObject
      GuildApplicationFormQuestionPreviousValues: GuildApplicationFormQuestionPreviousValuesObject
      GuildApplicationFormQuestionAnswerSubscriptionPayload: GuildApplicationFormQuestionAnswerSubscriptionPayloadObject
      GuildApplicationFormQuestionAnswerPreviousValues: GuildApplicationFormQuestionAnswerPreviousValuesObject
      InstanceSubscriptionPayload: InstanceSubscriptionPayloadObject
      InstancePreviousValues: InstancePreviousValuesObject
      CharacterSubscriptionPayload: CharacterSubscriptionPayloadObject
      CharacterPreviousValues: CharacterPreviousValuesObject
      RealmSubscriptionPayload: RealmSubscriptionPayloadObject
      RealmPreviousValues: RealmPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Guild: GuildFieldDetails
      Realm: RealmFieldDetails
      Character: CharacterFieldDetails
      User: UserFieldDetails
      GuildMember: GuildMemberFieldDetails
      GuildEvent: GuildEventFieldDetails
      Instance: InstanceFieldDetails
      GuildApplication: GuildApplicationFieldDetails
      GuildApplicationFormQuestionAnswer: GuildApplicationFormQuestionAnswerFieldDetails
      GuildApplicationFormQuestion: GuildApplicationFormQuestionFieldDetails
      GuildApplicationForm: GuildApplicationFormFieldDetails
      GuildPost: GuildPostFieldDetails
      GuildConnection: GuildConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      GuildEdge: GuildEdgeFieldDetails
      AggregateGuild: AggregateGuildFieldDetails
      GuildEventConnection: GuildEventConnectionFieldDetails
      GuildEventEdge: GuildEventEdgeFieldDetails
      AggregateGuildEvent: AggregateGuildEventFieldDetails
      GuildMemberConnection: GuildMemberConnectionFieldDetails
      GuildMemberEdge: GuildMemberEdgeFieldDetails
      AggregateGuildMember: AggregateGuildMemberFieldDetails
      GuildPostConnection: GuildPostConnectionFieldDetails
      GuildPostEdge: GuildPostEdgeFieldDetails
      AggregateGuildPost: AggregateGuildPostFieldDetails
      GuildApplicationConnection: GuildApplicationConnectionFieldDetails
      GuildApplicationEdge: GuildApplicationEdgeFieldDetails
      AggregateGuildApplication: AggregateGuildApplicationFieldDetails
      GuildApplicationFormConnection: GuildApplicationFormConnectionFieldDetails
      GuildApplicationFormEdge: GuildApplicationFormEdgeFieldDetails
      AggregateGuildApplicationForm: AggregateGuildApplicationFormFieldDetails
      GuildApplicationFormQuestionConnection: GuildApplicationFormQuestionConnectionFieldDetails
      GuildApplicationFormQuestionEdge: GuildApplicationFormQuestionEdgeFieldDetails
      AggregateGuildApplicationFormQuestion: AggregateGuildApplicationFormQuestionFieldDetails
      GuildApplicationFormQuestionAnswerConnection: GuildApplicationFormQuestionAnswerConnectionFieldDetails
      GuildApplicationFormQuestionAnswerEdge: GuildApplicationFormQuestionAnswerEdgeFieldDetails
      AggregateGuildApplicationFormQuestionAnswer: AggregateGuildApplicationFormQuestionAnswerFieldDetails
      InstanceConnection: InstanceConnectionFieldDetails
      InstanceEdge: InstanceEdgeFieldDetails
      AggregateInstance: AggregateInstanceFieldDetails
      CharacterConnection: CharacterConnectionFieldDetails
      CharacterEdge: CharacterEdgeFieldDetails
      AggregateCharacter: AggregateCharacterFieldDetails
      RealmConnection: RealmConnectionFieldDetails
      RealmEdge: RealmEdgeFieldDetails
      AggregateRealm: AggregateRealmFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      GuildSubscriptionPayload: GuildSubscriptionPayloadFieldDetails
      GuildPreviousValues: GuildPreviousValuesFieldDetails
      GuildEventSubscriptionPayload: GuildEventSubscriptionPayloadFieldDetails
      GuildEventPreviousValues: GuildEventPreviousValuesFieldDetails
      GuildMemberSubscriptionPayload: GuildMemberSubscriptionPayloadFieldDetails
      GuildMemberPreviousValues: GuildMemberPreviousValuesFieldDetails
      GuildPostSubscriptionPayload: GuildPostSubscriptionPayloadFieldDetails
      GuildPostPreviousValues: GuildPostPreviousValuesFieldDetails
      GuildApplicationSubscriptionPayload: GuildApplicationSubscriptionPayloadFieldDetails
      GuildApplicationPreviousValues: GuildApplicationPreviousValuesFieldDetails
      GuildApplicationFormSubscriptionPayload: GuildApplicationFormSubscriptionPayloadFieldDetails
      GuildApplicationFormPreviousValues: GuildApplicationFormPreviousValuesFieldDetails
      GuildApplicationFormQuestionSubscriptionPayload: GuildApplicationFormQuestionSubscriptionPayloadFieldDetails
      GuildApplicationFormQuestionPreviousValues: GuildApplicationFormQuestionPreviousValuesFieldDetails
      GuildApplicationFormQuestionAnswerSubscriptionPayload: GuildApplicationFormQuestionAnswerSubscriptionPayloadFieldDetails
      GuildApplicationFormQuestionAnswerPreviousValues: GuildApplicationFormQuestionAnswerPreviousValuesFieldDetails
      InstanceSubscriptionPayload: InstanceSubscriptionPayloadFieldDetails
      InstancePreviousValues: InstancePreviousValuesFieldDetails
      CharacterSubscriptionPayload: CharacterSubscriptionPayloadFieldDetails
      CharacterPreviousValues: CharacterPreviousValuesFieldDetails
      RealmSubscriptionPayload: RealmSubscriptionPayloadFieldDetails
      RealmPreviousValues: RealmPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      GuildWhereUniqueInput: GuildWhereUniqueInputInputObject
      CharacterWhereInput: CharacterWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      RealmWhereInput: RealmWhereInputInputObject
      GuildWhereInput: GuildWhereInputInputObject
      GuildMemberWhereInput: GuildMemberWhereInputInputObject
      GuildEventWhereInput: GuildEventWhereInputInputObject
      InstanceWhereInput: InstanceWhereInputInputObject
      GuildPostWhereInput: GuildPostWhereInputInputObject
      GuildApplicationWhereInput: GuildApplicationWhereInputInputObject
      GuildApplicationFormQuestionAnswerWhereInput: GuildApplicationFormQuestionAnswerWhereInputInputObject
      GuildApplicationFormQuestionWhereInput: GuildApplicationFormQuestionWhereInputInputObject
      GuildApplicationFormWhereInput: GuildApplicationFormWhereInputInputObject
      GuildEventWhereUniqueInput: GuildEventWhereUniqueInputInputObject
      GuildMemberWhereUniqueInput: GuildMemberWhereUniqueInputInputObject
      GuildPostWhereUniqueInput: GuildPostWhereUniqueInputInputObject
      GuildApplicationWhereUniqueInput: GuildApplicationWhereUniqueInputInputObject
      GuildApplicationFormWhereUniqueInput: GuildApplicationFormWhereUniqueInputInputObject
      GuildApplicationFormQuestionWhereUniqueInput: GuildApplicationFormQuestionWhereUniqueInputInputObject
      GuildApplicationFormQuestionAnswerWhereUniqueInput: GuildApplicationFormQuestionAnswerWhereUniqueInputInputObject
      InstanceWhereUniqueInput: InstanceWhereUniqueInputInputObject
      CharacterWhereUniqueInput: CharacterWhereUniqueInputInputObject
      RealmWhereUniqueInput: RealmWhereUniqueInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      GuildCreateInput: GuildCreateInputInputObject
      RealmCreateOneWithoutGuildsInput: RealmCreateOneWithoutGuildsInputInputObject
      RealmCreateWithoutGuildsInput: RealmCreateWithoutGuildsInputInputObject
      CharacterCreateManyWithoutRealmInput: CharacterCreateManyWithoutRealmInputInputObject
      CharacterCreateWithoutRealmInput: CharacterCreateWithoutRealmInputInputObject
      UserCreateOneWithoutCharactersInput: UserCreateOneWithoutCharactersInputInputObject
      UserCreateWithoutCharactersInput: UserCreateWithoutCharactersInputInputObject
      GuildMemberCreateOneWithoutCharacterInput: GuildMemberCreateOneWithoutCharacterInputInputObject
      GuildMemberCreateWithoutCharacterInput: GuildMemberCreateWithoutCharacterInputInputObject
      GuildCreateOneWithoutRosterInput: GuildCreateOneWithoutRosterInputInputObject
      GuildCreateWithoutRosterInput: GuildCreateWithoutRosterInputInputObject
      GuildPostCreateManyWithoutGuildInput: GuildPostCreateManyWithoutGuildInputInputObject
      GuildPostCreateWithoutGuildInput: GuildPostCreateWithoutGuildInputInputObject
      GuildEventCreateManyWithoutGuildInput: GuildEventCreateManyWithoutGuildInputInputObject
      GuildEventCreateWithoutGuildInput: GuildEventCreateWithoutGuildInputInputObject
      InstanceCreateOneInput: InstanceCreateOneInputInputObject
      InstanceCreateInput: InstanceCreateInputInputObject
      GuildMemberCreateManyWithoutEventsInput: GuildMemberCreateManyWithoutEventsInputInputObject
      GuildMemberCreateWithoutEventsInput: GuildMemberCreateWithoutEventsInputInputObject
      CharacterCreateOneWithoutGuildInput: CharacterCreateOneWithoutGuildInputInputObject
      CharacterCreateWithoutGuildInput: CharacterCreateWithoutGuildInputInputObject
      RealmCreateOneWithoutCharactersInput: RealmCreateOneWithoutCharactersInputInputObject
      RealmCreateWithoutCharactersInput: RealmCreateWithoutCharactersInputInputObject
      GuildCreateManyWithoutRealmInput: GuildCreateManyWithoutRealmInputInputObject
      GuildCreateWithoutRealmInput: GuildCreateWithoutRealmInputInputObject
      GuildMemberCreateManyWithoutGuildInput: GuildMemberCreateManyWithoutGuildInputInputObject
      GuildMemberCreateWithoutGuildInput: GuildMemberCreateWithoutGuildInputInputObject
      GuildEventCreateManyWithoutRosterInput: GuildEventCreateManyWithoutRosterInputInputObject
      GuildEventCreateWithoutRosterInput: GuildEventCreateWithoutRosterInputInputObject
      GuildCreateOneWithoutEventsInput: GuildCreateOneWithoutEventsInputInputObject
      GuildCreateWithoutEventsInput: GuildCreateWithoutEventsInputInputObject
      GuildApplicationCreateManyWithoutGuildInput: GuildApplicationCreateManyWithoutGuildInputInputObject
      GuildApplicationCreateWithoutGuildInput: GuildApplicationCreateWithoutGuildInputInputObject
      CharacterCreateOneWithoutApplicationsInput: CharacterCreateOneWithoutApplicationsInputInputObject
      CharacterCreateWithoutApplicationsInput: CharacterCreateWithoutApplicationsInputInputObject
      GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput: GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInputInputObject
      GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput: GuildApplicationFormQuestionAnswerCreateWithoutApplicationInputInputObject
      GuildApplicationFormQuestionCreateOneInput: GuildApplicationFormQuestionCreateOneInputInputObject
      GuildApplicationFormQuestionCreateInput: GuildApplicationFormQuestionCreateInputInputObject
      GuildApplicationFormCreateOneWithoutQuestionsInput: GuildApplicationFormCreateOneWithoutQuestionsInputInputObject
      GuildApplicationFormCreateWithoutQuestionsInput: GuildApplicationFormCreateWithoutQuestionsInputInputObject
      GuildCreateOneWithoutApplicationFormInput: GuildCreateOneWithoutApplicationFormInputInputObject
      GuildCreateWithoutApplicationFormInput: GuildCreateWithoutApplicationFormInputInputObject
      GuildApplicationFormCreateOneWithoutGuildInput: GuildApplicationFormCreateOneWithoutGuildInputInputObject
      GuildApplicationFormCreateWithoutGuildInput: GuildApplicationFormCreateWithoutGuildInputInputObject
      GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput: GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInputInputObject
      GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput: GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInputInputObject
      GuildApplicationCreateManyWithoutCharacterInput: GuildApplicationCreateManyWithoutCharacterInputInputObject
      GuildApplicationCreateWithoutCharacterInput: GuildApplicationCreateWithoutCharacterInputInputObject
      GuildCreateOneWithoutApplicationsInput: GuildCreateOneWithoutApplicationsInputInputObject
      GuildCreateWithoutApplicationsInput: GuildCreateWithoutApplicationsInputInputObject
      GuildUpdateInput: GuildUpdateInputInputObject
      RealmUpdateOneRequiredWithoutGuildsInput: RealmUpdateOneRequiredWithoutGuildsInputInputObject
      RealmUpdateWithoutGuildsDataInput: RealmUpdateWithoutGuildsDataInputInputObject
      CharacterUpdateManyWithoutRealmInput: CharacterUpdateManyWithoutRealmInputInputObject
      CharacterUpdateWithWhereUniqueWithoutRealmInput: CharacterUpdateWithWhereUniqueWithoutRealmInputInputObject
      CharacterUpdateWithoutRealmDataInput: CharacterUpdateWithoutRealmDataInputInputObject
      UserUpdateOneRequiredWithoutCharactersInput: UserUpdateOneRequiredWithoutCharactersInputInputObject
      UserUpdateWithoutCharactersDataInput: UserUpdateWithoutCharactersDataInputInputObject
      UserUpsertWithoutCharactersInput: UserUpsertWithoutCharactersInputInputObject
      GuildMemberUpdateOneWithoutCharacterInput: GuildMemberUpdateOneWithoutCharacterInputInputObject
      GuildMemberUpdateWithoutCharacterDataInput: GuildMemberUpdateWithoutCharacterDataInputInputObject
      GuildUpdateOneRequiredWithoutRosterInput: GuildUpdateOneRequiredWithoutRosterInputInputObject
      GuildUpdateWithoutRosterDataInput: GuildUpdateWithoutRosterDataInputInputObject
      GuildPostUpdateManyWithoutGuildInput: GuildPostUpdateManyWithoutGuildInputInputObject
      GuildPostUpdateWithWhereUniqueWithoutGuildInput: GuildPostUpdateWithWhereUniqueWithoutGuildInputInputObject
      GuildPostUpdateWithoutGuildDataInput: GuildPostUpdateWithoutGuildDataInputInputObject
      GuildPostUpsertWithWhereUniqueWithoutGuildInput: GuildPostUpsertWithWhereUniqueWithoutGuildInputInputObject
      GuildPostScalarWhereInput: GuildPostScalarWhereInputInputObject
      GuildPostUpdateManyWithWhereNestedInput: GuildPostUpdateManyWithWhereNestedInputInputObject
      GuildPostUpdateManyDataInput: GuildPostUpdateManyDataInputInputObject
      GuildEventUpdateManyWithoutGuildInput: GuildEventUpdateManyWithoutGuildInputInputObject
      GuildEventUpdateWithWhereUniqueWithoutGuildInput: GuildEventUpdateWithWhereUniqueWithoutGuildInputInputObject
      GuildEventUpdateWithoutGuildDataInput: GuildEventUpdateWithoutGuildDataInputInputObject
      InstanceUpdateOneRequiredInput: InstanceUpdateOneRequiredInputInputObject
      InstanceUpdateDataInput: InstanceUpdateDataInputInputObject
      InstanceUpsertNestedInput: InstanceUpsertNestedInputInputObject
      GuildMemberUpdateManyWithoutEventsInput: GuildMemberUpdateManyWithoutEventsInputInputObject
      GuildMemberUpdateWithWhereUniqueWithoutEventsInput: GuildMemberUpdateWithWhereUniqueWithoutEventsInputInputObject
      GuildMemberUpdateWithoutEventsDataInput: GuildMemberUpdateWithoutEventsDataInputInputObject
      CharacterUpdateOneRequiredWithoutGuildInput: CharacterUpdateOneRequiredWithoutGuildInputInputObject
      CharacterUpdateWithoutGuildDataInput: CharacterUpdateWithoutGuildDataInputInputObject
      RealmUpdateOneRequiredWithoutCharactersInput: RealmUpdateOneRequiredWithoutCharactersInputInputObject
      RealmUpdateWithoutCharactersDataInput: RealmUpdateWithoutCharactersDataInputInputObject
      GuildUpdateManyWithoutRealmInput: GuildUpdateManyWithoutRealmInputInputObject
      GuildUpdateWithWhereUniqueWithoutRealmInput: GuildUpdateWithWhereUniqueWithoutRealmInputInputObject
      GuildUpdateWithoutRealmDataInput: GuildUpdateWithoutRealmDataInputInputObject
      GuildMemberUpdateManyWithoutGuildInput: GuildMemberUpdateManyWithoutGuildInputInputObject
      GuildMemberUpdateWithWhereUniqueWithoutGuildInput: GuildMemberUpdateWithWhereUniqueWithoutGuildInputInputObject
      GuildMemberUpdateWithoutGuildDataInput: GuildMemberUpdateWithoutGuildDataInputInputObject
      GuildEventUpdateManyWithoutRosterInput: GuildEventUpdateManyWithoutRosterInputInputObject
      GuildEventUpdateWithWhereUniqueWithoutRosterInput: GuildEventUpdateWithWhereUniqueWithoutRosterInputInputObject
      GuildEventUpdateWithoutRosterDataInput: GuildEventUpdateWithoutRosterDataInputInputObject
      GuildUpdateOneRequiredWithoutEventsInput: GuildUpdateOneRequiredWithoutEventsInputInputObject
      GuildUpdateWithoutEventsDataInput: GuildUpdateWithoutEventsDataInputInputObject
      GuildApplicationUpdateManyWithoutGuildInput: GuildApplicationUpdateManyWithoutGuildInputInputObject
      GuildApplicationUpdateWithWhereUniqueWithoutGuildInput: GuildApplicationUpdateWithWhereUniqueWithoutGuildInputInputObject
      GuildApplicationUpdateWithoutGuildDataInput: GuildApplicationUpdateWithoutGuildDataInputInputObject
      CharacterUpdateOneRequiredWithoutApplicationsInput: CharacterUpdateOneRequiredWithoutApplicationsInputInputObject
      CharacterUpdateWithoutApplicationsDataInput: CharacterUpdateWithoutApplicationsDataInputInputObject
      CharacterUpsertWithoutApplicationsInput: CharacterUpsertWithoutApplicationsInputInputObject
      GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInput: GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInputInputObject
      GuildApplicationFormQuestionAnswerUpdateWithWhereUniqueWithoutApplicationInput: GuildApplicationFormQuestionAnswerUpdateWithWhereUniqueWithoutApplicationInputInputObject
      GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInput: GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInputInputObject
      GuildApplicationFormQuestionUpdateOneRequiredInput: GuildApplicationFormQuestionUpdateOneRequiredInputInputObject
      GuildApplicationFormQuestionUpdateDataInput: GuildApplicationFormQuestionUpdateDataInputInputObject
      GuildApplicationFormUpdateOneRequiredWithoutQuestionsInput: GuildApplicationFormUpdateOneRequiredWithoutQuestionsInputInputObject
      GuildApplicationFormUpdateWithoutQuestionsDataInput: GuildApplicationFormUpdateWithoutQuestionsDataInputInputObject
      GuildUpdateOneRequiredWithoutApplicationFormInput: GuildUpdateOneRequiredWithoutApplicationFormInputInputObject
      GuildUpdateWithoutApplicationFormDataInput: GuildUpdateWithoutApplicationFormDataInputInputObject
      GuildUpsertWithoutApplicationFormInput: GuildUpsertWithoutApplicationFormInputInputObject
      GuildApplicationFormUpsertWithoutQuestionsInput: GuildApplicationFormUpsertWithoutQuestionsInputInputObject
      GuildApplicationFormQuestionUpsertNestedInput: GuildApplicationFormQuestionUpsertNestedInputInputObject
      GuildApplicationFormQuestionAnswerUpsertWithWhereUniqueWithoutApplicationInput: GuildApplicationFormQuestionAnswerUpsertWithWhereUniqueWithoutApplicationInputInputObject
      GuildApplicationFormQuestionAnswerScalarWhereInput: GuildApplicationFormQuestionAnswerScalarWhereInputInputObject
      GuildApplicationFormQuestionAnswerUpdateManyWithWhereNestedInput: GuildApplicationFormQuestionAnswerUpdateManyWithWhereNestedInputInputObject
      GuildApplicationFormQuestionAnswerUpdateManyDataInput: GuildApplicationFormQuestionAnswerUpdateManyDataInputInputObject
      GuildApplicationUpsertWithWhereUniqueWithoutGuildInput: GuildApplicationUpsertWithWhereUniqueWithoutGuildInputInputObject
      GuildApplicationScalarWhereInput: GuildApplicationScalarWhereInputInputObject
      GuildApplicationUpdateManyWithWhereNestedInput: GuildApplicationUpdateManyWithWhereNestedInputInputObject
      GuildApplicationUpdateManyDataInput: GuildApplicationUpdateManyDataInputInputObject
      GuildApplicationFormUpdateOneWithoutGuildInput: GuildApplicationFormUpdateOneWithoutGuildInputInputObject
      GuildApplicationFormUpdateWithoutGuildDataInput: GuildApplicationFormUpdateWithoutGuildDataInputInputObject
      GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInput: GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInputInputObject
      GuildApplicationFormQuestionUpdateWithWhereUniqueWithoutGuildApplicationFormInput: GuildApplicationFormQuestionUpdateWithWhereUniqueWithoutGuildApplicationFormInputInputObject
      GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInput: GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInputInputObject
      GuildApplicationFormQuestionUpsertWithWhereUniqueWithoutGuildApplicationFormInput: GuildApplicationFormQuestionUpsertWithWhereUniqueWithoutGuildApplicationFormInputInputObject
      GuildApplicationFormQuestionScalarWhereInput: GuildApplicationFormQuestionScalarWhereInputInputObject
      GuildApplicationFormQuestionUpdateManyWithWhereNestedInput: GuildApplicationFormQuestionUpdateManyWithWhereNestedInputInputObject
      GuildApplicationFormQuestionUpdateManyDataInput: GuildApplicationFormQuestionUpdateManyDataInputInputObject
      GuildApplicationFormUpsertWithoutGuildInput: GuildApplicationFormUpsertWithoutGuildInputInputObject
      GuildUpsertWithoutEventsInput: GuildUpsertWithoutEventsInputInputObject
      GuildEventUpsertWithWhereUniqueWithoutRosterInput: GuildEventUpsertWithWhereUniqueWithoutRosterInputInputObject
      GuildEventScalarWhereInput: GuildEventScalarWhereInputInputObject
      GuildEventUpdateManyWithWhereNestedInput: GuildEventUpdateManyWithWhereNestedInputInputObject
      GuildEventUpdateManyDataInput: GuildEventUpdateManyDataInputInputObject
      GuildMemberUpsertWithWhereUniqueWithoutGuildInput: GuildMemberUpsertWithWhereUniqueWithoutGuildInputInputObject
      GuildMemberScalarWhereInput: GuildMemberScalarWhereInputInputObject
      GuildMemberUpdateManyWithWhereNestedInput: GuildMemberUpdateManyWithWhereNestedInputInputObject
      GuildMemberUpdateManyDataInput: GuildMemberUpdateManyDataInputInputObject
      GuildUpsertWithWhereUniqueWithoutRealmInput: GuildUpsertWithWhereUniqueWithoutRealmInputInputObject
      GuildScalarWhereInput: GuildScalarWhereInputInputObject
      GuildUpdateManyWithWhereNestedInput: GuildUpdateManyWithWhereNestedInputInputObject
      GuildUpdateManyDataInput: GuildUpdateManyDataInputInputObject
      RealmUpsertWithoutCharactersInput: RealmUpsertWithoutCharactersInputInputObject
      GuildApplicationUpdateManyWithoutCharacterInput: GuildApplicationUpdateManyWithoutCharacterInputInputObject
      GuildApplicationUpdateWithWhereUniqueWithoutCharacterInput: GuildApplicationUpdateWithWhereUniqueWithoutCharacterInputInputObject
      GuildApplicationUpdateWithoutCharacterDataInput: GuildApplicationUpdateWithoutCharacterDataInputInputObject
      GuildUpdateOneRequiredWithoutApplicationsInput: GuildUpdateOneRequiredWithoutApplicationsInputInputObject
      GuildUpdateWithoutApplicationsDataInput: GuildUpdateWithoutApplicationsDataInputInputObject
      GuildUpsertWithoutApplicationsInput: GuildUpsertWithoutApplicationsInputInputObject
      GuildApplicationUpsertWithWhereUniqueWithoutCharacterInput: GuildApplicationUpsertWithWhereUniqueWithoutCharacterInputInputObject
      CharacterUpsertWithoutGuildInput: CharacterUpsertWithoutGuildInputInputObject
      GuildMemberUpsertWithWhereUniqueWithoutEventsInput: GuildMemberUpsertWithWhereUniqueWithoutEventsInputInputObject
      GuildEventUpsertWithWhereUniqueWithoutGuildInput: GuildEventUpsertWithWhereUniqueWithoutGuildInputInputObject
      GuildUpsertWithoutRosterInput: GuildUpsertWithoutRosterInputInputObject
      GuildMemberUpsertWithoutCharacterInput: GuildMemberUpsertWithoutCharacterInputInputObject
      CharacterUpsertWithWhereUniqueWithoutRealmInput: CharacterUpsertWithWhereUniqueWithoutRealmInputInputObject
      CharacterScalarWhereInput: CharacterScalarWhereInputInputObject
      CharacterUpdateManyWithWhereNestedInput: CharacterUpdateManyWithWhereNestedInputInputObject
      CharacterUpdateManyDataInput: CharacterUpdateManyDataInputInputObject
      RealmUpsertWithoutGuildsInput: RealmUpsertWithoutGuildsInputInputObject
      GuildUpdateManyMutationInput: GuildUpdateManyMutationInputInputObject
      GuildEventCreateInput: GuildEventCreateInputInputObject
      GuildEventUpdateInput: GuildEventUpdateInputInputObject
      GuildEventUpdateManyMutationInput: GuildEventUpdateManyMutationInputInputObject
      GuildMemberCreateInput: GuildMemberCreateInputInputObject
      GuildMemberUpdateInput: GuildMemberUpdateInputInputObject
      GuildMemberUpdateManyMutationInput: GuildMemberUpdateManyMutationInputInputObject
      GuildPostCreateInput: GuildPostCreateInputInputObject
      GuildCreateOneWithoutPostsInput: GuildCreateOneWithoutPostsInputInputObject
      GuildCreateWithoutPostsInput: GuildCreateWithoutPostsInputInputObject
      GuildPostUpdateInput: GuildPostUpdateInputInputObject
      GuildUpdateOneRequiredWithoutPostsInput: GuildUpdateOneRequiredWithoutPostsInputInputObject
      GuildUpdateWithoutPostsDataInput: GuildUpdateWithoutPostsDataInputInputObject
      GuildUpsertWithoutPostsInput: GuildUpsertWithoutPostsInputInputObject
      GuildPostUpdateManyMutationInput: GuildPostUpdateManyMutationInputInputObject
      GuildApplicationCreateInput: GuildApplicationCreateInputInputObject
      GuildApplicationUpdateInput: GuildApplicationUpdateInputInputObject
      GuildApplicationUpdateManyMutationInput: GuildApplicationUpdateManyMutationInputInputObject
      GuildApplicationFormCreateInput: GuildApplicationFormCreateInputInputObject
      GuildApplicationFormUpdateInput: GuildApplicationFormUpdateInputInputObject
      GuildApplicationFormUpdateManyMutationInput: GuildApplicationFormUpdateManyMutationInputInputObject
      GuildApplicationFormQuestionUpdateInput: GuildApplicationFormQuestionUpdateInputInputObject
      GuildApplicationFormQuestionUpdateManyMutationInput: GuildApplicationFormQuestionUpdateManyMutationInputInputObject
      GuildApplicationFormQuestionAnswerCreateInput: GuildApplicationFormQuestionAnswerCreateInputInputObject
      GuildApplicationCreateOneWithoutAnswersInput: GuildApplicationCreateOneWithoutAnswersInputInputObject
      GuildApplicationCreateWithoutAnswersInput: GuildApplicationCreateWithoutAnswersInputInputObject
      GuildApplicationFormQuestionAnswerUpdateInput: GuildApplicationFormQuestionAnswerUpdateInputInputObject
      GuildApplicationUpdateOneRequiredWithoutAnswersInput: GuildApplicationUpdateOneRequiredWithoutAnswersInputInputObject
      GuildApplicationUpdateWithoutAnswersDataInput: GuildApplicationUpdateWithoutAnswersDataInputInputObject
      GuildApplicationUpsertWithoutAnswersInput: GuildApplicationUpsertWithoutAnswersInputInputObject
      GuildApplicationFormQuestionAnswerUpdateManyMutationInput: GuildApplicationFormQuestionAnswerUpdateManyMutationInputInputObject
      InstanceUpdateInput: InstanceUpdateInputInputObject
      InstanceUpdateManyMutationInput: InstanceUpdateManyMutationInputInputObject
      CharacterCreateInput: CharacterCreateInputInputObject
      CharacterUpdateInput: CharacterUpdateInputInputObject
      CharacterUpdateManyMutationInput: CharacterUpdateManyMutationInputInputObject
      RealmCreateInput: RealmCreateInputInputObject
      RealmUpdateInput: RealmUpdateInputInputObject
      RealmUpdateManyMutationInput: RealmUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      CharacterCreateManyWithoutUserInput: CharacterCreateManyWithoutUserInputInputObject
      CharacterCreateWithoutUserInput: CharacterCreateWithoutUserInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      CharacterUpdateManyWithoutUserInput: CharacterUpdateManyWithoutUserInputInputObject
      CharacterUpdateWithWhereUniqueWithoutUserInput: CharacterUpdateWithWhereUniqueWithoutUserInputInputObject
      CharacterUpdateWithoutUserDataInput: CharacterUpdateWithoutUserDataInputInputObject
      CharacterUpsertWithWhereUniqueWithoutUserInput: CharacterUpsertWithWhereUniqueWithoutUserInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      GuildSubscriptionWhereInput: GuildSubscriptionWhereInputInputObject
      GuildEventSubscriptionWhereInput: GuildEventSubscriptionWhereInputInputObject
      GuildMemberSubscriptionWhereInput: GuildMemberSubscriptionWhereInputInputObject
      GuildPostSubscriptionWhereInput: GuildPostSubscriptionWhereInputInputObject
      GuildApplicationSubscriptionWhereInput: GuildApplicationSubscriptionWhereInputInputObject
      GuildApplicationFormSubscriptionWhereInput: GuildApplicationFormSubscriptionWhereInputInputObject
      GuildApplicationFormQuestionSubscriptionWhereInput: GuildApplicationFormQuestionSubscriptionWhereInputInputObject
      GuildApplicationFormQuestionAnswerSubscriptionWhereInput: GuildApplicationFormQuestionAnswerSubscriptionWhereInputInputObject
      InstanceSubscriptionWhereInput: InstanceSubscriptionWhereInputInputObject
      CharacterSubscriptionWhereInput: CharacterSubscriptionWhereInputInputObject
      RealmSubscriptionWhereInput: RealmSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    RealmType: RealmTypeValues,
    RealmPopulation: RealmPopulationValues,
    GuildLootingSystem: GuildLootingSystemValues,
    GuildRole: GuildRoleValues,
    Role: RoleValues,
    GuildApplicationStatus: GuildApplicationStatusValues,
    CharacterClassEnum: CharacterClassEnumValues,
    CharacterOrderByInput: CharacterOrderByInputValues,
    GuildEventOrderByInput: GuildEventOrderByInputValues,
    GuildMemberOrderByInput: GuildMemberOrderByInputValues,
    GuildApplicationOrderByInput: GuildApplicationOrderByInputValues,
    GuildApplicationFormQuestionAnswerOrderByInput: GuildApplicationFormQuestionAnswerOrderByInputValues,
    GuildApplicationFormQuestionOrderByInput: GuildApplicationFormQuestionOrderByInputValues,
    GuildOrderByInput: GuildOrderByInputValues,
    GuildPostOrderByInput: GuildPostOrderByInputValues,
    GuildApplicationFormOrderByInput: GuildApplicationFormOrderByInputValues,
    InstanceOrderByInput: InstanceOrderByInputValues,
    RealmOrderByInput: RealmOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'guild', args?: QueryGuildArgs[] | false, alias?: string  } 
  | { name: 'guilds', args?: QueryGuildsArgs[] | false, alias?: string  } 
  | { name: 'guildsConnection', args?: QueryGuildsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildEvent', args?: QueryGuildEventArgs[] | false, alias?: string  } 
  | { name: 'guildEvents', args?: QueryGuildEventsArgs[] | false, alias?: string  } 
  | { name: 'guildEventsConnection', args?: QueryGuildEventsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildMember', args?: QueryGuildMemberArgs[] | false, alias?: string  } 
  | { name: 'guildMembers', args?: QueryGuildMembersArgs[] | false, alias?: string  } 
  | { name: 'guildMembersConnection', args?: QueryGuildMembersConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildPost', args?: QueryGuildPostArgs[] | false, alias?: string  } 
  | { name: 'guildPosts', args?: QueryGuildPostsArgs[] | false, alias?: string  } 
  | { name: 'guildPostsConnection', args?: QueryGuildPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildApplication', args?: QueryGuildApplicationArgs[] | false, alias?: string  } 
  | { name: 'guildApplications', args?: QueryGuildApplicationsArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationsConnection', args?: QueryGuildApplicationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationForm', args?: QueryGuildApplicationFormArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationForms', args?: QueryGuildApplicationFormsArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormsConnection', args?: QueryGuildApplicationFormsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestion', args?: QueryGuildApplicationFormQuestionArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestions', args?: QueryGuildApplicationFormQuestionsArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestionsConnection', args?: QueryGuildApplicationFormQuestionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestionAnswer', args?: QueryGuildApplicationFormQuestionAnswerArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestionAnswers', args?: QueryGuildApplicationFormQuestionAnswersArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestionAnswersConnection', args?: QueryGuildApplicationFormQuestionAnswersConnectionArgs[] | false, alias?: string  } 
  | { name: 'instance', args?: QueryInstanceArgs[] | false, alias?: string  } 
  | { name: 'instances', args?: QueryInstancesArgs[] | false, alias?: string  } 
  | { name: 'instancesConnection', args?: QueryInstancesConnectionArgs[] | false, alias?: string  } 
  | { name: 'character', args?: QueryCharacterArgs[] | false, alias?: string  } 
  | { name: 'characters', args?: QueryCharactersArgs[] | false, alias?: string  } 
  | { name: 'charactersConnection', args?: QueryCharactersConnectionArgs[] | false, alias?: string  } 
  | { name: 'realm', args?: QueryRealmArgs[] | false, alias?: string  } 
  | { name: 'realms', args?: QueryRealmsArgs[] | false, alias?: string  } 
  | { name: 'realmsConnection', args?: QueryRealmsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'guild'
  | 'guilds'
  | 'guildsConnection'
  | 'guildEvent'
  | 'guildEvents'
  | 'guildEventsConnection'
  | 'guildMember'
  | 'guildMembers'
  | 'guildMembersConnection'
  | 'guildPost'
  | 'guildPosts'
  | 'guildPostsConnection'
  | 'guildApplication'
  | 'guildApplications'
  | 'guildApplicationsConnection'
  | 'guildApplicationForm'
  | 'guildApplicationForms'
  | 'guildApplicationFormsConnection'
  | 'guildApplicationFormQuestion'
  | 'guildApplicationFormQuestions'
  | 'guildApplicationFormQuestionsConnection'
  | 'guildApplicationFormQuestionAnswer'
  | 'guildApplicationFormQuestionAnswers'
  | 'guildApplicationFormQuestionAnswersConnection'
  | 'instance'
  | 'instances'
  | 'instancesConnection'
  | 'character'
  | 'characters'
  | 'charactersConnection'
  | 'realm'
  | 'realms'
  | 'realmsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'


type QueryGuildArgs =
  | 'where'
type QueryGuildsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildEventArgs =
  | 'where'
type QueryGuildEventsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildEventsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildMemberArgs =
  | 'where'
type QueryGuildMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildMembersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildPostArgs =
  | 'where'
type QueryGuildPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationArgs =
  | 'where'
type QueryGuildApplicationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationFormArgs =
  | 'where'
type QueryGuildApplicationFormsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationFormsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationFormQuestionArgs =
  | 'where'
type QueryGuildApplicationFormQuestionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationFormQuestionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationFormQuestionAnswerArgs =
  | 'where'
type QueryGuildApplicationFormQuestionAnswersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuildApplicationFormQuestionAnswersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInstanceArgs =
  | 'where'
type QueryInstancesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInstancesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCharacterArgs =
  | 'where'
type QueryCharactersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCharactersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRealmArgs =
  | 'where'
type QueryRealmsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRealmsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  guild: {
    type: 'Guild'
    args: Record<QueryGuildArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild | null> | prisma.Guild | null
  }
  guilds: {
    type: 'Guild'
    args: Record<QueryGuildsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildWhereInput | null, orderBy?: prisma.GuildOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild[]> | prisma.Guild[]
  }
  guildsConnection: {
    type: 'GuildConnection'
    args: Record<QueryGuildsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildWhereInput | null, orderBy?: prisma.GuildOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildConnection> | prisma.GuildConnection
  }
  guildEvent: {
    type: 'GuildEvent'
    args: Record<QueryGuildEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildEventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent | null> | prisma.GuildEvent | null
  }
  guildEvents: {
    type: 'GuildEvent'
    args: Record<QueryGuildEventsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildEventWhereInput | null, orderBy?: prisma.GuildEventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent[]> | prisma.GuildEvent[]
  }
  guildEventsConnection: {
    type: 'GuildEventConnection'
    args: Record<QueryGuildEventsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildEventWhereInput | null, orderBy?: prisma.GuildEventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEventConnection> | prisma.GuildEventConnection
  }
  guildMember: {
    type: 'GuildMember'
    args: Record<QueryGuildMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildMemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember | null> | prisma.GuildMember | null
  }
  guildMembers: {
    type: 'GuildMember'
    args: Record<QueryGuildMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildMemberWhereInput | null, orderBy?: prisma.GuildMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember[]> | prisma.GuildMember[]
  }
  guildMembersConnection: {
    type: 'GuildMemberConnection'
    args: Record<QueryGuildMembersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildMemberWhereInput | null, orderBy?: prisma.GuildMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMemberConnection> | prisma.GuildMemberConnection
  }
  guildPost: {
    type: 'GuildPost'
    args: Record<QueryGuildPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildPostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost | null> | prisma.GuildPost | null
  }
  guildPosts: {
    type: 'GuildPost'
    args: Record<QueryGuildPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildPostWhereInput | null, orderBy?: prisma.GuildPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost[]> | prisma.GuildPost[]
  }
  guildPostsConnection: {
    type: 'GuildPostConnection'
    args: Record<QueryGuildPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildPostWhereInput | null, orderBy?: prisma.GuildPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPostConnection> | prisma.GuildPostConnection
  }
  guildApplication: {
    type: 'GuildApplication'
    args: Record<QueryGuildApplicationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildApplicationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication | null> | prisma.GuildApplication | null
  }
  guildApplications: {
    type: 'GuildApplication'
    args: Record<QueryGuildApplicationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationWhereInput | null, orderBy?: prisma.GuildApplicationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication[]> | prisma.GuildApplication[]
  }
  guildApplicationsConnection: {
    type: 'GuildApplicationConnection'
    args: Record<QueryGuildApplicationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationWhereInput | null, orderBy?: prisma.GuildApplicationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationConnection> | prisma.GuildApplicationConnection
  }
  guildApplicationForm: {
    type: 'GuildApplicationForm'
    args: Record<QueryGuildApplicationFormArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildApplicationFormWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm | null> | prisma.GuildApplicationForm | null
  }
  guildApplicationForms: {
    type: 'GuildApplicationForm'
    args: Record<QueryGuildApplicationFormsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationFormWhereInput | null, orderBy?: prisma.GuildApplicationFormOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm[]> | prisma.GuildApplicationForm[]
  }
  guildApplicationFormsConnection: {
    type: 'GuildApplicationFormConnection'
    args: Record<QueryGuildApplicationFormsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationFormWhereInput | null, orderBy?: prisma.GuildApplicationFormOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormConnection> | prisma.GuildApplicationFormConnection
  }
  guildApplicationFormQuestion: {
    type: 'GuildApplicationFormQuestion'
    args: Record<QueryGuildApplicationFormQuestionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildApplicationFormQuestionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion | null> | prisma.GuildApplicationFormQuestion | null
  }
  guildApplicationFormQuestions: {
    type: 'GuildApplicationFormQuestion'
    args: Record<QueryGuildApplicationFormQuestionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationFormQuestionWhereInput | null, orderBy?: prisma.GuildApplicationFormQuestionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion[]> | prisma.GuildApplicationFormQuestion[]
  }
  guildApplicationFormQuestionsConnection: {
    type: 'GuildApplicationFormQuestionConnection'
    args: Record<QueryGuildApplicationFormQuestionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationFormQuestionWhereInput | null, orderBy?: prisma.GuildApplicationFormQuestionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionConnection> | prisma.GuildApplicationFormQuestionConnection
  }
  guildApplicationFormQuestionAnswer: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<QueryGuildApplicationFormQuestionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuildApplicationFormQuestionAnswerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer | null> | prisma.GuildApplicationFormQuestionAnswer | null
  }
  guildApplicationFormQuestionAnswers: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<QueryGuildApplicationFormQuestionAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationFormQuestionAnswerWhereInput | null, orderBy?: prisma.GuildApplicationFormQuestionAnswerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer[]> | prisma.GuildApplicationFormQuestionAnswer[]
  }
  guildApplicationFormQuestionAnswersConnection: {
    type: 'GuildApplicationFormQuestionAnswerConnection'
    args: Record<QueryGuildApplicationFormQuestionAnswersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuildApplicationFormQuestionAnswerWhereInput | null, orderBy?: prisma.GuildApplicationFormQuestionAnswerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswerConnection> | prisma.GuildApplicationFormQuestionAnswerConnection
  }
  instance: {
    type: 'Instance'
    args: Record<QueryInstanceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InstanceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance | null> | prisma.Instance | null
  }
  instances: {
    type: 'Instance'
    args: Record<QueryInstancesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InstanceWhereInput | null, orderBy?: prisma.InstanceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance[]> | prisma.Instance[]
  }
  instancesConnection: {
    type: 'InstanceConnection'
    args: Record<QueryInstancesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InstanceWhereInput | null, orderBy?: prisma.InstanceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstanceConnection> | prisma.InstanceConnection
  }
  character: {
    type: 'Character'
    args: Record<QueryCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  characters: {
    type: 'Character'
    args: Record<QueryCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character[]> | prisma.Character[]
  }
  charactersConnection: {
    type: 'CharacterConnection'
    args: Record<QueryCharactersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterConnection> | prisma.CharacterConnection
  }
  realm: {
    type: 'Realm'
    args: Record<QueryRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RealmWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  realms: {
    type: 'Realm'
    args: Record<QueryRealmsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RealmWhereInput | null, orderBy?: prisma.RealmOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm[]> | prisma.Realm[]
  }
  realmsConnection: {
    type: 'RealmConnection'
    args: Record<QueryRealmsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RealmWhereInput | null, orderBy?: prisma.RealmOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmConnection> | prisma.RealmConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
}
  

// Types for Guild

type GuildObject =
  | GuildFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'realm', args?: [] | false, alias?: string  } 
  | { name: 'lootingSystem', args?: [] | false, alias?: string  } 
  | { name: 'roster', args?: GuildRosterArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: GuildPostsArgs[] | false, alias?: string  } 
  | { name: 'events', args?: GuildEventsArgs[] | false, alias?: string  } 
  | { name: 'applications', args?: GuildApplicationsArgs[] | false, alias?: string  } 
  | { name: 'applicationForm', args?: [] | false, alias?: string  } 

type GuildFields =
  | 'id'
  | 'createdAt'
  | 'name'
  | 'avatar'
  | 'realm'
  | 'lootingSystem'
  | 'roster'
  | 'posts'
  | 'events'
  | 'applications'
  | 'applicationForm'


type GuildRosterArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type GuildPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type GuildEventsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type GuildApplicationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GuildFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  realm: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Guild">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  lootingSystem: {
    type: 'GuildLootingSystem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Guild">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildLootingSystem> | prisma.GuildLootingSystem
  }
  roster: {
    type: 'GuildMember'
    args: Record<GuildRosterArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Guild">,
      args: { where?: GuildMemberWhereInput | null, orderBy?: prisma.GuildMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember[]> | prisma.GuildMember[]
  }
  posts: {
    type: 'GuildPost'
    args: Record<GuildPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Guild">,
      args: { where?: GuildPostWhereInput | null, orderBy?: prisma.GuildPostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost[]> | prisma.GuildPost[]
  }
  events: {
    type: 'GuildEvent'
    args: Record<GuildEventsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Guild">,
      args: { where?: GuildEventWhereInput | null, orderBy?: prisma.GuildEventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent[]> | prisma.GuildEvent[]
  }
  applications: {
    type: 'GuildApplication'
    args: Record<GuildApplicationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Guild">,
      args: { where?: GuildApplicationWhereInput | null, orderBy?: prisma.GuildApplicationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication[]> | prisma.GuildApplication[]
  }
  applicationForm: {
    type: 'GuildApplicationForm'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Guild">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm | null> | prisma.GuildApplicationForm | null
  }
}
  

// Types for Realm

type RealmObject =
  | RealmFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'population', args?: [] | false, alias?: string  } 
  | { name: 'characters', args?: RealmCharactersArgs[] | false, alias?: string  } 
  | { name: 'guilds', args?: RealmGuildsArgs[] | false, alias?: string  } 

type RealmFields =
  | 'id'
  | 'name'
  | 'type'
  | 'population'
  | 'characters'
  | 'guilds'


type RealmCharactersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type RealmGuildsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RealmFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'RealmType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Realm">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmType> | prisma.RealmType
  }
  population: {
    type: 'RealmPopulation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Realm">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmPopulation> | prisma.RealmPopulation
  }
  characters: {
    type: 'Character'
    args: Record<RealmCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Realm">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character[]> | prisma.Character[]
  }
  guilds: {
    type: 'Guild'
    args: Record<RealmGuildsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Realm">,
      args: { where?: GuildWhereInput | null, orderBy?: prisma.GuildOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild[]> | prisma.Guild[]
  }
}
  

// Types for Character

type CharacterObject =
  | CharacterFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'realm', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'class', args?: [] | false, alias?: string  } 
  | { name: 'guild', args?: [] | false, alias?: string  } 
  | { name: 'applications', args?: CharacterApplicationsArgs[] | false, alias?: string  } 

type CharacterFields =
  | 'id'
  | 'createdAt'
  | 'user'
  | 'realm'
  | 'name'
  | 'class'
  | 'guild'
  | 'applications'


type CharacterApplicationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CharacterFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Character">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  realm: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Character">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  class: {
    type: 'CharacterClassEnum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Character">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterClassEnum> | prisma.CharacterClassEnum
  }
  guild: {
    type: 'GuildMember'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Character">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember | null> | prisma.GuildMember | null
  }
  applications: {
    type: 'GuildApplication'
    args: Record<CharacterApplicationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Character">,
      args: { where?: GuildApplicationWhereInput | null, orderBy?: prisma.GuildApplicationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication[]> | prisma.GuildApplication[]
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'displayName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'confirmed', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'characters', args?: UserCharactersArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'createdAt'
  | 'displayName'
  | 'email'
  | 'password'
  | 'confirmed'
  | 'avatar'
  | 'characters'


type UserCharactersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  displayName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  confirmed: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  characters: {
    type: 'Character'
    args: Record<UserCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character[]> | prisma.Character[]
  }
}
  

// Types for GuildMember

type GuildMemberObject =
  | GuildMemberFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'character', args?: [] | false, alias?: string  } 
  | { name: 'guild', args?: [] | false, alias?: string  } 
  | { name: 'guildRole', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'dkp', args?: [] | false, alias?: string  } 
  | { name: 'events', args?: GuildMemberEventsArgs[] | false, alias?: string  } 

type GuildMemberFields =
  | 'id'
  | 'character'
  | 'guild'
  | 'guildRole'
  | 'role'
  | 'dkp'
  | 'events'


type GuildMemberEventsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GuildMemberFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  character: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  guild: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  guildRole: {
    type: 'GuildRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildRole> | prisma.GuildRole
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  dkp: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  events: {
    type: 'GuildEvent'
    args: Record<GuildMemberEventsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMember">,
      args: { where?: GuildEventWhereInput | null, orderBy?: prisma.GuildEventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent[]> | prisma.GuildEvent[]
  }
}
  

// Types for GuildEvent

type GuildEventObject =
  | GuildEventFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'startingAt', args?: [] | false, alias?: string  } 
  | { name: 'instance', args?: [] | false, alias?: string  } 
  | { name: 'guild', args?: [] | false, alias?: string  } 
  | { name: 'roster', args?: GuildEventRosterArgs[] | false, alias?: string  } 

type GuildEventFields =
  | 'id'
  | 'createdAt'
  | 'title'
  | 'startingAt'
  | 'instance'
  | 'guild'
  | 'roster'


type GuildEventRosterArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GuildEventFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startingAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  instance: {
    type: 'Instance'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEvent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance> | prisma.Instance
  }
  guild: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEvent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  roster: {
    type: 'GuildMember'
    args: Record<GuildEventRosterArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEvent">,
      args: { where?: GuildMemberWhereInput | null, orderBy?: prisma.GuildMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember[]> | prisma.GuildMember[]
  }
}
  

// Types for Instance

type InstanceObject =
  | InstanceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'Abbreviation', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'wiki', args?: [] | false, alias?: string  } 
  | { name: 'suggestedLevel', args?: [] | false, alias?: string  } 
  | { name: 'playersCap', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 

type InstanceFields =
  | 'id'
  | 'name'
  | 'Abbreviation'
  | 'image'
  | 'wiki'
  | 'suggestedLevel'
  | 'playersCap'
  | 'location'



  

export interface InstanceFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  Abbreviation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  wiki: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  suggestedLevel: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  playersCap: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildApplication

type GuildApplicationObject =
  | GuildApplicationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'guild', args?: [] | false, alias?: string  } 
  | { name: 'character', args?: [] | false, alias?: string  } 
  | { name: 'answers', args?: GuildApplicationAnswersArgs[] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type GuildApplicationFields =
  | 'id'
  | 'createdAt'
  | 'guild'
  | 'character'
  | 'answers'
  | 'status'
  | 'comment'


type GuildApplicationAnswersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GuildApplicationFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guild: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplication">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  character: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplication">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  answers: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<GuildApplicationAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplication">,
      args: { where?: GuildApplicationFormQuestionAnswerWhereInput | null, orderBy?: prisma.GuildApplicationFormQuestionAnswerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer[]> | prisma.GuildApplicationFormQuestionAnswer[]
  }
  status: {
    type: 'GuildApplicationStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplication">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationStatus> | prisma.GuildApplicationStatus
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormQuestionAnswer

type GuildApplicationFormQuestionAnswerObject =
  | GuildApplicationFormQuestionAnswerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'application', args?: [] | false, alias?: string  } 
  | { name: 'question', args?: [] | false, alias?: string  } 
  | { name: 'answer', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionAnswerFields =
  | 'id'
  | 'application'
  | 'question'
  | 'answer'



  

export interface GuildApplicationFormQuestionAnswerFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  application: {
    type: 'GuildApplication'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication> | prisma.GuildApplication
  }
  question: {
    type: 'GuildApplicationFormQuestion'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion> | prisma.GuildApplicationFormQuestion
  }
  answer: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormQuestion

type GuildApplicationFormQuestionObject =
  | GuildApplicationFormQuestionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'guildApplicationForm', args?: [] | false, alias?: string  } 
  | { name: 'question', args?: [] | false, alias?: string  } 
  | { name: 'sequence', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionFields =
  | 'id'
  | 'guildApplicationForm'
  | 'question'
  | 'sequence'



  

export interface GuildApplicationFormQuestionFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guildApplicationForm: {
    type: 'GuildApplicationForm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestion">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm> | prisma.GuildApplicationForm
  }
  question: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sequence: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildApplicationForm

type GuildApplicationFormObject =
  | GuildApplicationFormFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lastUpdatedAt', args?: [] | false, alias?: string  } 
  | { name: 'guild', args?: [] | false, alias?: string  } 
  | { name: 'questions', args?: GuildApplicationFormQuestionsArgs[] | false, alias?: string  } 

type GuildApplicationFormFields =
  | 'id'
  | 'lastUpdatedAt'
  | 'guild'
  | 'questions'


type GuildApplicationFormQuestionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface GuildApplicationFormFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastUpdatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guild: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationForm">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  questions: {
    type: 'GuildApplicationFormQuestion'
    args: Record<GuildApplicationFormQuestionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationForm">,
      args: { where?: GuildApplicationFormQuestionWhereInput | null, orderBy?: prisma.GuildApplicationFormQuestionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion[]> | prisma.GuildApplicationFormQuestion[]
  }
}
  

// Types for GuildPost

type GuildPostObject =
  | GuildPostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'guild', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 

type GuildPostFields =
  | 'id'
  | 'createdAt'
  | 'guild'
  | 'title'
  | 'body'



  

export interface GuildPostFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guild: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPost">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  body: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildConnection

type GuildConnectionObject =
  | GuildConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEdge[]> | prisma.GuildEdge[]
  }
  aggregate: {
    type: 'AggregateGuild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuild> | prisma.AggregateGuild
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildEdge

type GuildEdgeObject =
  | GuildEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildEdgeFieldDetails {
  node: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuild

type AggregateGuildObject =
  | AggregateGuildFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildFields =
  | 'count'



  

export interface AggregateGuildFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildEventConnection

type GuildEventConnectionObject =
  | GuildEventConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildEventConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildEventConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildEventEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEventEdge[]> | prisma.GuildEventEdge[]
  }
  aggregate: {
    type: 'AggregateGuildEvent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildEvent> | prisma.AggregateGuildEvent
  }
}
  

// Types for GuildEventEdge

type GuildEventEdgeObject =
  | GuildEventEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildEventEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildEventEdgeFieldDetails {
  node: {
    type: 'GuildEvent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEventEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent> | prisma.GuildEvent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildEvent

type AggregateGuildEventObject =
  | AggregateGuildEventFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildEventFields =
  | 'count'



  

export interface AggregateGuildEventFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildMemberConnection

type GuildMemberConnectionObject =
  | GuildMemberConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildMemberConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildMemberConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildMemberEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMemberEdge[]> | prisma.GuildMemberEdge[]
  }
  aggregate: {
    type: 'AggregateGuildMember'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildMember> | prisma.AggregateGuildMember
  }
}
  

// Types for GuildMemberEdge

type GuildMemberEdgeObject =
  | GuildMemberEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildMemberEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildMemberEdgeFieldDetails {
  node: {
    type: 'GuildMember'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember> | prisma.GuildMember
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildMember

type AggregateGuildMemberObject =
  | AggregateGuildMemberFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildMemberFields =
  | 'count'



  

export interface AggregateGuildMemberFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildPostConnection

type GuildPostConnectionObject =
  | GuildPostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildPostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildPostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildPostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPostEdge[]> | prisma.GuildPostEdge[]
  }
  aggregate: {
    type: 'AggregateGuildPost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildPost> | prisma.AggregateGuildPost
  }
}
  

// Types for GuildPostEdge

type GuildPostEdgeObject =
  | GuildPostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildPostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildPostEdgeFieldDetails {
  node: {
    type: 'GuildPost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost> | prisma.GuildPost
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildPost

type AggregateGuildPostObject =
  | AggregateGuildPostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildPostFields =
  | 'count'



  

export interface AggregateGuildPostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationConnection

type GuildApplicationConnectionObject =
  | GuildApplicationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildApplicationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildApplicationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildApplicationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationEdge[]> | prisma.GuildApplicationEdge[]
  }
  aggregate: {
    type: 'AggregateGuildApplication'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildApplication> | prisma.AggregateGuildApplication
  }
}
  

// Types for GuildApplicationEdge

type GuildApplicationEdgeObject =
  | GuildApplicationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildApplicationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildApplicationEdgeFieldDetails {
  node: {
    type: 'GuildApplication'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication> | prisma.GuildApplication
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildApplication

type AggregateGuildApplicationObject =
  | AggregateGuildApplicationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildApplicationFields =
  | 'count'



  

export interface AggregateGuildApplicationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormConnection

type GuildApplicationFormConnectionObject =
  | GuildApplicationFormConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildApplicationFormConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildApplicationFormConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildApplicationFormEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormEdge[]> | prisma.GuildApplicationFormEdge[]
  }
  aggregate: {
    type: 'AggregateGuildApplicationForm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildApplicationForm> | prisma.AggregateGuildApplicationForm
  }
}
  

// Types for GuildApplicationFormEdge

type GuildApplicationFormEdgeObject =
  | GuildApplicationFormEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildApplicationFormEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildApplicationFormEdgeFieldDetails {
  node: {
    type: 'GuildApplicationForm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm> | prisma.GuildApplicationForm
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildApplicationForm

type AggregateGuildApplicationFormObject =
  | AggregateGuildApplicationFormFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildApplicationFormFields =
  | 'count'



  

export interface AggregateGuildApplicationFormFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormQuestionConnection

type GuildApplicationFormQuestionConnectionObject =
  | GuildApplicationFormQuestionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildApplicationFormQuestionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildApplicationFormQuestionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionEdge[]> | prisma.GuildApplicationFormQuestionEdge[]
  }
  aggregate: {
    type: 'AggregateGuildApplicationFormQuestion'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildApplicationFormQuestion> | prisma.AggregateGuildApplicationFormQuestion
  }
}
  

// Types for GuildApplicationFormQuestionEdge

type GuildApplicationFormQuestionEdgeObject =
  | GuildApplicationFormQuestionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildApplicationFormQuestionEdgeFieldDetails {
  node: {
    type: 'GuildApplicationFormQuestion'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion> | prisma.GuildApplicationFormQuestion
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildApplicationFormQuestion

type AggregateGuildApplicationFormQuestionObject =
  | AggregateGuildApplicationFormQuestionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildApplicationFormQuestionFields =
  | 'count'



  

export interface AggregateGuildApplicationFormQuestionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormQuestionAnswerConnection

type GuildApplicationFormQuestionAnswerConnectionObject =
  | GuildApplicationFormQuestionAnswerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionAnswerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuildApplicationFormQuestionAnswerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuildApplicationFormQuestionAnswerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswerEdge[]> | prisma.GuildApplicationFormQuestionAnswerEdge[]
  }
  aggregate: {
    type: 'AggregateGuildApplicationFormQuestionAnswer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuildApplicationFormQuestionAnswer> | prisma.AggregateGuildApplicationFormQuestionAnswer
  }
}
  

// Types for GuildApplicationFormQuestionAnswerEdge

type GuildApplicationFormQuestionAnswerEdgeObject =
  | GuildApplicationFormQuestionAnswerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionAnswerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuildApplicationFormQuestionAnswerEdgeFieldDetails {
  node: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer> | prisma.GuildApplicationFormQuestionAnswer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuildApplicationFormQuestionAnswer

type AggregateGuildApplicationFormQuestionAnswerObject =
  | AggregateGuildApplicationFormQuestionAnswerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuildApplicationFormQuestionAnswerFields =
  | 'count'



  

export interface AggregateGuildApplicationFormQuestionAnswerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InstanceConnection

type InstanceConnectionObject =
  | InstanceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InstanceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InstanceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstanceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InstanceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InstanceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstanceEdge[]> | prisma.InstanceEdge[]
  }
  aggregate: {
    type: 'AggregateInstance'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstanceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInstance> | prisma.AggregateInstance
  }
}
  

// Types for InstanceEdge

type InstanceEdgeObject =
  | InstanceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InstanceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InstanceEdgeFieldDetails {
  node: {
    type: 'Instance'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstanceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance> | prisma.Instance
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInstance

type AggregateInstanceObject =
  | AggregateInstanceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInstanceFields =
  | 'count'



  

export interface AggregateInstanceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CharacterConnection

type CharacterConnectionObject =
  | CharacterConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CharacterConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CharacterConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CharacterEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterEdge[]> | prisma.CharacterEdge[]
  }
  aggregate: {
    type: 'AggregateCharacter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCharacter> | prisma.AggregateCharacter
  }
}
  

// Types for CharacterEdge

type CharacterEdgeObject =
  | CharacterEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CharacterEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CharacterEdgeFieldDetails {
  node: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCharacter

type AggregateCharacterObject =
  | AggregateCharacterFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCharacterFields =
  | 'count'



  

export interface AggregateCharacterFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RealmConnection

type RealmConnectionObject =
  | RealmConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RealmConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RealmConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RealmEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RealmConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmEdge[]> | prisma.RealmEdge[]
  }
  aggregate: {
    type: 'AggregateRealm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRealm> | prisma.AggregateRealm
  }
}
  

// Types for RealmEdge

type RealmEdgeObject =
  | RealmEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RealmEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RealmEdgeFieldDetails {
  node: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRealm

type AggregateRealmObject =
  | AggregateRealmFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRealmFields =
  | 'count'



  

export interface AggregateRealmFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createGuild', args?: MutationCreateGuildArgs[] | false, alias?: string  } 
  | { name: 'updateGuild', args?: MutationUpdateGuildArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuilds', args?: MutationUpdateManyGuildsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuild', args?: MutationUpsertGuildArgs[] | false, alias?: string  } 
  | { name: 'deleteGuild', args?: MutationDeleteGuildArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuilds', args?: MutationDeleteManyGuildsArgs[] | false, alias?: string  } 
  | { name: 'createGuildEvent', args?: MutationCreateGuildEventArgs[] | false, alias?: string  } 
  | { name: 'updateGuildEvent', args?: MutationUpdateGuildEventArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildEvents', args?: MutationUpdateManyGuildEventsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildEvent', args?: MutationUpsertGuildEventArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildEvent', args?: MutationDeleteGuildEventArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildEvents', args?: MutationDeleteManyGuildEventsArgs[] | false, alias?: string  } 
  | { name: 'createGuildMember', args?: MutationCreateGuildMemberArgs[] | false, alias?: string  } 
  | { name: 'updateGuildMember', args?: MutationUpdateGuildMemberArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildMembers', args?: MutationUpdateManyGuildMembersArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildMember', args?: MutationUpsertGuildMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildMember', args?: MutationDeleteGuildMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildMembers', args?: MutationDeleteManyGuildMembersArgs[] | false, alias?: string  } 
  | { name: 'createGuildPost', args?: MutationCreateGuildPostArgs[] | false, alias?: string  } 
  | { name: 'updateGuildPost', args?: MutationUpdateGuildPostArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildPosts', args?: MutationUpdateManyGuildPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildPost', args?: MutationUpsertGuildPostArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildPost', args?: MutationDeleteGuildPostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildPosts', args?: MutationDeleteManyGuildPostsArgs[] | false, alias?: string  } 
  | { name: 'createGuildApplication', args?: MutationCreateGuildApplicationArgs[] | false, alias?: string  } 
  | { name: 'updateGuildApplication', args?: MutationUpdateGuildApplicationArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildApplications', args?: MutationUpdateManyGuildApplicationsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildApplication', args?: MutationUpsertGuildApplicationArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildApplication', args?: MutationDeleteGuildApplicationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildApplications', args?: MutationDeleteManyGuildApplicationsArgs[] | false, alias?: string  } 
  | { name: 'createGuildApplicationForm', args?: MutationCreateGuildApplicationFormArgs[] | false, alias?: string  } 
  | { name: 'updateGuildApplicationForm', args?: MutationUpdateGuildApplicationFormArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildApplicationForms', args?: MutationUpdateManyGuildApplicationFormsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildApplicationForm', args?: MutationUpsertGuildApplicationFormArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildApplicationForm', args?: MutationDeleteGuildApplicationFormArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildApplicationForms', args?: MutationDeleteManyGuildApplicationFormsArgs[] | false, alias?: string  } 
  | { name: 'createGuildApplicationFormQuestion', args?: MutationCreateGuildApplicationFormQuestionArgs[] | false, alias?: string  } 
  | { name: 'updateGuildApplicationFormQuestion', args?: MutationUpdateGuildApplicationFormQuestionArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildApplicationFormQuestions', args?: MutationUpdateManyGuildApplicationFormQuestionsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildApplicationFormQuestion', args?: MutationUpsertGuildApplicationFormQuestionArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildApplicationFormQuestion', args?: MutationDeleteGuildApplicationFormQuestionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildApplicationFormQuestions', args?: MutationDeleteManyGuildApplicationFormQuestionsArgs[] | false, alias?: string  } 
  | { name: 'createGuildApplicationFormQuestionAnswer', args?: MutationCreateGuildApplicationFormQuestionAnswerArgs[] | false, alias?: string  } 
  | { name: 'updateGuildApplicationFormQuestionAnswer', args?: MutationUpdateGuildApplicationFormQuestionAnswerArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuildApplicationFormQuestionAnswers', args?: MutationUpdateManyGuildApplicationFormQuestionAnswersArgs[] | false, alias?: string  } 
  | { name: 'upsertGuildApplicationFormQuestionAnswer', args?: MutationUpsertGuildApplicationFormQuestionAnswerArgs[] | false, alias?: string  } 
  | { name: 'deleteGuildApplicationFormQuestionAnswer', args?: MutationDeleteGuildApplicationFormQuestionAnswerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuildApplicationFormQuestionAnswers', args?: MutationDeleteManyGuildApplicationFormQuestionAnswersArgs[] | false, alias?: string  } 
  | { name: 'createInstance', args?: MutationCreateInstanceArgs[] | false, alias?: string  } 
  | { name: 'updateInstance', args?: MutationUpdateInstanceArgs[] | false, alias?: string  } 
  | { name: 'updateManyInstances', args?: MutationUpdateManyInstancesArgs[] | false, alias?: string  } 
  | { name: 'upsertInstance', args?: MutationUpsertInstanceArgs[] | false, alias?: string  } 
  | { name: 'deleteInstance', args?: MutationDeleteInstanceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInstances', args?: MutationDeleteManyInstancesArgs[] | false, alias?: string  } 
  | { name: 'createCharacter', args?: MutationCreateCharacterArgs[] | false, alias?: string  } 
  | { name: 'updateCharacter', args?: MutationUpdateCharacterArgs[] | false, alias?: string  } 
  | { name: 'updateManyCharacters', args?: MutationUpdateManyCharactersArgs[] | false, alias?: string  } 
  | { name: 'upsertCharacter', args?: MutationUpsertCharacterArgs[] | false, alias?: string  } 
  | { name: 'deleteCharacter', args?: MutationDeleteCharacterArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCharacters', args?: MutationDeleteManyCharactersArgs[] | false, alias?: string  } 
  | { name: 'createRealm', args?: MutationCreateRealmArgs[] | false, alias?: string  } 
  | { name: 'updateRealm', args?: MutationUpdateRealmArgs[] | false, alias?: string  } 
  | { name: 'updateManyRealms', args?: MutationUpdateManyRealmsArgs[] | false, alias?: string  } 
  | { name: 'upsertRealm', args?: MutationUpsertRealmArgs[] | false, alias?: string  } 
  | { name: 'deleteRealm', args?: MutationDeleteRealmArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRealms', args?: MutationDeleteManyRealmsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createGuild'
  | 'updateGuild'
  | 'updateManyGuilds'
  | 'upsertGuild'
  | 'deleteGuild'
  | 'deleteManyGuilds'
  | 'createGuildEvent'
  | 'updateGuildEvent'
  | 'updateManyGuildEvents'
  | 'upsertGuildEvent'
  | 'deleteGuildEvent'
  | 'deleteManyGuildEvents'
  | 'createGuildMember'
  | 'updateGuildMember'
  | 'updateManyGuildMembers'
  | 'upsertGuildMember'
  | 'deleteGuildMember'
  | 'deleteManyGuildMembers'
  | 'createGuildPost'
  | 'updateGuildPost'
  | 'updateManyGuildPosts'
  | 'upsertGuildPost'
  | 'deleteGuildPost'
  | 'deleteManyGuildPosts'
  | 'createGuildApplication'
  | 'updateGuildApplication'
  | 'updateManyGuildApplications'
  | 'upsertGuildApplication'
  | 'deleteGuildApplication'
  | 'deleteManyGuildApplications'
  | 'createGuildApplicationForm'
  | 'updateGuildApplicationForm'
  | 'updateManyGuildApplicationForms'
  | 'upsertGuildApplicationForm'
  | 'deleteGuildApplicationForm'
  | 'deleteManyGuildApplicationForms'
  | 'createGuildApplicationFormQuestion'
  | 'updateGuildApplicationFormQuestion'
  | 'updateManyGuildApplicationFormQuestions'
  | 'upsertGuildApplicationFormQuestion'
  | 'deleteGuildApplicationFormQuestion'
  | 'deleteManyGuildApplicationFormQuestions'
  | 'createGuildApplicationFormQuestionAnswer'
  | 'updateGuildApplicationFormQuestionAnswer'
  | 'updateManyGuildApplicationFormQuestionAnswers'
  | 'upsertGuildApplicationFormQuestionAnswer'
  | 'deleteGuildApplicationFormQuestionAnswer'
  | 'deleteManyGuildApplicationFormQuestionAnswers'
  | 'createInstance'
  | 'updateInstance'
  | 'updateManyInstances'
  | 'upsertInstance'
  | 'deleteInstance'
  | 'deleteManyInstances'
  | 'createCharacter'
  | 'updateCharacter'
  | 'updateManyCharacters'
  | 'upsertCharacter'
  | 'deleteCharacter'
  | 'deleteManyCharacters'
  | 'createRealm'
  | 'updateRealm'
  | 'updateManyRealms'
  | 'upsertRealm'
  | 'deleteRealm'
  | 'deleteManyRealms'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'


type MutationCreateGuildArgs =
  | 'data'
type MutationUpdateGuildArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildArgs =
  | 'where'
type MutationDeleteManyGuildsArgs =
  | 'where'
type MutationCreateGuildEventArgs =
  | 'data'
type MutationUpdateGuildEventArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildEventsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildEventArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildEventArgs =
  | 'where'
type MutationDeleteManyGuildEventsArgs =
  | 'where'
type MutationCreateGuildMemberArgs =
  | 'data'
type MutationUpdateGuildMemberArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildMembersArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildMemberArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildMemberArgs =
  | 'where'
type MutationDeleteManyGuildMembersArgs =
  | 'where'
type MutationCreateGuildPostArgs =
  | 'data'
type MutationUpdateGuildPostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildPostArgs =
  | 'where'
type MutationDeleteManyGuildPostsArgs =
  | 'where'
type MutationCreateGuildApplicationArgs =
  | 'data'
type MutationUpdateGuildApplicationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildApplicationsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildApplicationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildApplicationArgs =
  | 'where'
type MutationDeleteManyGuildApplicationsArgs =
  | 'where'
type MutationCreateGuildApplicationFormArgs =
  | 'data'
type MutationUpdateGuildApplicationFormArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildApplicationFormsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildApplicationFormArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildApplicationFormArgs =
  | 'where'
type MutationDeleteManyGuildApplicationFormsArgs =
  | 'where'
type MutationCreateGuildApplicationFormQuestionArgs =
  | 'data'
type MutationUpdateGuildApplicationFormQuestionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildApplicationFormQuestionsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildApplicationFormQuestionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildApplicationFormQuestionArgs =
  | 'where'
type MutationDeleteManyGuildApplicationFormQuestionsArgs =
  | 'where'
type MutationCreateGuildApplicationFormQuestionAnswerArgs =
  | 'data'
type MutationUpdateGuildApplicationFormQuestionAnswerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuildApplicationFormQuestionAnswersArgs =
  | 'data'
  | 'where'
type MutationUpsertGuildApplicationFormQuestionAnswerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuildApplicationFormQuestionAnswerArgs =
  | 'where'
type MutationDeleteManyGuildApplicationFormQuestionAnswersArgs =
  | 'where'
type MutationCreateInstanceArgs =
  | 'data'
type MutationUpdateInstanceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInstancesArgs =
  | 'data'
  | 'where'
type MutationUpsertInstanceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInstanceArgs =
  | 'where'
type MutationDeleteManyInstancesArgs =
  | 'where'
type MutationCreateCharacterArgs =
  | 'data'
type MutationUpdateCharacterArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCharactersArgs =
  | 'data'
  | 'where'
type MutationUpsertCharacterArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCharacterArgs =
  | 'where'
type MutationDeleteManyCharactersArgs =
  | 'where'
type MutationCreateRealmArgs =
  | 'data'
type MutationUpdateRealmArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRealmsArgs =
  | 'data'
  | 'where'
type MutationUpsertRealmArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRealmArgs =
  | 'where'
type MutationDeleteManyRealmsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createGuild: {
    type: 'Guild'
    args: Record<MutationCreateGuildArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  updateGuild: {
    type: 'Guild'
    args: Record<MutationUpdateGuildArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildUpdateInput, where: GuildWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild | null> | prisma.Guild | null
  }
  updateManyGuilds: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildUpdateManyMutationInput, where?: GuildWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuild: {
    type: 'Guild'
    args: Record<MutationUpsertGuildArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildWhereUniqueInput, create: GuildCreateInput, update: GuildUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild> | prisma.Guild
  }
  deleteGuild: {
    type: 'Guild'
    args: Record<MutationDeleteGuildArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild | null> | prisma.Guild | null
  }
  deleteManyGuilds: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildEvent: {
    type: 'GuildEvent'
    args: Record<MutationCreateGuildEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildEventCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent> | prisma.GuildEvent
  }
  updateGuildEvent: {
    type: 'GuildEvent'
    args: Record<MutationUpdateGuildEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildEventUpdateInput, where: GuildEventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent | null> | prisma.GuildEvent | null
  }
  updateManyGuildEvents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildEventsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildEventUpdateManyMutationInput, where?: GuildEventWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildEvent: {
    type: 'GuildEvent'
    args: Record<MutationUpsertGuildEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildEventWhereUniqueInput, create: GuildEventCreateInput, update: GuildEventUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent> | prisma.GuildEvent
  }
  deleteGuildEvent: {
    type: 'GuildEvent'
    args: Record<MutationDeleteGuildEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildEventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent | null> | prisma.GuildEvent | null
  }
  deleteManyGuildEvents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildEventsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildEventWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildMember: {
    type: 'GuildMember'
    args: Record<MutationCreateGuildMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildMemberCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember> | prisma.GuildMember
  }
  updateGuildMember: {
    type: 'GuildMember'
    args: Record<MutationUpdateGuildMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildMemberUpdateInput, where: GuildMemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember | null> | prisma.GuildMember | null
  }
  updateManyGuildMembers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildMemberUpdateManyMutationInput, where?: GuildMemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildMember: {
    type: 'GuildMember'
    args: Record<MutationUpsertGuildMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildMemberWhereUniqueInput, create: GuildMemberCreateInput, update: GuildMemberUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember> | prisma.GuildMember
  }
  deleteGuildMember: {
    type: 'GuildMember'
    args: Record<MutationDeleteGuildMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildMemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember | null> | prisma.GuildMember | null
  }
  deleteManyGuildMembers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildMemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildPost: {
    type: 'GuildPost'
    args: Record<MutationCreateGuildPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildPostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost> | prisma.GuildPost
  }
  updateGuildPost: {
    type: 'GuildPost'
    args: Record<MutationUpdateGuildPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildPostUpdateInput, where: GuildPostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost | null> | prisma.GuildPost | null
  }
  updateManyGuildPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildPostUpdateManyMutationInput, where?: GuildPostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildPost: {
    type: 'GuildPost'
    args: Record<MutationUpsertGuildPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildPostWhereUniqueInput, create: GuildPostCreateInput, update: GuildPostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost> | prisma.GuildPost
  }
  deleteGuildPost: {
    type: 'GuildPost'
    args: Record<MutationDeleteGuildPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildPostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost | null> | prisma.GuildPost | null
  }
  deleteManyGuildPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildPostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildApplication: {
    type: 'GuildApplication'
    args: Record<MutationCreateGuildApplicationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication> | prisma.GuildApplication
  }
  updateGuildApplication: {
    type: 'GuildApplication'
    args: Record<MutationUpdateGuildApplicationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationUpdateInput, where: GuildApplicationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication | null> | prisma.GuildApplication | null
  }
  updateManyGuildApplications: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildApplicationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationUpdateManyMutationInput, where?: GuildApplicationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildApplication: {
    type: 'GuildApplication'
    args: Record<MutationUpsertGuildApplicationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationWhereUniqueInput, create: GuildApplicationCreateInput, update: GuildApplicationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication> | prisma.GuildApplication
  }
  deleteGuildApplication: {
    type: 'GuildApplication'
    args: Record<MutationDeleteGuildApplicationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication | null> | prisma.GuildApplication | null
  }
  deleteManyGuildApplications: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildApplicationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildApplicationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildApplicationForm: {
    type: 'GuildApplicationForm'
    args: Record<MutationCreateGuildApplicationFormArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm> | prisma.GuildApplicationForm
  }
  updateGuildApplicationForm: {
    type: 'GuildApplicationForm'
    args: Record<MutationUpdateGuildApplicationFormArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormUpdateInput, where: GuildApplicationFormWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm | null> | prisma.GuildApplicationForm | null
  }
  updateManyGuildApplicationForms: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildApplicationFormsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormUpdateManyMutationInput, where?: GuildApplicationFormWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildApplicationForm: {
    type: 'GuildApplicationForm'
    args: Record<MutationUpsertGuildApplicationFormArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationFormWhereUniqueInput, create: GuildApplicationFormCreateInput, update: GuildApplicationFormUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm> | prisma.GuildApplicationForm
  }
  deleteGuildApplicationForm: {
    type: 'GuildApplicationForm'
    args: Record<MutationDeleteGuildApplicationFormArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationFormWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm | null> | prisma.GuildApplicationForm | null
  }
  deleteManyGuildApplicationForms: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildApplicationFormsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildApplicationFormWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildApplicationFormQuestion: {
    type: 'GuildApplicationFormQuestion'
    args: Record<MutationCreateGuildApplicationFormQuestionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormQuestionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion> | prisma.GuildApplicationFormQuestion
  }
  updateGuildApplicationFormQuestion: {
    type: 'GuildApplicationFormQuestion'
    args: Record<MutationUpdateGuildApplicationFormQuestionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormQuestionUpdateInput, where: GuildApplicationFormQuestionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion | null> | prisma.GuildApplicationFormQuestion | null
  }
  updateManyGuildApplicationFormQuestions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildApplicationFormQuestionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormQuestionUpdateManyMutationInput, where?: GuildApplicationFormQuestionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildApplicationFormQuestion: {
    type: 'GuildApplicationFormQuestion'
    args: Record<MutationUpsertGuildApplicationFormQuestionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationFormQuestionWhereUniqueInput, create: GuildApplicationFormQuestionCreateInput, update: GuildApplicationFormQuestionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion> | prisma.GuildApplicationFormQuestion
  }
  deleteGuildApplicationFormQuestion: {
    type: 'GuildApplicationFormQuestion'
    args: Record<MutationDeleteGuildApplicationFormQuestionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationFormQuestionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion | null> | prisma.GuildApplicationFormQuestion | null
  }
  deleteManyGuildApplicationFormQuestions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildApplicationFormQuestionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildApplicationFormQuestionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuildApplicationFormQuestionAnswer: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<MutationCreateGuildApplicationFormQuestionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormQuestionAnswerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer> | prisma.GuildApplicationFormQuestionAnswer
  }
  updateGuildApplicationFormQuestionAnswer: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<MutationUpdateGuildApplicationFormQuestionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormQuestionAnswerUpdateInput, where: GuildApplicationFormQuestionAnswerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer | null> | prisma.GuildApplicationFormQuestionAnswer | null
  }
  updateManyGuildApplicationFormQuestionAnswers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuildApplicationFormQuestionAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuildApplicationFormQuestionAnswerUpdateManyMutationInput, where?: GuildApplicationFormQuestionAnswerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuildApplicationFormQuestionAnswer: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<MutationUpsertGuildApplicationFormQuestionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationFormQuestionAnswerWhereUniqueInput, create: GuildApplicationFormQuestionAnswerCreateInput, update: GuildApplicationFormQuestionAnswerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer> | prisma.GuildApplicationFormQuestionAnswer
  }
  deleteGuildApplicationFormQuestionAnswer: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: Record<MutationDeleteGuildApplicationFormQuestionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuildApplicationFormQuestionAnswerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer | null> | prisma.GuildApplicationFormQuestionAnswer | null
  }
  deleteManyGuildApplicationFormQuestionAnswers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuildApplicationFormQuestionAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuildApplicationFormQuestionAnswerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInstance: {
    type: 'Instance'
    args: Record<MutationCreateInstanceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InstanceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance> | prisma.Instance
  }
  updateInstance: {
    type: 'Instance'
    args: Record<MutationUpdateInstanceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InstanceUpdateInput, where: InstanceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance | null> | prisma.Instance | null
  }
  updateManyInstances: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInstancesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InstanceUpdateManyMutationInput, where?: InstanceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInstance: {
    type: 'Instance'
    args: Record<MutationUpsertInstanceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InstanceWhereUniqueInput, create: InstanceCreateInput, update: InstanceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance> | prisma.Instance
  }
  deleteInstance: {
    type: 'Instance'
    args: Record<MutationDeleteInstanceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InstanceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance | null> | prisma.Instance | null
  }
  deleteManyInstances: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInstancesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InstanceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCharacter: {
    type: 'Character'
    args: Record<MutationCreateCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  updateCharacter: {
    type: 'Character'
    args: Record<MutationUpdateCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterUpdateInput, where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  updateManyCharacters: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterUpdateManyMutationInput, where?: CharacterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCharacter: {
    type: 'Character'
    args: Record<MutationUpsertCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CharacterWhereUniqueInput, create: CharacterCreateInput, update: CharacterUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  deleteCharacter: {
    type: 'Character'
    args: Record<MutationDeleteCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  deleteManyCharacters: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CharacterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRealm: {
    type: 'Realm'
    args: Record<MutationCreateRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RealmCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  updateRealm: {
    type: 'Realm'
    args: Record<MutationUpdateRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RealmUpdateInput, where: RealmWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  updateManyRealms: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRealmsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RealmUpdateManyMutationInput, where?: RealmWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRealm: {
    type: 'Realm'
    args: Record<MutationUpsertRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RealmWhereUniqueInput, create: RealmCreateInput, update: RealmUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  deleteRealm: {
    type: 'Realm'
    args: Record<MutationDeleteRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RealmWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  deleteManyRealms: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRealmsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RealmWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'guild', args?: SubscriptionGuildArgs[] | false, alias?: string  } 
  | { name: 'guildEvent', args?: SubscriptionGuildEventArgs[] | false, alias?: string  } 
  | { name: 'guildMember', args?: SubscriptionGuildMemberArgs[] | false, alias?: string  } 
  | { name: 'guildPost', args?: SubscriptionGuildPostArgs[] | false, alias?: string  } 
  | { name: 'guildApplication', args?: SubscriptionGuildApplicationArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationForm', args?: SubscriptionGuildApplicationFormArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestion', args?: SubscriptionGuildApplicationFormQuestionArgs[] | false, alias?: string  } 
  | { name: 'guildApplicationFormQuestionAnswer', args?: SubscriptionGuildApplicationFormQuestionAnswerArgs[] | false, alias?: string  } 
  | { name: 'instance', args?: SubscriptionInstanceArgs[] | false, alias?: string  } 
  | { name: 'character', args?: SubscriptionCharacterArgs[] | false, alias?: string  } 
  | { name: 'realm', args?: SubscriptionRealmArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'guild'
  | 'guildEvent'
  | 'guildMember'
  | 'guildPost'
  | 'guildApplication'
  | 'guildApplicationForm'
  | 'guildApplicationFormQuestion'
  | 'guildApplicationFormQuestionAnswer'
  | 'instance'
  | 'character'
  | 'realm'
  | 'user'


type SubscriptionGuildArgs =
  | 'where'
type SubscriptionGuildEventArgs =
  | 'where'
type SubscriptionGuildMemberArgs =
  | 'where'
type SubscriptionGuildPostArgs =
  | 'where'
type SubscriptionGuildApplicationArgs =
  | 'where'
type SubscriptionGuildApplicationFormArgs =
  | 'where'
type SubscriptionGuildApplicationFormQuestionArgs =
  | 'where'
type SubscriptionGuildApplicationFormQuestionAnswerArgs =
  | 'where'
type SubscriptionInstanceArgs =
  | 'where'
type SubscriptionCharacterArgs =
  | 'where'
type SubscriptionRealmArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  guild: {
    type: 'GuildSubscriptionPayload'
    args: Record<SubscriptionGuildArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildSubscriptionPayload | null> | prisma.GuildSubscriptionPayload | null
  }
  guildEvent: {
    type: 'GuildEventSubscriptionPayload'
    args: Record<SubscriptionGuildEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildEventSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEventSubscriptionPayload | null> | prisma.GuildEventSubscriptionPayload | null
  }
  guildMember: {
    type: 'GuildMemberSubscriptionPayload'
    args: Record<SubscriptionGuildMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildMemberSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMemberSubscriptionPayload | null> | prisma.GuildMemberSubscriptionPayload | null
  }
  guildPost: {
    type: 'GuildPostSubscriptionPayload'
    args: Record<SubscriptionGuildPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildPostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPostSubscriptionPayload | null> | prisma.GuildPostSubscriptionPayload | null
  }
  guildApplication: {
    type: 'GuildApplicationSubscriptionPayload'
    args: Record<SubscriptionGuildApplicationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildApplicationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationSubscriptionPayload | null> | prisma.GuildApplicationSubscriptionPayload | null
  }
  guildApplicationForm: {
    type: 'GuildApplicationFormSubscriptionPayload'
    args: Record<SubscriptionGuildApplicationFormArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildApplicationFormSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormSubscriptionPayload | null> | prisma.GuildApplicationFormSubscriptionPayload | null
  }
  guildApplicationFormQuestion: {
    type: 'GuildApplicationFormQuestionSubscriptionPayload'
    args: Record<SubscriptionGuildApplicationFormQuestionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildApplicationFormQuestionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionSubscriptionPayload | null> | prisma.GuildApplicationFormQuestionSubscriptionPayload | null
  }
  guildApplicationFormQuestionAnswer: {
    type: 'GuildApplicationFormQuestionAnswerSubscriptionPayload'
    args: Record<SubscriptionGuildApplicationFormQuestionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuildApplicationFormQuestionAnswerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswerSubscriptionPayload | null> | prisma.GuildApplicationFormQuestionAnswerSubscriptionPayload | null
  }
  instance: {
    type: 'InstanceSubscriptionPayload'
    args: Record<SubscriptionInstanceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InstanceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstanceSubscriptionPayload | null> | prisma.InstanceSubscriptionPayload | null
  }
  character: {
    type: 'CharacterSubscriptionPayload'
    args: Record<SubscriptionCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CharacterSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterSubscriptionPayload | null> | prisma.CharacterSubscriptionPayload | null
  }
  realm: {
    type: 'RealmSubscriptionPayload'
    args: Record<SubscriptionRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RealmSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmSubscriptionPayload | null> | prisma.RealmSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
}
  

// Types for GuildSubscriptionPayload

type GuildSubscriptionPayloadObject =
  | GuildSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Guild'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guild | null> | prisma.Guild | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPreviousValues | null> | prisma.GuildPreviousValues | null
  }
}
  

// Types for GuildPreviousValues

type GuildPreviousValuesObject =
  | GuildPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'lootingSystem', args?: [] | false, alias?: string  } 

type GuildPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'name'
  | 'avatar'
  | 'lootingSystem'



  

export interface GuildPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lootingSystem: {
    type: 'GuildLootingSystem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildLootingSystem> | prisma.GuildLootingSystem
  }
}
  

// Types for GuildEventSubscriptionPayload

type GuildEventSubscriptionPayloadObject =
  | GuildEventSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildEventSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildEventSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildEventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildEvent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildEventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEvent | null> | prisma.GuildEvent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildEventPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildEventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildEventPreviousValues | null> | prisma.GuildEventPreviousValues | null
  }
}
  

// Types for GuildEventPreviousValues

type GuildEventPreviousValuesObject =
  | GuildEventPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'startingAt', args?: [] | false, alias?: string  } 

type GuildEventPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'title'
  | 'startingAt'



  

export interface GuildEventPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startingAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildMemberSubscriptionPayload

type GuildMemberSubscriptionPayloadObject =
  | GuildMemberSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildMemberSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildMemberSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildMember'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildMemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMember | null> | prisma.GuildMember | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildMemberPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildMemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildMemberPreviousValues | null> | prisma.GuildMemberPreviousValues | null
  }
}
  

// Types for GuildMemberPreviousValues

type GuildMemberPreviousValuesObject =
  | GuildMemberPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'guildRole', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'dkp', args?: [] | false, alias?: string  } 

type GuildMemberPreviousValuesFields =
  | 'id'
  | 'guildRole'
  | 'role'
  | 'dkp'



  

export interface GuildMemberPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guildRole: {
    type: 'GuildRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildRole> | prisma.GuildRole
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildMemberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  dkp: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildPostSubscriptionPayload

type GuildPostSubscriptionPayloadObject =
  | GuildPostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildPostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildPostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildPostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildPost'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildPostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPost | null> | prisma.GuildPost | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildPostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildPostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildPostPreviousValues | null> | prisma.GuildPostPreviousValues | null
  }
}
  

// Types for GuildPostPreviousValues

type GuildPostPreviousValuesObject =
  | GuildPostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 

type GuildPostPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'title'
  | 'body'



  

export interface GuildPostPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  body: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationSubscriptionPayload

type GuildApplicationSubscriptionPayloadObject =
  | GuildApplicationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildApplicationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildApplicationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildApplication'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplication | null> | prisma.GuildApplication | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildApplicationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationPreviousValues | null> | prisma.GuildApplicationPreviousValues | null
  }
}
  

// Types for GuildApplicationPreviousValues

type GuildApplicationPreviousValuesObject =
  | GuildApplicationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type GuildApplicationPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'status'
  | 'comment'



  

export interface GuildApplicationPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'GuildApplicationStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationStatus> | prisma.GuildApplicationStatus
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormSubscriptionPayload

type GuildApplicationFormSubscriptionPayloadObject =
  | GuildApplicationFormSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildApplicationFormSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildApplicationFormSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildApplicationForm'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationFormSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationForm | null> | prisma.GuildApplicationForm | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildApplicationFormPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationFormSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormPreviousValues | null> | prisma.GuildApplicationFormPreviousValues | null
  }
}
  

// Types for GuildApplicationFormPreviousValues

type GuildApplicationFormPreviousValuesObject =
  | GuildApplicationFormPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lastUpdatedAt', args?: [] | false, alias?: string  } 

type GuildApplicationFormPreviousValuesFields =
  | 'id'
  | 'lastUpdatedAt'



  

export interface GuildApplicationFormPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastUpdatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormQuestionSubscriptionPayload

type GuildApplicationFormQuestionSubscriptionPayloadObject =
  | GuildApplicationFormQuestionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildApplicationFormQuestionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildApplicationFormQuestion'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestion | null> | prisma.GuildApplicationFormQuestion | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildApplicationFormQuestionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionPreviousValues | null> | prisma.GuildApplicationFormQuestionPreviousValues | null
  }
}
  

// Types for GuildApplicationFormQuestionPreviousValues

type GuildApplicationFormQuestionPreviousValuesObject =
  | GuildApplicationFormQuestionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'question', args?: [] | false, alias?: string  } 
  | { name: 'sequence', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionPreviousValuesFields =
  | 'id'
  | 'question'
  | 'sequence'



  

export interface GuildApplicationFormQuestionPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  question: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sequence: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GuildApplicationFormQuestionAnswerSubscriptionPayload

type GuildApplicationFormQuestionAnswerSubscriptionPayloadObject =
  | GuildApplicationFormQuestionAnswerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionAnswerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuildApplicationFormQuestionAnswerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'GuildApplicationFormQuestionAnswer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswer | null> | prisma.GuildApplicationFormQuestionAnswer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuildApplicationFormQuestionAnswerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuildApplicationFormQuestionAnswerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuildApplicationFormQuestionAnswerPreviousValues | null> | prisma.GuildApplicationFormQuestionAnswerPreviousValues | null
  }
}
  

// Types for GuildApplicationFormQuestionAnswerPreviousValues

type GuildApplicationFormQuestionAnswerPreviousValuesObject =
  | GuildApplicationFormQuestionAnswerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'answer', args?: [] | false, alias?: string  } 

type GuildApplicationFormQuestionAnswerPreviousValuesFields =
  | 'id'
  | 'answer'



  

export interface GuildApplicationFormQuestionAnswerPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  answer: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InstanceSubscriptionPayload

type InstanceSubscriptionPayloadObject =
  | InstanceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InstanceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InstanceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstanceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Instance'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InstanceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instance | null> | prisma.Instance | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InstancePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InstanceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstancePreviousValues | null> | prisma.InstancePreviousValues | null
  }
}
  

// Types for InstancePreviousValues

type InstancePreviousValuesObject =
  | InstancePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'Abbreviation', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'wiki', args?: [] | false, alias?: string  } 
  | { name: 'suggestedLevel', args?: [] | false, alias?: string  } 
  | { name: 'playersCap', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 

type InstancePreviousValuesFields =
  | 'id'
  | 'name'
  | 'Abbreviation'
  | 'image'
  | 'wiki'
  | 'suggestedLevel'
  | 'playersCap'
  | 'location'



  

export interface InstancePreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  Abbreviation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  wiki: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  suggestedLevel: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  playersCap: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CharacterSubscriptionPayload

type CharacterSubscriptionPayloadObject =
  | CharacterSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CharacterSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CharacterSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CharacterPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterPreviousValues | null> | prisma.CharacterPreviousValues | null
  }
}
  

// Types for CharacterPreviousValues

type CharacterPreviousValuesObject =
  | CharacterPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'class', args?: [] | false, alias?: string  } 

type CharacterPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'name'
  | 'class'



  

export interface CharacterPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  class: {
    type: 'CharacterClassEnum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterClassEnum> | prisma.CharacterClassEnum
  }
}
  

// Types for RealmSubscriptionPayload

type RealmSubscriptionPayloadObject =
  | RealmSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RealmSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RealmSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RealmSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RealmPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RealmSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmPreviousValues | null> | prisma.RealmPreviousValues | null
  }
}
  

// Types for RealmPreviousValues

type RealmPreviousValuesObject =
  | RealmPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'population', args?: [] | false, alias?: string  } 

type RealmPreviousValuesFields =
  | 'id'
  | 'name'
  | 'type'
  | 'population'



  

export interface RealmPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'RealmType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmType> | prisma.RealmType
  }
  population: {
    type: 'RealmPopulation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmPopulation> | prisma.RealmPopulation
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'displayName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'confirmed', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'displayName'
  | 'email'
  | 'password'
  | 'confirmed'
  | 'avatar'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  displayName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  confirmed: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface GuildWhereUniqueInput {
  id?: undefined | null
}
export type GuildWhereUniqueInputInputObject =
  | Extract<keyof GuildWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CharacterWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  user?: UserWhereInput | null
  realm?: RealmWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  class?: prisma.CharacterClassEnum | null
  class_not?: prisma.CharacterClassEnum | null
  class_in?: prisma.CharacterClassEnum[]
  class_not_in?: prisma.CharacterClassEnum[]
  guild?: GuildMemberWhereInput | null
  applications_every?: GuildApplicationWhereInput | null
  applications_some?: GuildApplicationWhereInput | null
  applications_none?: GuildApplicationWhereInput | null
  AND?: CharacterWhereInput[]
  OR?: CharacterWhereInput[]
  NOT?: CharacterWhereInput[]
}
export type CharacterWhereInputInputObject =
  | Extract<keyof CharacterWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'class_not', alias?: string  } 
  | { name: 'class_in', alias?: string  } 
  | { name: 'class_not_in', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications_every', alias?: string  } 
  | { name: 'applications_some', alias?: string  } 
  | { name: 'applications_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  displayName?: string | null
  displayName_not?: string | null
  displayName_in?: string[]
  displayName_not_in?: string[]
  displayName_lt?: string | null
  displayName_lte?: string | null
  displayName_gt?: string | null
  displayName_gte?: string | null
  displayName_contains?: string | null
  displayName_not_contains?: string | null
  displayName_starts_with?: string | null
  displayName_not_starts_with?: string | null
  displayName_ends_with?: string | null
  displayName_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  confirmed?: boolean | null
  confirmed_not?: boolean | null
  avatar?: string | null
  avatar_not?: string | null
  avatar_in?: string[]
  avatar_not_in?: string[]
  avatar_lt?: string | null
  avatar_lte?: string | null
  avatar_gt?: string | null
  avatar_gte?: string | null
  avatar_contains?: string | null
  avatar_not_contains?: string | null
  avatar_starts_with?: string | null
  avatar_not_starts_with?: string | null
  avatar_ends_with?: string | null
  avatar_not_ends_with?: string | null
  characters_every?: CharacterWhereInput | null
  characters_some?: CharacterWhereInput | null
  characters_none?: CharacterWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'displayName', alias?: string  } 
  | { name: 'displayName_not', alias?: string  } 
  | { name: 'displayName_in', alias?: string  } 
  | { name: 'displayName_not_in', alias?: string  } 
  | { name: 'displayName_lt', alias?: string  } 
  | { name: 'displayName_lte', alias?: string  } 
  | { name: 'displayName_gt', alias?: string  } 
  | { name: 'displayName_gte', alias?: string  } 
  | { name: 'displayName_contains', alias?: string  } 
  | { name: 'displayName_not_contains', alias?: string  } 
  | { name: 'displayName_starts_with', alias?: string  } 
  | { name: 'displayName_not_starts_with', alias?: string  } 
  | { name: 'displayName_ends_with', alias?: string  } 
  | { name: 'displayName_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'confirmed', alias?: string  } 
  | { name: 'confirmed_not', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'avatar_not', alias?: string  } 
  | { name: 'avatar_in', alias?: string  } 
  | { name: 'avatar_not_in', alias?: string  } 
  | { name: 'avatar_lt', alias?: string  } 
  | { name: 'avatar_lte', alias?: string  } 
  | { name: 'avatar_gt', alias?: string  } 
  | { name: 'avatar_gte', alias?: string  } 
  | { name: 'avatar_contains', alias?: string  } 
  | { name: 'avatar_not_contains', alias?: string  } 
  | { name: 'avatar_starts_with', alias?: string  } 
  | { name: 'avatar_not_starts_with', alias?: string  } 
  | { name: 'avatar_ends_with', alias?: string  } 
  | { name: 'avatar_not_ends_with', alias?: string  } 
  | { name: 'characters_every', alias?: string  } 
  | { name: 'characters_some', alias?: string  } 
  | { name: 'characters_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RealmWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  type?: prisma.RealmType | null
  type_not?: prisma.RealmType | null
  type_in?: prisma.RealmType[]
  type_not_in?: prisma.RealmType[]
  population?: prisma.RealmPopulation | null
  population_not?: prisma.RealmPopulation | null
  population_in?: prisma.RealmPopulation[]
  population_not_in?: prisma.RealmPopulation[]
  characters_every?: CharacterWhereInput | null
  characters_some?: CharacterWhereInput | null
  characters_none?: CharacterWhereInput | null
  guilds_every?: GuildWhereInput | null
  guilds_some?: GuildWhereInput | null
  guilds_none?: GuildWhereInput | null
  AND?: RealmWhereInput[]
  OR?: RealmWhereInput[]
  NOT?: RealmWhereInput[]
}
export type RealmWhereInputInputObject =
  | Extract<keyof RealmWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'population_not', alias?: string  } 
  | { name: 'population_in', alias?: string  } 
  | { name: 'population_not_in', alias?: string  } 
  | { name: 'characters_every', alias?: string  } 
  | { name: 'characters_some', alias?: string  } 
  | { name: 'characters_none', alias?: string  } 
  | { name: 'guilds_every', alias?: string  } 
  | { name: 'guilds_some', alias?: string  } 
  | { name: 'guilds_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  avatar?: string | null
  avatar_not?: string | null
  avatar_in?: string[]
  avatar_not_in?: string[]
  avatar_lt?: string | null
  avatar_lte?: string | null
  avatar_gt?: string | null
  avatar_gte?: string | null
  avatar_contains?: string | null
  avatar_not_contains?: string | null
  avatar_starts_with?: string | null
  avatar_not_starts_with?: string | null
  avatar_ends_with?: string | null
  avatar_not_ends_with?: string | null
  realm?: RealmWhereInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  lootingSystem_not?: prisma.GuildLootingSystem | null
  lootingSystem_in?: prisma.GuildLootingSystem[]
  lootingSystem_not_in?: prisma.GuildLootingSystem[]
  roster_every?: GuildMemberWhereInput | null
  roster_some?: GuildMemberWhereInput | null
  roster_none?: GuildMemberWhereInput | null
  posts_every?: GuildPostWhereInput | null
  posts_some?: GuildPostWhereInput | null
  posts_none?: GuildPostWhereInput | null
  events_every?: GuildEventWhereInput | null
  events_some?: GuildEventWhereInput | null
  events_none?: GuildEventWhereInput | null
  applications_every?: GuildApplicationWhereInput | null
  applications_some?: GuildApplicationWhereInput | null
  applications_none?: GuildApplicationWhereInput | null
  applicationForm?: GuildApplicationFormWhereInput | null
  AND?: GuildWhereInput[]
  OR?: GuildWhereInput[]
  NOT?: GuildWhereInput[]
}
export type GuildWhereInputInputObject =
  | Extract<keyof GuildWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'avatar_not', alias?: string  } 
  | { name: 'avatar_in', alias?: string  } 
  | { name: 'avatar_not_in', alias?: string  } 
  | { name: 'avatar_lt', alias?: string  } 
  | { name: 'avatar_lte', alias?: string  } 
  | { name: 'avatar_gt', alias?: string  } 
  | { name: 'avatar_gte', alias?: string  } 
  | { name: 'avatar_contains', alias?: string  } 
  | { name: 'avatar_not_contains', alias?: string  } 
  | { name: 'avatar_starts_with', alias?: string  } 
  | { name: 'avatar_not_starts_with', alias?: string  } 
  | { name: 'avatar_ends_with', alias?: string  } 
  | { name: 'avatar_not_ends_with', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'lootingSystem_not', alias?: string  } 
  | { name: 'lootingSystem_in', alias?: string  } 
  | { name: 'lootingSystem_not_in', alias?: string  } 
  | { name: 'roster_every', alias?: string  } 
  | { name: 'roster_some', alias?: string  } 
  | { name: 'roster_none', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'events_every', alias?: string  } 
  | { name: 'events_some', alias?: string  } 
  | { name: 'events_none', alias?: string  } 
  | { name: 'applications_every', alias?: string  } 
  | { name: 'applications_some', alias?: string  } 
  | { name: 'applications_none', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildMemberWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  character?: CharacterWhereInput | null
  guild?: GuildWhereInput | null
  guildRole?: prisma.GuildRole | null
  guildRole_not?: prisma.GuildRole | null
  guildRole_in?: prisma.GuildRole[]
  guildRole_not_in?: prisma.GuildRole[]
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  dkp?: number | null
  dkp_not?: number | null
  dkp_in?: number[]
  dkp_not_in?: number[]
  dkp_lt?: number | null
  dkp_lte?: number | null
  dkp_gt?: number | null
  dkp_gte?: number | null
  events_every?: GuildEventWhereInput | null
  events_some?: GuildEventWhereInput | null
  events_none?: GuildEventWhereInput | null
  AND?: GuildMemberWhereInput[]
  OR?: GuildMemberWhereInput[]
  NOT?: GuildMemberWhereInput[]
}
export type GuildMemberWhereInputInputObject =
  | Extract<keyof GuildMemberWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'character', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'guildRole_not', alias?: string  } 
  | { name: 'guildRole_in', alias?: string  } 
  | { name: 'guildRole_not_in', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'dkp_not', alias?: string  } 
  | { name: 'dkp_in', alias?: string  } 
  | { name: 'dkp_not_in', alias?: string  } 
  | { name: 'dkp_lt', alias?: string  } 
  | { name: 'dkp_lte', alias?: string  } 
  | { name: 'dkp_gt', alias?: string  } 
  | { name: 'dkp_gte', alias?: string  } 
  | { name: 'events_every', alias?: string  } 
  | { name: 'events_some', alias?: string  } 
  | { name: 'events_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildEventWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  startingAt?: string | null
  startingAt_not?: string | null
  startingAt_in?: string[]
  startingAt_not_in?: string[]
  startingAt_lt?: string | null
  startingAt_lte?: string | null
  startingAt_gt?: string | null
  startingAt_gte?: string | null
  instance?: InstanceWhereInput | null
  guild?: GuildWhereInput | null
  roster_every?: GuildMemberWhereInput | null
  roster_some?: GuildMemberWhereInput | null
  roster_none?: GuildMemberWhereInput | null
  AND?: GuildEventWhereInput[]
  OR?: GuildEventWhereInput[]
  NOT?: GuildEventWhereInput[]
}
export type GuildEventWhereInputInputObject =
  | Extract<keyof GuildEventWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'startingAt_not', alias?: string  } 
  | { name: 'startingAt_in', alias?: string  } 
  | { name: 'startingAt_not_in', alias?: string  } 
  | { name: 'startingAt_lt', alias?: string  } 
  | { name: 'startingAt_lte', alias?: string  } 
  | { name: 'startingAt_gt', alias?: string  } 
  | { name: 'startingAt_gte', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'roster_every', alias?: string  } 
  | { name: 'roster_some', alias?: string  } 
  | { name: 'roster_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InstanceWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  Abbreviation?: string | null
  Abbreviation_not?: string | null
  Abbreviation_in?: string[]
  Abbreviation_not_in?: string[]
  Abbreviation_lt?: string | null
  Abbreviation_lte?: string | null
  Abbreviation_gt?: string | null
  Abbreviation_gte?: string | null
  Abbreviation_contains?: string | null
  Abbreviation_not_contains?: string | null
  Abbreviation_starts_with?: string | null
  Abbreviation_not_starts_with?: string | null
  Abbreviation_ends_with?: string | null
  Abbreviation_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  wiki?: string | null
  wiki_not?: string | null
  wiki_in?: string[]
  wiki_not_in?: string[]
  wiki_lt?: string | null
  wiki_lte?: string | null
  wiki_gt?: string | null
  wiki_gte?: string | null
  wiki_contains?: string | null
  wiki_not_contains?: string | null
  wiki_starts_with?: string | null
  wiki_not_starts_with?: string | null
  wiki_ends_with?: string | null
  wiki_not_ends_with?: string | null
  suggestedLevel?: string | null
  suggestedLevel_not?: string | null
  suggestedLevel_in?: string[]
  suggestedLevel_not_in?: string[]
  suggestedLevel_lt?: string | null
  suggestedLevel_lte?: string | null
  suggestedLevel_gt?: string | null
  suggestedLevel_gte?: string | null
  suggestedLevel_contains?: string | null
  suggestedLevel_not_contains?: string | null
  suggestedLevel_starts_with?: string | null
  suggestedLevel_not_starts_with?: string | null
  suggestedLevel_ends_with?: string | null
  suggestedLevel_not_ends_with?: string | null
  playersCap?: number | null
  playersCap_not?: number | null
  playersCap_in?: number[]
  playersCap_not_in?: number[]
  playersCap_lt?: number | null
  playersCap_lte?: number | null
  playersCap_gt?: number | null
  playersCap_gte?: number | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  AND?: InstanceWhereInput[]
  OR?: InstanceWhereInput[]
  NOT?: InstanceWhereInput[]
}
export type InstanceWhereInputInputObject =
  | Extract<keyof InstanceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'Abbreviation', alias?: string  } 
  | { name: 'Abbreviation_not', alias?: string  } 
  | { name: 'Abbreviation_in', alias?: string  } 
  | { name: 'Abbreviation_not_in', alias?: string  } 
  | { name: 'Abbreviation_lt', alias?: string  } 
  | { name: 'Abbreviation_lte', alias?: string  } 
  | { name: 'Abbreviation_gt', alias?: string  } 
  | { name: 'Abbreviation_gte', alias?: string  } 
  | { name: 'Abbreviation_contains', alias?: string  } 
  | { name: 'Abbreviation_not_contains', alias?: string  } 
  | { name: 'Abbreviation_starts_with', alias?: string  } 
  | { name: 'Abbreviation_not_starts_with', alias?: string  } 
  | { name: 'Abbreviation_ends_with', alias?: string  } 
  | { name: 'Abbreviation_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'wiki', alias?: string  } 
  | { name: 'wiki_not', alias?: string  } 
  | { name: 'wiki_in', alias?: string  } 
  | { name: 'wiki_not_in', alias?: string  } 
  | { name: 'wiki_lt', alias?: string  } 
  | { name: 'wiki_lte', alias?: string  } 
  | { name: 'wiki_gt', alias?: string  } 
  | { name: 'wiki_gte', alias?: string  } 
  | { name: 'wiki_contains', alias?: string  } 
  | { name: 'wiki_not_contains', alias?: string  } 
  | { name: 'wiki_starts_with', alias?: string  } 
  | { name: 'wiki_not_starts_with', alias?: string  } 
  | { name: 'wiki_ends_with', alias?: string  } 
  | { name: 'wiki_not_ends_with', alias?: string  } 
  | { name: 'suggestedLevel', alias?: string  } 
  | { name: 'suggestedLevel_not', alias?: string  } 
  | { name: 'suggestedLevel_in', alias?: string  } 
  | { name: 'suggestedLevel_not_in', alias?: string  } 
  | { name: 'suggestedLevel_lt', alias?: string  } 
  | { name: 'suggestedLevel_lte', alias?: string  } 
  | { name: 'suggestedLevel_gt', alias?: string  } 
  | { name: 'suggestedLevel_gte', alias?: string  } 
  | { name: 'suggestedLevel_contains', alias?: string  } 
  | { name: 'suggestedLevel_not_contains', alias?: string  } 
  | { name: 'suggestedLevel_starts_with', alias?: string  } 
  | { name: 'suggestedLevel_not_starts_with', alias?: string  } 
  | { name: 'suggestedLevel_ends_with', alias?: string  } 
  | { name: 'suggestedLevel_not_ends_with', alias?: string  } 
  | { name: 'playersCap', alias?: string  } 
  | { name: 'playersCap_not', alias?: string  } 
  | { name: 'playersCap_in', alias?: string  } 
  | { name: 'playersCap_not_in', alias?: string  } 
  | { name: 'playersCap_lt', alias?: string  } 
  | { name: 'playersCap_lte', alias?: string  } 
  | { name: 'playersCap_gt', alias?: string  } 
  | { name: 'playersCap_gte', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildPostWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  guild?: GuildWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  body?: string | null
  body_not?: string | null
  body_in?: string[]
  body_not_in?: string[]
  body_lt?: string | null
  body_lte?: string | null
  body_gt?: string | null
  body_gte?: string | null
  body_contains?: string | null
  body_not_contains?: string | null
  body_starts_with?: string | null
  body_not_starts_with?: string | null
  body_ends_with?: string | null
  body_not_ends_with?: string | null
  AND?: GuildPostWhereInput[]
  OR?: GuildPostWhereInput[]
  NOT?: GuildPostWhereInput[]
}
export type GuildPostWhereInputInputObject =
  | Extract<keyof GuildPostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'body_not', alias?: string  } 
  | { name: 'body_in', alias?: string  } 
  | { name: 'body_not_in', alias?: string  } 
  | { name: 'body_lt', alias?: string  } 
  | { name: 'body_lte', alias?: string  } 
  | { name: 'body_gt', alias?: string  } 
  | { name: 'body_gte', alias?: string  } 
  | { name: 'body_contains', alias?: string  } 
  | { name: 'body_not_contains', alias?: string  } 
  | { name: 'body_starts_with', alias?: string  } 
  | { name: 'body_not_starts_with', alias?: string  } 
  | { name: 'body_ends_with', alias?: string  } 
  | { name: 'body_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  guild?: GuildWhereInput | null
  character?: CharacterWhereInput | null
  answers_every?: GuildApplicationFormQuestionAnswerWhereInput | null
  answers_some?: GuildApplicationFormQuestionAnswerWhereInput | null
  answers_none?: GuildApplicationFormQuestionAnswerWhereInput | null
  status?: prisma.GuildApplicationStatus | null
  status_not?: prisma.GuildApplicationStatus | null
  status_in?: prisma.GuildApplicationStatus[]
  status_not_in?: prisma.GuildApplicationStatus[]
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  AND?: GuildApplicationWhereInput[]
  OR?: GuildApplicationWhereInput[]
  NOT?: GuildApplicationWhereInput[]
}
export type GuildApplicationWhereInputInputObject =
  | Extract<keyof GuildApplicationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'character', alias?: string  } 
  | { name: 'answers_every', alias?: string  } 
  | { name: 'answers_some', alias?: string  } 
  | { name: 'answers_none', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  application?: GuildApplicationWhereInput | null
  question?: GuildApplicationFormQuestionWhereInput | null
  answer?: string | null
  answer_not?: string | null
  answer_in?: string[]
  answer_not_in?: string[]
  answer_lt?: string | null
  answer_lte?: string | null
  answer_gt?: string | null
  answer_gte?: string | null
  answer_contains?: string | null
  answer_not_contains?: string | null
  answer_starts_with?: string | null
  answer_not_starts_with?: string | null
  answer_ends_with?: string | null
  answer_not_ends_with?: string | null
  AND?: GuildApplicationFormQuestionAnswerWhereInput[]
  OR?: GuildApplicationFormQuestionAnswerWhereInput[]
  NOT?: GuildApplicationFormQuestionAnswerWhereInput[]
}
export type GuildApplicationFormQuestionAnswerWhereInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  | { name: 'answer_not', alias?: string  } 
  | { name: 'answer_in', alias?: string  } 
  | { name: 'answer_not_in', alias?: string  } 
  | { name: 'answer_lt', alias?: string  } 
  | { name: 'answer_lte', alias?: string  } 
  | { name: 'answer_gt', alias?: string  } 
  | { name: 'answer_gte', alias?: string  } 
  | { name: 'answer_contains', alias?: string  } 
  | { name: 'answer_not_contains', alias?: string  } 
  | { name: 'answer_starts_with', alias?: string  } 
  | { name: 'answer_not_starts_with', alias?: string  } 
  | { name: 'answer_ends_with', alias?: string  } 
  | { name: 'answer_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormQuestionWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  guildApplicationForm?: GuildApplicationFormWhereInput | null
  question?: string | null
  question_not?: string | null
  question_in?: string[]
  question_not_in?: string[]
  question_lt?: string | null
  question_lte?: string | null
  question_gt?: string | null
  question_gte?: string | null
  question_contains?: string | null
  question_not_contains?: string | null
  question_starts_with?: string | null
  question_not_starts_with?: string | null
  question_ends_with?: string | null
  question_not_ends_with?: string | null
  sequence?: number | null
  sequence_not?: number | null
  sequence_in?: number[]
  sequence_not_in?: number[]
  sequence_lt?: number | null
  sequence_lte?: number | null
  sequence_gt?: number | null
  sequence_gte?: number | null
  AND?: GuildApplicationFormQuestionWhereInput[]
  OR?: GuildApplicationFormQuestionWhereInput[]
  NOT?: GuildApplicationFormQuestionWhereInput[]
}
export type GuildApplicationFormQuestionWhereInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'guildApplicationForm', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'question_not', alias?: string  } 
  | { name: 'question_in', alias?: string  } 
  | { name: 'question_not_in', alias?: string  } 
  | { name: 'question_lt', alias?: string  } 
  | { name: 'question_lte', alias?: string  } 
  | { name: 'question_gt', alias?: string  } 
  | { name: 'question_gte', alias?: string  } 
  | { name: 'question_contains', alias?: string  } 
  | { name: 'question_not_contains', alias?: string  } 
  | { name: 'question_starts_with', alias?: string  } 
  | { name: 'question_not_starts_with', alias?: string  } 
  | { name: 'question_ends_with', alias?: string  } 
  | { name: 'question_not_ends_with', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  | { name: 'sequence_not', alias?: string  } 
  | { name: 'sequence_in', alias?: string  } 
  | { name: 'sequence_not_in', alias?: string  } 
  | { name: 'sequence_lt', alias?: string  } 
  | { name: 'sequence_lte', alias?: string  } 
  | { name: 'sequence_gt', alias?: string  } 
  | { name: 'sequence_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  lastUpdatedAt?: string | null
  lastUpdatedAt_not?: string | null
  lastUpdatedAt_in?: string[]
  lastUpdatedAt_not_in?: string[]
  lastUpdatedAt_lt?: string | null
  lastUpdatedAt_lte?: string | null
  lastUpdatedAt_gt?: string | null
  lastUpdatedAt_gte?: string | null
  guild?: GuildWhereInput | null
  questions_every?: GuildApplicationFormQuestionWhereInput | null
  questions_some?: GuildApplicationFormQuestionWhereInput | null
  questions_none?: GuildApplicationFormQuestionWhereInput | null
  AND?: GuildApplicationFormWhereInput[]
  OR?: GuildApplicationFormWhereInput[]
  NOT?: GuildApplicationFormWhereInput[]
}
export type GuildApplicationFormWhereInputInputObject =
  | Extract<keyof GuildApplicationFormWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'lastUpdatedAt_not', alias?: string  } 
  | { name: 'lastUpdatedAt_in', alias?: string  } 
  | { name: 'lastUpdatedAt_not_in', alias?: string  } 
  | { name: 'lastUpdatedAt_lt', alias?: string  } 
  | { name: 'lastUpdatedAt_lte', alias?: string  } 
  | { name: 'lastUpdatedAt_gt', alias?: string  } 
  | { name: 'lastUpdatedAt_gte', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'questions_every', alias?: string  } 
  | { name: 'questions_some', alias?: string  } 
  | { name: 'questions_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildEventWhereUniqueInput {
  id?: undefined | null
}
export type GuildEventWhereUniqueInputInputObject =
  | Extract<keyof GuildEventWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GuildMemberWhereUniqueInput {
  id?: undefined | null
}
export type GuildMemberWhereUniqueInputInputObject =
  | Extract<keyof GuildMemberWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GuildPostWhereUniqueInput {
  id?: undefined | null
}
export type GuildPostWhereUniqueInputInputObject =
  | Extract<keyof GuildPostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GuildApplicationWhereUniqueInput {
  id?: undefined | null
}
export type GuildApplicationWhereUniqueInputInputObject =
  | Extract<keyof GuildApplicationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GuildApplicationFormWhereUniqueInput {
  id?: undefined | null
}
export type GuildApplicationFormWhereUniqueInputInputObject =
  | Extract<keyof GuildApplicationFormWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GuildApplicationFormQuestionWhereUniqueInput {
  id?: undefined | null
}
export type GuildApplicationFormQuestionWhereUniqueInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerWhereUniqueInput {
  id?: undefined | null
}
export type GuildApplicationFormQuestionAnswerWhereUniqueInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InstanceWhereUniqueInput {
  id?: undefined | null
  name?: string | null
}
export type InstanceWhereUniqueInputInputObject =
  | Extract<keyof InstanceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface CharacterWhereUniqueInput {
  id?: undefined | null
}
export type CharacterWhereUniqueInputInputObject =
  | Extract<keyof CharacterWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface RealmWhereUniqueInput {
  id?: undefined | null
  name?: string | null
}
export type RealmWhereUniqueInputInputObject =
  | Extract<keyof RealmWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: undefined | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface GuildCreateInput {
  name?: string
  avatar?: string | null
  realm?: RealmCreateOneWithoutGuildsInput
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberCreateManyWithoutGuildInput | null
  posts?: GuildPostCreateManyWithoutGuildInput | null
  events?: GuildEventCreateManyWithoutGuildInput | null
  applications?: GuildApplicationCreateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormCreateOneWithoutGuildInput | null
}
export type GuildCreateInputInputObject =
  | Extract<keyof GuildCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface RealmCreateOneWithoutGuildsInput {
  create?: RealmCreateWithoutGuildsInput | null
  connect?: RealmWhereUniqueInput | null
}
export type RealmCreateOneWithoutGuildsInputInputObject =
  | Extract<keyof RealmCreateOneWithoutGuildsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RealmCreateWithoutGuildsInput {
  name?: string
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
  characters?: CharacterCreateManyWithoutRealmInput | null
}
export type RealmCreateWithoutGuildsInputInputObject =
  | Extract<keyof RealmCreateWithoutGuildsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'characters', alias?: string  } 
  
export interface CharacterCreateManyWithoutRealmInput {
  create?: CharacterCreateWithoutRealmInput[]
  connect?: CharacterWhereUniqueInput[]
}
export type CharacterCreateManyWithoutRealmInputInputObject =
  | Extract<keyof CharacterCreateManyWithoutRealmInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CharacterCreateWithoutRealmInput {
  user?: UserCreateOneWithoutCharactersInput
  name?: string
  class?: prisma.CharacterClassEnum
  guild?: GuildMemberCreateOneWithoutCharacterInput | null
  applications?: GuildApplicationCreateManyWithoutCharacterInput | null
}
export type CharacterCreateWithoutRealmInputInputObject =
  | Extract<keyof CharacterCreateWithoutRealmInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface UserCreateOneWithoutCharactersInput {
  create?: UserCreateWithoutCharactersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCharactersInputInputObject =
  | Extract<keyof UserCreateOneWithoutCharactersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCharactersInput {
  displayName?: string
  email?: string
  password?: string
  confirmed?: boolean | null
  avatar?: string | null
}
export type UserCreateWithoutCharactersInputInputObject =
  | Extract<keyof UserCreateWithoutCharactersInput, string>
  | { name: 'displayName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'confirmed', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface GuildMemberCreateOneWithoutCharacterInput {
  create?: GuildMemberCreateWithoutCharacterInput | null
  connect?: GuildMemberWhereUniqueInput | null
}
export type GuildMemberCreateOneWithoutCharacterInputInputObject =
  | Extract<keyof GuildMemberCreateOneWithoutCharacterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildMemberCreateWithoutCharacterInput {
  guild?: GuildCreateOneWithoutRosterInput
  guildRole?: prisma.GuildRole
  role?: prisma.Role
  dkp?: number | null
  events?: GuildEventCreateManyWithoutRosterInput | null
}
export type GuildMemberCreateWithoutCharacterInputInputObject =
  | Extract<keyof GuildMemberCreateWithoutCharacterInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'events', alias?: string  } 
  
export interface GuildCreateOneWithoutRosterInput {
  create?: GuildCreateWithoutRosterInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildCreateOneWithoutRosterInputInputObject =
  | Extract<keyof GuildCreateOneWithoutRosterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildCreateWithoutRosterInput {
  name?: string
  avatar?: string | null
  realm?: RealmCreateOneWithoutGuildsInput
  lootingSystem?: prisma.GuildLootingSystem | null
  posts?: GuildPostCreateManyWithoutGuildInput | null
  events?: GuildEventCreateManyWithoutGuildInput | null
  applications?: GuildApplicationCreateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormCreateOneWithoutGuildInput | null
}
export type GuildCreateWithoutRosterInputInputObject =
  | Extract<keyof GuildCreateWithoutRosterInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildPostCreateManyWithoutGuildInput {
  create?: GuildPostCreateWithoutGuildInput[]
  connect?: GuildPostWhereUniqueInput[]
}
export type GuildPostCreateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildPostCreateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildPostCreateWithoutGuildInput {
  title?: string
  body?: string
}
export type GuildPostCreateWithoutGuildInputInputObject =
  | Extract<keyof GuildPostCreateWithoutGuildInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface GuildEventCreateManyWithoutGuildInput {
  create?: GuildEventCreateWithoutGuildInput[]
  connect?: GuildEventWhereUniqueInput[]
}
export type GuildEventCreateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildEventCreateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildEventCreateWithoutGuildInput {
  title?: string
  startingAt?: string
  instance?: InstanceCreateOneInput
  roster?: GuildMemberCreateManyWithoutEventsInput | null
}
export type GuildEventCreateWithoutGuildInputInputObject =
  | Extract<keyof GuildEventCreateWithoutGuildInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  
export interface InstanceCreateOneInput {
  create?: InstanceCreateInput | null
  connect?: InstanceWhereUniqueInput | null
}
export type InstanceCreateOneInputInputObject =
  | Extract<keyof InstanceCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InstanceCreateInput {
  name?: string
  Abbreviation?: string | null
  image?: string | null
  wiki?: string | null
  suggestedLevel?: string | null
  playersCap?: number | null
  location?: string | null
}
export type InstanceCreateInputInputObject =
  | Extract<keyof InstanceCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'Abbreviation', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'wiki', alias?: string  } 
  | { name: 'suggestedLevel', alias?: string  } 
  | { name: 'playersCap', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface GuildMemberCreateManyWithoutEventsInput {
  create?: GuildMemberCreateWithoutEventsInput[]
  connect?: GuildMemberWhereUniqueInput[]
}
export type GuildMemberCreateManyWithoutEventsInputInputObject =
  | Extract<keyof GuildMemberCreateManyWithoutEventsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildMemberCreateWithoutEventsInput {
  character?: CharacterCreateOneWithoutGuildInput
  guild?: GuildCreateOneWithoutRosterInput
  guildRole?: prisma.GuildRole
  role?: prisma.Role
  dkp?: number | null
}
export type GuildMemberCreateWithoutEventsInputInputObject =
  | Extract<keyof GuildMemberCreateWithoutEventsInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  
export interface CharacterCreateOneWithoutGuildInput {
  create?: CharacterCreateWithoutGuildInput | null
  connect?: CharacterWhereUniqueInput | null
}
export type CharacterCreateOneWithoutGuildInputInputObject =
  | Extract<keyof CharacterCreateOneWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CharacterCreateWithoutGuildInput {
  user?: UserCreateOneWithoutCharactersInput
  realm?: RealmCreateOneWithoutCharactersInput
  name?: string
  class?: prisma.CharacterClassEnum
  applications?: GuildApplicationCreateManyWithoutCharacterInput | null
}
export type CharacterCreateWithoutGuildInputInputObject =
  | Extract<keyof CharacterCreateWithoutGuildInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface RealmCreateOneWithoutCharactersInput {
  create?: RealmCreateWithoutCharactersInput | null
  connect?: RealmWhereUniqueInput | null
}
export type RealmCreateOneWithoutCharactersInputInputObject =
  | Extract<keyof RealmCreateOneWithoutCharactersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RealmCreateWithoutCharactersInput {
  name?: string
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
  guilds?: GuildCreateManyWithoutRealmInput | null
}
export type RealmCreateWithoutCharactersInputInputObject =
  | Extract<keyof RealmCreateWithoutCharactersInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'guilds', alias?: string  } 
  
export interface GuildCreateManyWithoutRealmInput {
  create?: GuildCreateWithoutRealmInput[]
  connect?: GuildWhereUniqueInput[]
}
export type GuildCreateManyWithoutRealmInputInputObject =
  | Extract<keyof GuildCreateManyWithoutRealmInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildCreateWithoutRealmInput {
  name?: string
  avatar?: string | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberCreateManyWithoutGuildInput | null
  posts?: GuildPostCreateManyWithoutGuildInput | null
  events?: GuildEventCreateManyWithoutGuildInput | null
  applications?: GuildApplicationCreateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormCreateOneWithoutGuildInput | null
}
export type GuildCreateWithoutRealmInputInputObject =
  | Extract<keyof GuildCreateWithoutRealmInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildMemberCreateManyWithoutGuildInput {
  create?: GuildMemberCreateWithoutGuildInput[]
  connect?: GuildMemberWhereUniqueInput[]
}
export type GuildMemberCreateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildMemberCreateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildMemberCreateWithoutGuildInput {
  character?: CharacterCreateOneWithoutGuildInput
  guildRole?: prisma.GuildRole
  role?: prisma.Role
  dkp?: number | null
  events?: GuildEventCreateManyWithoutRosterInput | null
}
export type GuildMemberCreateWithoutGuildInputInputObject =
  | Extract<keyof GuildMemberCreateWithoutGuildInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'events', alias?: string  } 
  
export interface GuildEventCreateManyWithoutRosterInput {
  create?: GuildEventCreateWithoutRosterInput[]
  connect?: GuildEventWhereUniqueInput[]
}
export type GuildEventCreateManyWithoutRosterInputInputObject =
  | Extract<keyof GuildEventCreateManyWithoutRosterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildEventCreateWithoutRosterInput {
  title?: string
  startingAt?: string
  instance?: InstanceCreateOneInput
  guild?: GuildCreateOneWithoutEventsInput
}
export type GuildEventCreateWithoutRosterInputInputObject =
  | Extract<keyof GuildEventCreateWithoutRosterInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  
export interface GuildCreateOneWithoutEventsInput {
  create?: GuildCreateWithoutEventsInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildCreateOneWithoutEventsInputInputObject =
  | Extract<keyof GuildCreateOneWithoutEventsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildCreateWithoutEventsInput {
  name?: string
  avatar?: string | null
  realm?: RealmCreateOneWithoutGuildsInput
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberCreateManyWithoutGuildInput | null
  posts?: GuildPostCreateManyWithoutGuildInput | null
  applications?: GuildApplicationCreateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormCreateOneWithoutGuildInput | null
}
export type GuildCreateWithoutEventsInputInputObject =
  | Extract<keyof GuildCreateWithoutEventsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildApplicationCreateManyWithoutGuildInput {
  create?: GuildApplicationCreateWithoutGuildInput[]
  connect?: GuildApplicationWhereUniqueInput[]
}
export type GuildApplicationCreateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationCreateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationCreateWithoutGuildInput {
  character?: CharacterCreateOneWithoutApplicationsInput
  answers?: GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput | null
  status?: prisma.GuildApplicationStatus
  comment?: string | null
}
export type GuildApplicationCreateWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationCreateWithoutGuildInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CharacterCreateOneWithoutApplicationsInput {
  create?: CharacterCreateWithoutApplicationsInput | null
  connect?: CharacterWhereUniqueInput | null
}
export type CharacterCreateOneWithoutApplicationsInputInputObject =
  | Extract<keyof CharacterCreateOneWithoutApplicationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CharacterCreateWithoutApplicationsInput {
  user?: UserCreateOneWithoutCharactersInput
  realm?: RealmCreateOneWithoutCharactersInput
  name?: string
  class?: prisma.CharacterClassEnum
  guild?: GuildMemberCreateOneWithoutCharacterInput | null
}
export type CharacterCreateWithoutApplicationsInputInputObject =
  | Extract<keyof CharacterCreateWithoutApplicationsInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput {
  create?: GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput[]
  connect?: GuildApplicationFormQuestionAnswerWhereUniqueInput[]
}
export type GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput {
  question?: GuildApplicationFormQuestionCreateOneInput
  answer?: string
}
export type GuildApplicationFormQuestionAnswerCreateWithoutApplicationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  
export interface GuildApplicationFormQuestionCreateOneInput {
  create?: GuildApplicationFormQuestionCreateInput | null
  connect?: GuildApplicationFormQuestionWhereUniqueInput | null
}
export type GuildApplicationFormQuestionCreateOneInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormQuestionCreateInput {
  guildApplicationForm?: GuildApplicationFormCreateOneWithoutQuestionsInput
  question?: string
  sequence?: number | null
}
export type GuildApplicationFormQuestionCreateInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionCreateInput, string>
  | { name: 'guildApplicationForm', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationFormCreateOneWithoutQuestionsInput {
  create?: GuildApplicationFormCreateWithoutQuestionsInput | null
  connect?: GuildApplicationFormWhereUniqueInput | null
}
export type GuildApplicationFormCreateOneWithoutQuestionsInputInputObject =
  | Extract<keyof GuildApplicationFormCreateOneWithoutQuestionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormCreateWithoutQuestionsInput {
  lastUpdatedAt?: string
  guild?: GuildCreateOneWithoutApplicationFormInput
}
export type GuildApplicationFormCreateWithoutQuestionsInputInputObject =
  | Extract<keyof GuildApplicationFormCreateWithoutQuestionsInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  
export interface GuildCreateOneWithoutApplicationFormInput {
  create?: GuildCreateWithoutApplicationFormInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildCreateOneWithoutApplicationFormInputInputObject =
  | Extract<keyof GuildCreateOneWithoutApplicationFormInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildCreateWithoutApplicationFormInput {
  name?: string
  avatar?: string | null
  realm?: RealmCreateOneWithoutGuildsInput
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberCreateManyWithoutGuildInput | null
  posts?: GuildPostCreateManyWithoutGuildInput | null
  events?: GuildEventCreateManyWithoutGuildInput | null
  applications?: GuildApplicationCreateManyWithoutGuildInput | null
}
export type GuildCreateWithoutApplicationFormInputInputObject =
  | Extract<keyof GuildCreateWithoutApplicationFormInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface GuildApplicationFormCreateOneWithoutGuildInput {
  create?: GuildApplicationFormCreateWithoutGuildInput | null
  connect?: GuildApplicationFormWhereUniqueInput | null
}
export type GuildApplicationFormCreateOneWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationFormCreateOneWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormCreateWithoutGuildInput {
  lastUpdatedAt?: string
  questions?: GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput | null
}
export type GuildApplicationFormCreateWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationFormCreateWithoutGuildInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'questions', alias?: string  } 
  
export interface GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput {
  create?: GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput[]
  connect?: GuildApplicationFormQuestionWhereUniqueInput[]
}
export type GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput {
  question?: string
  sequence?: number | null
}
export type GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationCreateManyWithoutCharacterInput {
  create?: GuildApplicationCreateWithoutCharacterInput[]
  connect?: GuildApplicationWhereUniqueInput[]
}
export type GuildApplicationCreateManyWithoutCharacterInputInputObject =
  | Extract<keyof GuildApplicationCreateManyWithoutCharacterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationCreateWithoutCharacterInput {
  guild?: GuildCreateOneWithoutApplicationsInput
  answers?: GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput | null
  status?: prisma.GuildApplicationStatus
  comment?: string | null
}
export type GuildApplicationCreateWithoutCharacterInputInputObject =
  | Extract<keyof GuildApplicationCreateWithoutCharacterInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildCreateOneWithoutApplicationsInput {
  create?: GuildCreateWithoutApplicationsInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildCreateOneWithoutApplicationsInputInputObject =
  | Extract<keyof GuildCreateOneWithoutApplicationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildCreateWithoutApplicationsInput {
  name?: string
  avatar?: string | null
  realm?: RealmCreateOneWithoutGuildsInput
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberCreateManyWithoutGuildInput | null
  posts?: GuildPostCreateManyWithoutGuildInput | null
  events?: GuildEventCreateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormCreateOneWithoutGuildInput | null
}
export type GuildCreateWithoutApplicationsInputInputObject =
  | Extract<keyof GuildCreateWithoutApplicationsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildUpdateInput {
  name?: string | null
  avatar?: string | null
  realm?: RealmUpdateOneRequiredWithoutGuildsInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberUpdateManyWithoutGuildInput | null
  posts?: GuildPostUpdateManyWithoutGuildInput | null
  events?: GuildEventUpdateManyWithoutGuildInput | null
  applications?: GuildApplicationUpdateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormUpdateOneWithoutGuildInput | null
}
export type GuildUpdateInputInputObject =
  | Extract<keyof GuildUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface RealmUpdateOneRequiredWithoutGuildsInput {
  create?: RealmCreateWithoutGuildsInput | null
  update?: RealmUpdateWithoutGuildsDataInput | null
  upsert?: RealmUpsertWithoutGuildsInput | null
  connect?: RealmWhereUniqueInput | null
}
export type RealmUpdateOneRequiredWithoutGuildsInputInputObject =
  | Extract<keyof RealmUpdateOneRequiredWithoutGuildsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RealmUpdateWithoutGuildsDataInput {
  name?: string | null
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
  characters?: CharacterUpdateManyWithoutRealmInput | null
}
export type RealmUpdateWithoutGuildsDataInputInputObject =
  | Extract<keyof RealmUpdateWithoutGuildsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'characters', alias?: string  } 
  
export interface CharacterUpdateManyWithoutRealmInput {
  create?: CharacterCreateWithoutRealmInput[]
  delete?: CharacterWhereUniqueInput[]
  connect?: CharacterWhereUniqueInput[]
  set?: CharacterWhereUniqueInput[]
  disconnect?: CharacterWhereUniqueInput[]
  update?: CharacterUpdateWithWhereUniqueWithoutRealmInput[]
  upsert?: CharacterUpsertWithWhereUniqueWithoutRealmInput[]
  deleteMany?: CharacterScalarWhereInput[]
  updateMany?: CharacterUpdateManyWithWhereNestedInput[]
}
export type CharacterUpdateManyWithoutRealmInputInputObject =
  | Extract<keyof CharacterUpdateManyWithoutRealmInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CharacterUpdateWithWhereUniqueWithoutRealmInput {
  where?: CharacterWhereUniqueInput
  data?: CharacterUpdateWithoutRealmDataInput
}
export type CharacterUpdateWithWhereUniqueWithoutRealmInputInputObject =
  | Extract<keyof CharacterUpdateWithWhereUniqueWithoutRealmInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CharacterUpdateWithoutRealmDataInput {
  user?: UserUpdateOneRequiredWithoutCharactersInput | null
  name?: string | null
  class?: prisma.CharacterClassEnum | null
  guild?: GuildMemberUpdateOneWithoutCharacterInput | null
  applications?: GuildApplicationUpdateManyWithoutCharacterInput | null
}
export type CharacterUpdateWithoutRealmDataInputInputObject =
  | Extract<keyof CharacterUpdateWithoutRealmDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutCharactersInput {
  create?: UserCreateWithoutCharactersInput | null
  update?: UserUpdateWithoutCharactersDataInput | null
  upsert?: UserUpsertWithoutCharactersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutCharactersInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutCharactersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCharactersDataInput {
  displayName?: string | null
  email?: string | null
  password?: string | null
  confirmed?: boolean | null
  avatar?: string | null
}
export type UserUpdateWithoutCharactersDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCharactersDataInput, string>
  | { name: 'displayName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'confirmed', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface UserUpsertWithoutCharactersInput {
  update?: UserUpdateWithoutCharactersDataInput
  create?: UserCreateWithoutCharactersInput
}
export type UserUpsertWithoutCharactersInputInputObject =
  | Extract<keyof UserUpsertWithoutCharactersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildMemberUpdateOneWithoutCharacterInput {
  create?: GuildMemberCreateWithoutCharacterInput | null
  update?: GuildMemberUpdateWithoutCharacterDataInput | null
  upsert?: GuildMemberUpsertWithoutCharacterInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: GuildMemberWhereUniqueInput | null
}
export type GuildMemberUpdateOneWithoutCharacterInputInputObject =
  | Extract<keyof GuildMemberUpdateOneWithoutCharacterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildMemberUpdateWithoutCharacterDataInput {
  guild?: GuildUpdateOneRequiredWithoutRosterInput | null
  guildRole?: prisma.GuildRole | null
  role?: prisma.Role | null
  dkp?: number | null
  events?: GuildEventUpdateManyWithoutRosterInput | null
}
export type GuildMemberUpdateWithoutCharacterDataInputInputObject =
  | Extract<keyof GuildMemberUpdateWithoutCharacterDataInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'events', alias?: string  } 
  
export interface GuildUpdateOneRequiredWithoutRosterInput {
  create?: GuildCreateWithoutRosterInput | null
  update?: GuildUpdateWithoutRosterDataInput | null
  upsert?: GuildUpsertWithoutRosterInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildUpdateOneRequiredWithoutRosterInputInputObject =
  | Extract<keyof GuildUpdateOneRequiredWithoutRosterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildUpdateWithoutRosterDataInput {
  name?: string | null
  avatar?: string | null
  realm?: RealmUpdateOneRequiredWithoutGuildsInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  posts?: GuildPostUpdateManyWithoutGuildInput | null
  events?: GuildEventUpdateManyWithoutGuildInput | null
  applications?: GuildApplicationUpdateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormUpdateOneWithoutGuildInput | null
}
export type GuildUpdateWithoutRosterDataInputInputObject =
  | Extract<keyof GuildUpdateWithoutRosterDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildPostUpdateManyWithoutGuildInput {
  create?: GuildPostCreateWithoutGuildInput[]
  delete?: GuildPostWhereUniqueInput[]
  connect?: GuildPostWhereUniqueInput[]
  set?: GuildPostWhereUniqueInput[]
  disconnect?: GuildPostWhereUniqueInput[]
  update?: GuildPostUpdateWithWhereUniqueWithoutGuildInput[]
  upsert?: GuildPostUpsertWithWhereUniqueWithoutGuildInput[]
  deleteMany?: GuildPostScalarWhereInput[]
  updateMany?: GuildPostUpdateManyWithWhereNestedInput[]
}
export type GuildPostUpdateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildPostUpdateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildPostUpdateWithWhereUniqueWithoutGuildInput {
  where?: GuildPostWhereUniqueInput
  data?: GuildPostUpdateWithoutGuildDataInput
}
export type GuildPostUpdateWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildPostUpdateWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildPostUpdateWithoutGuildDataInput {
  title?: string | null
  body?: string | null
}
export type GuildPostUpdateWithoutGuildDataInputInputObject =
  | Extract<keyof GuildPostUpdateWithoutGuildDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface GuildPostUpsertWithWhereUniqueWithoutGuildInput {
  where?: GuildPostWhereUniqueInput
  update?: GuildPostUpdateWithoutGuildDataInput
  create?: GuildPostCreateWithoutGuildInput
}
export type GuildPostUpsertWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildPostUpsertWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildPostScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  body?: string | null
  body_not?: string | null
  body_in?: string[]
  body_not_in?: string[]
  body_lt?: string | null
  body_lte?: string | null
  body_gt?: string | null
  body_gte?: string | null
  body_contains?: string | null
  body_not_contains?: string | null
  body_starts_with?: string | null
  body_not_starts_with?: string | null
  body_ends_with?: string | null
  body_not_ends_with?: string | null
  AND?: GuildPostScalarWhereInput[]
  OR?: GuildPostScalarWhereInput[]
  NOT?: GuildPostScalarWhereInput[]
}
export type GuildPostScalarWhereInputInputObject =
  | Extract<keyof GuildPostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'body_not', alias?: string  } 
  | { name: 'body_in', alias?: string  } 
  | { name: 'body_not_in', alias?: string  } 
  | { name: 'body_lt', alias?: string  } 
  | { name: 'body_lte', alias?: string  } 
  | { name: 'body_gt', alias?: string  } 
  | { name: 'body_gte', alias?: string  } 
  | { name: 'body_contains', alias?: string  } 
  | { name: 'body_not_contains', alias?: string  } 
  | { name: 'body_starts_with', alias?: string  } 
  | { name: 'body_not_starts_with', alias?: string  } 
  | { name: 'body_ends_with', alias?: string  } 
  | { name: 'body_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildPostUpdateManyWithWhereNestedInput {
  where?: GuildPostScalarWhereInput
  data?: GuildPostUpdateManyDataInput
}
export type GuildPostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildPostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildPostUpdateManyDataInput {
  title?: string | null
  body?: string | null
}
export type GuildPostUpdateManyDataInputInputObject =
  | Extract<keyof GuildPostUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface GuildEventUpdateManyWithoutGuildInput {
  create?: GuildEventCreateWithoutGuildInput[]
  delete?: GuildEventWhereUniqueInput[]
  connect?: GuildEventWhereUniqueInput[]
  set?: GuildEventWhereUniqueInput[]
  disconnect?: GuildEventWhereUniqueInput[]
  update?: GuildEventUpdateWithWhereUniqueWithoutGuildInput[]
  upsert?: GuildEventUpsertWithWhereUniqueWithoutGuildInput[]
  deleteMany?: GuildEventScalarWhereInput[]
  updateMany?: GuildEventUpdateManyWithWhereNestedInput[]
}
export type GuildEventUpdateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildEventUpdateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildEventUpdateWithWhereUniqueWithoutGuildInput {
  where?: GuildEventWhereUniqueInput
  data?: GuildEventUpdateWithoutGuildDataInput
}
export type GuildEventUpdateWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildEventUpdateWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildEventUpdateWithoutGuildDataInput {
  title?: string | null
  startingAt?: string | null
  instance?: InstanceUpdateOneRequiredInput | null
  roster?: GuildMemberUpdateManyWithoutEventsInput | null
}
export type GuildEventUpdateWithoutGuildDataInputInputObject =
  | Extract<keyof GuildEventUpdateWithoutGuildDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  
export interface InstanceUpdateOneRequiredInput {
  create?: InstanceCreateInput | null
  update?: InstanceUpdateDataInput | null
  upsert?: InstanceUpsertNestedInput | null
  connect?: InstanceWhereUniqueInput | null
}
export type InstanceUpdateOneRequiredInputInputObject =
  | Extract<keyof InstanceUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InstanceUpdateDataInput {
  name?: string | null
  Abbreviation?: string | null
  image?: string | null
  wiki?: string | null
  suggestedLevel?: string | null
  playersCap?: number | null
  location?: string | null
}
export type InstanceUpdateDataInputInputObject =
  | Extract<keyof InstanceUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'Abbreviation', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'wiki', alias?: string  } 
  | { name: 'suggestedLevel', alias?: string  } 
  | { name: 'playersCap', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface InstanceUpsertNestedInput {
  update?: InstanceUpdateDataInput
  create?: InstanceCreateInput
}
export type InstanceUpsertNestedInputInputObject =
  | Extract<keyof InstanceUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildMemberUpdateManyWithoutEventsInput {
  create?: GuildMemberCreateWithoutEventsInput[]
  delete?: GuildMemberWhereUniqueInput[]
  connect?: GuildMemberWhereUniqueInput[]
  set?: GuildMemberWhereUniqueInput[]
  disconnect?: GuildMemberWhereUniqueInput[]
  update?: GuildMemberUpdateWithWhereUniqueWithoutEventsInput[]
  upsert?: GuildMemberUpsertWithWhereUniqueWithoutEventsInput[]
  deleteMany?: GuildMemberScalarWhereInput[]
  updateMany?: GuildMemberUpdateManyWithWhereNestedInput[]
}
export type GuildMemberUpdateManyWithoutEventsInputInputObject =
  | Extract<keyof GuildMemberUpdateManyWithoutEventsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildMemberUpdateWithWhereUniqueWithoutEventsInput {
  where?: GuildMemberWhereUniqueInput
  data?: GuildMemberUpdateWithoutEventsDataInput
}
export type GuildMemberUpdateWithWhereUniqueWithoutEventsInputInputObject =
  | Extract<keyof GuildMemberUpdateWithWhereUniqueWithoutEventsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildMemberUpdateWithoutEventsDataInput {
  character?: CharacterUpdateOneRequiredWithoutGuildInput | null
  guild?: GuildUpdateOneRequiredWithoutRosterInput | null
  guildRole?: prisma.GuildRole | null
  role?: prisma.Role | null
  dkp?: number | null
}
export type GuildMemberUpdateWithoutEventsDataInputInputObject =
  | Extract<keyof GuildMemberUpdateWithoutEventsDataInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  
export interface CharacterUpdateOneRequiredWithoutGuildInput {
  create?: CharacterCreateWithoutGuildInput | null
  update?: CharacterUpdateWithoutGuildDataInput | null
  upsert?: CharacterUpsertWithoutGuildInput | null
  connect?: CharacterWhereUniqueInput | null
}
export type CharacterUpdateOneRequiredWithoutGuildInputInputObject =
  | Extract<keyof CharacterUpdateOneRequiredWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CharacterUpdateWithoutGuildDataInput {
  user?: UserUpdateOneRequiredWithoutCharactersInput | null
  realm?: RealmUpdateOneRequiredWithoutCharactersInput | null
  name?: string | null
  class?: prisma.CharacterClassEnum | null
  applications?: GuildApplicationUpdateManyWithoutCharacterInput | null
}
export type CharacterUpdateWithoutGuildDataInputInputObject =
  | Extract<keyof CharacterUpdateWithoutGuildDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface RealmUpdateOneRequiredWithoutCharactersInput {
  create?: RealmCreateWithoutCharactersInput | null
  update?: RealmUpdateWithoutCharactersDataInput | null
  upsert?: RealmUpsertWithoutCharactersInput | null
  connect?: RealmWhereUniqueInput | null
}
export type RealmUpdateOneRequiredWithoutCharactersInputInputObject =
  | Extract<keyof RealmUpdateOneRequiredWithoutCharactersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RealmUpdateWithoutCharactersDataInput {
  name?: string | null
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
  guilds?: GuildUpdateManyWithoutRealmInput | null
}
export type RealmUpdateWithoutCharactersDataInputInputObject =
  | Extract<keyof RealmUpdateWithoutCharactersDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'guilds', alias?: string  } 
  
export interface GuildUpdateManyWithoutRealmInput {
  create?: GuildCreateWithoutRealmInput[]
  delete?: GuildWhereUniqueInput[]
  connect?: GuildWhereUniqueInput[]
  set?: GuildWhereUniqueInput[]
  disconnect?: GuildWhereUniqueInput[]
  update?: GuildUpdateWithWhereUniqueWithoutRealmInput[]
  upsert?: GuildUpsertWithWhereUniqueWithoutRealmInput[]
  deleteMany?: GuildScalarWhereInput[]
  updateMany?: GuildUpdateManyWithWhereNestedInput[]
}
export type GuildUpdateManyWithoutRealmInputInputObject =
  | Extract<keyof GuildUpdateManyWithoutRealmInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildUpdateWithWhereUniqueWithoutRealmInput {
  where?: GuildWhereUniqueInput
  data?: GuildUpdateWithoutRealmDataInput
}
export type GuildUpdateWithWhereUniqueWithoutRealmInputInputObject =
  | Extract<keyof GuildUpdateWithWhereUniqueWithoutRealmInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildUpdateWithoutRealmDataInput {
  name?: string | null
  avatar?: string | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberUpdateManyWithoutGuildInput | null
  posts?: GuildPostUpdateManyWithoutGuildInput | null
  events?: GuildEventUpdateManyWithoutGuildInput | null
  applications?: GuildApplicationUpdateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormUpdateOneWithoutGuildInput | null
}
export type GuildUpdateWithoutRealmDataInputInputObject =
  | Extract<keyof GuildUpdateWithoutRealmDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildMemberUpdateManyWithoutGuildInput {
  create?: GuildMemberCreateWithoutGuildInput[]
  delete?: GuildMemberWhereUniqueInput[]
  connect?: GuildMemberWhereUniqueInput[]
  set?: GuildMemberWhereUniqueInput[]
  disconnect?: GuildMemberWhereUniqueInput[]
  update?: GuildMemberUpdateWithWhereUniqueWithoutGuildInput[]
  upsert?: GuildMemberUpsertWithWhereUniqueWithoutGuildInput[]
  deleteMany?: GuildMemberScalarWhereInput[]
  updateMany?: GuildMemberUpdateManyWithWhereNestedInput[]
}
export type GuildMemberUpdateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildMemberUpdateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildMemberUpdateWithWhereUniqueWithoutGuildInput {
  where?: GuildMemberWhereUniqueInput
  data?: GuildMemberUpdateWithoutGuildDataInput
}
export type GuildMemberUpdateWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildMemberUpdateWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildMemberUpdateWithoutGuildDataInput {
  character?: CharacterUpdateOneRequiredWithoutGuildInput | null
  guildRole?: prisma.GuildRole | null
  role?: prisma.Role | null
  dkp?: number | null
  events?: GuildEventUpdateManyWithoutRosterInput | null
}
export type GuildMemberUpdateWithoutGuildDataInputInputObject =
  | Extract<keyof GuildMemberUpdateWithoutGuildDataInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'events', alias?: string  } 
  
export interface GuildEventUpdateManyWithoutRosterInput {
  create?: GuildEventCreateWithoutRosterInput[]
  delete?: GuildEventWhereUniqueInput[]
  connect?: GuildEventWhereUniqueInput[]
  set?: GuildEventWhereUniqueInput[]
  disconnect?: GuildEventWhereUniqueInput[]
  update?: GuildEventUpdateWithWhereUniqueWithoutRosterInput[]
  upsert?: GuildEventUpsertWithWhereUniqueWithoutRosterInput[]
  deleteMany?: GuildEventScalarWhereInput[]
  updateMany?: GuildEventUpdateManyWithWhereNestedInput[]
}
export type GuildEventUpdateManyWithoutRosterInputInputObject =
  | Extract<keyof GuildEventUpdateManyWithoutRosterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildEventUpdateWithWhereUniqueWithoutRosterInput {
  where?: GuildEventWhereUniqueInput
  data?: GuildEventUpdateWithoutRosterDataInput
}
export type GuildEventUpdateWithWhereUniqueWithoutRosterInputInputObject =
  | Extract<keyof GuildEventUpdateWithWhereUniqueWithoutRosterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildEventUpdateWithoutRosterDataInput {
  title?: string | null
  startingAt?: string | null
  instance?: InstanceUpdateOneRequiredInput | null
  guild?: GuildUpdateOneRequiredWithoutEventsInput | null
}
export type GuildEventUpdateWithoutRosterDataInputInputObject =
  | Extract<keyof GuildEventUpdateWithoutRosterDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  
export interface GuildUpdateOneRequiredWithoutEventsInput {
  create?: GuildCreateWithoutEventsInput | null
  update?: GuildUpdateWithoutEventsDataInput | null
  upsert?: GuildUpsertWithoutEventsInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildUpdateOneRequiredWithoutEventsInputInputObject =
  | Extract<keyof GuildUpdateOneRequiredWithoutEventsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildUpdateWithoutEventsDataInput {
  name?: string | null
  avatar?: string | null
  realm?: RealmUpdateOneRequiredWithoutGuildsInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberUpdateManyWithoutGuildInput | null
  posts?: GuildPostUpdateManyWithoutGuildInput | null
  applications?: GuildApplicationUpdateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormUpdateOneWithoutGuildInput | null
}
export type GuildUpdateWithoutEventsDataInputInputObject =
  | Extract<keyof GuildUpdateWithoutEventsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildApplicationUpdateManyWithoutGuildInput {
  create?: GuildApplicationCreateWithoutGuildInput[]
  delete?: GuildApplicationWhereUniqueInput[]
  connect?: GuildApplicationWhereUniqueInput[]
  set?: GuildApplicationWhereUniqueInput[]
  disconnect?: GuildApplicationWhereUniqueInput[]
  update?: GuildApplicationUpdateWithWhereUniqueWithoutGuildInput[]
  upsert?: GuildApplicationUpsertWithWhereUniqueWithoutGuildInput[]
  deleteMany?: GuildApplicationScalarWhereInput[]
  updateMany?: GuildApplicationUpdateManyWithWhereNestedInput[]
}
export type GuildApplicationUpdateManyWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationUpdateManyWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildApplicationUpdateWithWhereUniqueWithoutGuildInput {
  where?: GuildApplicationWhereUniqueInput
  data?: GuildApplicationUpdateWithoutGuildDataInput
}
export type GuildApplicationUpdateWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationUpdateWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationUpdateWithoutGuildDataInput {
  character?: CharacterUpdateOneRequiredWithoutApplicationsInput | null
  answers?: GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInput | null
  status?: prisma.GuildApplicationStatus | null
  comment?: string | null
}
export type GuildApplicationUpdateWithoutGuildDataInputInputObject =
  | Extract<keyof GuildApplicationUpdateWithoutGuildDataInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CharacterUpdateOneRequiredWithoutApplicationsInput {
  create?: CharacterCreateWithoutApplicationsInput | null
  update?: CharacterUpdateWithoutApplicationsDataInput | null
  upsert?: CharacterUpsertWithoutApplicationsInput | null
  connect?: CharacterWhereUniqueInput | null
}
export type CharacterUpdateOneRequiredWithoutApplicationsInputInputObject =
  | Extract<keyof CharacterUpdateOneRequiredWithoutApplicationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CharacterUpdateWithoutApplicationsDataInput {
  user?: UserUpdateOneRequiredWithoutCharactersInput | null
  realm?: RealmUpdateOneRequiredWithoutCharactersInput | null
  name?: string | null
  class?: prisma.CharacterClassEnum | null
  guild?: GuildMemberUpdateOneWithoutCharacterInput | null
}
export type CharacterUpdateWithoutApplicationsDataInputInputObject =
  | Extract<keyof CharacterUpdateWithoutApplicationsDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  
export interface CharacterUpsertWithoutApplicationsInput {
  update?: CharacterUpdateWithoutApplicationsDataInput
  create?: CharacterCreateWithoutApplicationsInput
}
export type CharacterUpsertWithoutApplicationsInputInputObject =
  | Extract<keyof CharacterUpsertWithoutApplicationsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInput {
  create?: GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput[]
  delete?: GuildApplicationFormQuestionAnswerWhereUniqueInput[]
  connect?: GuildApplicationFormQuestionAnswerWhereUniqueInput[]
  set?: GuildApplicationFormQuestionAnswerWhereUniqueInput[]
  disconnect?: GuildApplicationFormQuestionAnswerWhereUniqueInput[]
  update?: GuildApplicationFormQuestionAnswerUpdateWithWhereUniqueWithoutApplicationInput[]
  upsert?: GuildApplicationFormQuestionAnswerUpsertWithWhereUniqueWithoutApplicationInput[]
  deleteMany?: GuildApplicationFormQuestionAnswerScalarWhereInput[]
  updateMany?: GuildApplicationFormQuestionAnswerUpdateManyWithWhereNestedInput[]
}
export type GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateWithWhereUniqueWithoutApplicationInput {
  where?: GuildApplicationFormQuestionAnswerWhereUniqueInput
  data?: GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInput
}
export type GuildApplicationFormQuestionAnswerUpdateWithWhereUniqueWithoutApplicationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateWithWhereUniqueWithoutApplicationInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInput {
  question?: GuildApplicationFormQuestionUpdateOneRequiredInput | null
  answer?: string | null
}
export type GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateOneRequiredInput {
  create?: GuildApplicationFormQuestionCreateInput | null
  update?: GuildApplicationFormQuestionUpdateDataInput | null
  upsert?: GuildApplicationFormQuestionUpsertNestedInput | null
  connect?: GuildApplicationFormQuestionWhereUniqueInput | null
}
export type GuildApplicationFormQuestionUpdateOneRequiredInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateDataInput {
  guildApplicationForm?: GuildApplicationFormUpdateOneRequiredWithoutQuestionsInput | null
  question?: string | null
  sequence?: number | null
}
export type GuildApplicationFormQuestionUpdateDataInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateDataInput, string>
  | { name: 'guildApplicationForm', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationFormUpdateOneRequiredWithoutQuestionsInput {
  create?: GuildApplicationFormCreateWithoutQuestionsInput | null
  update?: GuildApplicationFormUpdateWithoutQuestionsDataInput | null
  upsert?: GuildApplicationFormUpsertWithoutQuestionsInput | null
  connect?: GuildApplicationFormWhereUniqueInput | null
}
export type GuildApplicationFormUpdateOneRequiredWithoutQuestionsInputInputObject =
  | Extract<keyof GuildApplicationFormUpdateOneRequiredWithoutQuestionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormUpdateWithoutQuestionsDataInput {
  lastUpdatedAt?: string | null
  guild?: GuildUpdateOneRequiredWithoutApplicationFormInput | null
}
export type GuildApplicationFormUpdateWithoutQuestionsDataInputInputObject =
  | Extract<keyof GuildApplicationFormUpdateWithoutQuestionsDataInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  
export interface GuildUpdateOneRequiredWithoutApplicationFormInput {
  create?: GuildCreateWithoutApplicationFormInput | null
  update?: GuildUpdateWithoutApplicationFormDataInput | null
  upsert?: GuildUpsertWithoutApplicationFormInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildUpdateOneRequiredWithoutApplicationFormInputInputObject =
  | Extract<keyof GuildUpdateOneRequiredWithoutApplicationFormInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildUpdateWithoutApplicationFormDataInput {
  name?: string | null
  avatar?: string | null
  realm?: RealmUpdateOneRequiredWithoutGuildsInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberUpdateManyWithoutGuildInput | null
  posts?: GuildPostUpdateManyWithoutGuildInput | null
  events?: GuildEventUpdateManyWithoutGuildInput | null
  applications?: GuildApplicationUpdateManyWithoutGuildInput | null
}
export type GuildUpdateWithoutApplicationFormDataInputInputObject =
  | Extract<keyof GuildUpdateWithoutApplicationFormDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface GuildUpsertWithoutApplicationFormInput {
  update?: GuildUpdateWithoutApplicationFormDataInput
  create?: GuildCreateWithoutApplicationFormInput
}
export type GuildUpsertWithoutApplicationFormInputInputObject =
  | Extract<keyof GuildUpsertWithoutApplicationFormInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormUpsertWithoutQuestionsInput {
  update?: GuildApplicationFormUpdateWithoutQuestionsDataInput
  create?: GuildApplicationFormCreateWithoutQuestionsInput
}
export type GuildApplicationFormUpsertWithoutQuestionsInputInputObject =
  | Extract<keyof GuildApplicationFormUpsertWithoutQuestionsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpsertNestedInput {
  update?: GuildApplicationFormQuestionUpdateDataInput
  create?: GuildApplicationFormQuestionCreateInput
}
export type GuildApplicationFormQuestionUpsertNestedInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpsertWithWhereUniqueWithoutApplicationInput {
  where?: GuildApplicationFormQuestionAnswerWhereUniqueInput
  update?: GuildApplicationFormQuestionAnswerUpdateWithoutApplicationDataInput
  create?: GuildApplicationFormQuestionAnswerCreateWithoutApplicationInput
}
export type GuildApplicationFormQuestionAnswerUpsertWithWhereUniqueWithoutApplicationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpsertWithWhereUniqueWithoutApplicationInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  answer?: string | null
  answer_not?: string | null
  answer_in?: string[]
  answer_not_in?: string[]
  answer_lt?: string | null
  answer_lte?: string | null
  answer_gt?: string | null
  answer_gte?: string | null
  answer_contains?: string | null
  answer_not_contains?: string | null
  answer_starts_with?: string | null
  answer_not_starts_with?: string | null
  answer_ends_with?: string | null
  answer_not_ends_with?: string | null
  AND?: GuildApplicationFormQuestionAnswerScalarWhereInput[]
  OR?: GuildApplicationFormQuestionAnswerScalarWhereInput[]
  NOT?: GuildApplicationFormQuestionAnswerScalarWhereInput[]
}
export type GuildApplicationFormQuestionAnswerScalarWhereInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  | { name: 'answer_not', alias?: string  } 
  | { name: 'answer_in', alias?: string  } 
  | { name: 'answer_not_in', alias?: string  } 
  | { name: 'answer_lt', alias?: string  } 
  | { name: 'answer_lte', alias?: string  } 
  | { name: 'answer_gt', alias?: string  } 
  | { name: 'answer_gte', alias?: string  } 
  | { name: 'answer_contains', alias?: string  } 
  | { name: 'answer_not_contains', alias?: string  } 
  | { name: 'answer_starts_with', alias?: string  } 
  | { name: 'answer_not_starts_with', alias?: string  } 
  | { name: 'answer_ends_with', alias?: string  } 
  | { name: 'answer_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateManyWithWhereNestedInput {
  where?: GuildApplicationFormQuestionAnswerScalarWhereInput
  data?: GuildApplicationFormQuestionAnswerUpdateManyDataInput
}
export type GuildApplicationFormQuestionAnswerUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateManyDataInput {
  answer?: string | null
}
export type GuildApplicationFormQuestionAnswerUpdateManyDataInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateManyDataInput, string>
  | { name: 'answer', alias?: string  } 
  
export interface GuildApplicationUpsertWithWhereUniqueWithoutGuildInput {
  where?: GuildApplicationWhereUniqueInput
  update?: GuildApplicationUpdateWithoutGuildDataInput
  create?: GuildApplicationCreateWithoutGuildInput
}
export type GuildApplicationUpsertWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationUpsertWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  status?: prisma.GuildApplicationStatus | null
  status_not?: prisma.GuildApplicationStatus | null
  status_in?: prisma.GuildApplicationStatus[]
  status_not_in?: prisma.GuildApplicationStatus[]
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  AND?: GuildApplicationScalarWhereInput[]
  OR?: GuildApplicationScalarWhereInput[]
  NOT?: GuildApplicationScalarWhereInput[]
}
export type GuildApplicationScalarWhereInputInputObject =
  | Extract<keyof GuildApplicationScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationUpdateManyWithWhereNestedInput {
  where?: GuildApplicationScalarWhereInput
  data?: GuildApplicationUpdateManyDataInput
}
export type GuildApplicationUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildApplicationUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationUpdateManyDataInput {
  status?: prisma.GuildApplicationStatus | null
  comment?: string | null
}
export type GuildApplicationUpdateManyDataInputInputObject =
  | Extract<keyof GuildApplicationUpdateManyDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildApplicationFormUpdateOneWithoutGuildInput {
  create?: GuildApplicationFormCreateWithoutGuildInput | null
  update?: GuildApplicationFormUpdateWithoutGuildDataInput | null
  upsert?: GuildApplicationFormUpsertWithoutGuildInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: GuildApplicationFormWhereUniqueInput | null
}
export type GuildApplicationFormUpdateOneWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationFormUpdateOneWithoutGuildInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationFormUpdateWithoutGuildDataInput {
  lastUpdatedAt?: string | null
  questions?: GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInput | null
}
export type GuildApplicationFormUpdateWithoutGuildDataInputInputObject =
  | Extract<keyof GuildApplicationFormUpdateWithoutGuildDataInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'questions', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInput {
  create?: GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput[]
  delete?: GuildApplicationFormQuestionWhereUniqueInput[]
  connect?: GuildApplicationFormQuestionWhereUniqueInput[]
  set?: GuildApplicationFormQuestionWhereUniqueInput[]
  disconnect?: GuildApplicationFormQuestionWhereUniqueInput[]
  update?: GuildApplicationFormQuestionUpdateWithWhereUniqueWithoutGuildApplicationFormInput[]
  upsert?: GuildApplicationFormQuestionUpsertWithWhereUniqueWithoutGuildApplicationFormInput[]
  deleteMany?: GuildApplicationFormQuestionScalarWhereInput[]
  updateMany?: GuildApplicationFormQuestionUpdateManyWithWhereNestedInput[]
}
export type GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateWithWhereUniqueWithoutGuildApplicationFormInput {
  where?: GuildApplicationFormQuestionWhereUniqueInput
  data?: GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInput
}
export type GuildApplicationFormQuestionUpdateWithWhereUniqueWithoutGuildApplicationFormInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateWithWhereUniqueWithoutGuildApplicationFormInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInput {
  question?: string | null
  sequence?: number | null
}
export type GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpsertWithWhereUniqueWithoutGuildApplicationFormInput {
  where?: GuildApplicationFormQuestionWhereUniqueInput
  update?: GuildApplicationFormQuestionUpdateWithoutGuildApplicationFormDataInput
  create?: GuildApplicationFormQuestionCreateWithoutGuildApplicationFormInput
}
export type GuildApplicationFormQuestionUpsertWithWhereUniqueWithoutGuildApplicationFormInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpsertWithWhereUniqueWithoutGuildApplicationFormInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormQuestionScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  question?: string | null
  question_not?: string | null
  question_in?: string[]
  question_not_in?: string[]
  question_lt?: string | null
  question_lte?: string | null
  question_gt?: string | null
  question_gte?: string | null
  question_contains?: string | null
  question_not_contains?: string | null
  question_starts_with?: string | null
  question_not_starts_with?: string | null
  question_ends_with?: string | null
  question_not_ends_with?: string | null
  sequence?: number | null
  sequence_not?: number | null
  sequence_in?: number[]
  sequence_not_in?: number[]
  sequence_lt?: number | null
  sequence_lte?: number | null
  sequence_gt?: number | null
  sequence_gte?: number | null
  AND?: GuildApplicationFormQuestionScalarWhereInput[]
  OR?: GuildApplicationFormQuestionScalarWhereInput[]
  NOT?: GuildApplicationFormQuestionScalarWhereInput[]
}
export type GuildApplicationFormQuestionScalarWhereInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'question_not', alias?: string  } 
  | { name: 'question_in', alias?: string  } 
  | { name: 'question_not_in', alias?: string  } 
  | { name: 'question_lt', alias?: string  } 
  | { name: 'question_lte', alias?: string  } 
  | { name: 'question_gt', alias?: string  } 
  | { name: 'question_gte', alias?: string  } 
  | { name: 'question_contains', alias?: string  } 
  | { name: 'question_not_contains', alias?: string  } 
  | { name: 'question_starts_with', alias?: string  } 
  | { name: 'question_not_starts_with', alias?: string  } 
  | { name: 'question_ends_with', alias?: string  } 
  | { name: 'question_not_ends_with', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  | { name: 'sequence_not', alias?: string  } 
  | { name: 'sequence_in', alias?: string  } 
  | { name: 'sequence_not_in', alias?: string  } 
  | { name: 'sequence_lt', alias?: string  } 
  | { name: 'sequence_lte', alias?: string  } 
  | { name: 'sequence_gt', alias?: string  } 
  | { name: 'sequence_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateManyWithWhereNestedInput {
  where?: GuildApplicationFormQuestionScalarWhereInput
  data?: GuildApplicationFormQuestionUpdateManyDataInput
}
export type GuildApplicationFormQuestionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateManyDataInput {
  question?: string | null
  sequence?: number | null
}
export type GuildApplicationFormQuestionUpdateManyDataInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateManyDataInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationFormUpsertWithoutGuildInput {
  update?: GuildApplicationFormUpdateWithoutGuildDataInput
  create?: GuildApplicationFormCreateWithoutGuildInput
}
export type GuildApplicationFormUpsertWithoutGuildInputInputObject =
  | Extract<keyof GuildApplicationFormUpsertWithoutGuildInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildUpsertWithoutEventsInput {
  update?: GuildUpdateWithoutEventsDataInput
  create?: GuildCreateWithoutEventsInput
}
export type GuildUpsertWithoutEventsInputInputObject =
  | Extract<keyof GuildUpsertWithoutEventsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildEventUpsertWithWhereUniqueWithoutRosterInput {
  where?: GuildEventWhereUniqueInput
  update?: GuildEventUpdateWithoutRosterDataInput
  create?: GuildEventCreateWithoutRosterInput
}
export type GuildEventUpsertWithWhereUniqueWithoutRosterInputInputObject =
  | Extract<keyof GuildEventUpsertWithWhereUniqueWithoutRosterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildEventScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  startingAt?: string | null
  startingAt_not?: string | null
  startingAt_in?: string[]
  startingAt_not_in?: string[]
  startingAt_lt?: string | null
  startingAt_lte?: string | null
  startingAt_gt?: string | null
  startingAt_gte?: string | null
  AND?: GuildEventScalarWhereInput[]
  OR?: GuildEventScalarWhereInput[]
  NOT?: GuildEventScalarWhereInput[]
}
export type GuildEventScalarWhereInputInputObject =
  | Extract<keyof GuildEventScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'startingAt_not', alias?: string  } 
  | { name: 'startingAt_in', alias?: string  } 
  | { name: 'startingAt_not_in', alias?: string  } 
  | { name: 'startingAt_lt', alias?: string  } 
  | { name: 'startingAt_lte', alias?: string  } 
  | { name: 'startingAt_gt', alias?: string  } 
  | { name: 'startingAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildEventUpdateManyWithWhereNestedInput {
  where?: GuildEventScalarWhereInput
  data?: GuildEventUpdateManyDataInput
}
export type GuildEventUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildEventUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildEventUpdateManyDataInput {
  title?: string | null
  startingAt?: string | null
}
export type GuildEventUpdateManyDataInputInputObject =
  | Extract<keyof GuildEventUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  
export interface GuildMemberUpsertWithWhereUniqueWithoutGuildInput {
  where?: GuildMemberWhereUniqueInput
  update?: GuildMemberUpdateWithoutGuildDataInput
  create?: GuildMemberCreateWithoutGuildInput
}
export type GuildMemberUpsertWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildMemberUpsertWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildMemberScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  guildRole?: prisma.GuildRole | null
  guildRole_not?: prisma.GuildRole | null
  guildRole_in?: prisma.GuildRole[]
  guildRole_not_in?: prisma.GuildRole[]
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  dkp?: number | null
  dkp_not?: number | null
  dkp_in?: number[]
  dkp_not_in?: number[]
  dkp_lt?: number | null
  dkp_lte?: number | null
  dkp_gt?: number | null
  dkp_gte?: number | null
  AND?: GuildMemberScalarWhereInput[]
  OR?: GuildMemberScalarWhereInput[]
  NOT?: GuildMemberScalarWhereInput[]
}
export type GuildMemberScalarWhereInputInputObject =
  | Extract<keyof GuildMemberScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'guildRole_not', alias?: string  } 
  | { name: 'guildRole_in', alias?: string  } 
  | { name: 'guildRole_not_in', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'dkp_not', alias?: string  } 
  | { name: 'dkp_in', alias?: string  } 
  | { name: 'dkp_not_in', alias?: string  } 
  | { name: 'dkp_lt', alias?: string  } 
  | { name: 'dkp_lte', alias?: string  } 
  | { name: 'dkp_gt', alias?: string  } 
  | { name: 'dkp_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildMemberUpdateManyWithWhereNestedInput {
  where?: GuildMemberScalarWhereInput
  data?: GuildMemberUpdateManyDataInput
}
export type GuildMemberUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildMemberUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildMemberUpdateManyDataInput {
  guildRole?: prisma.GuildRole | null
  role?: prisma.Role | null
  dkp?: number | null
}
export type GuildMemberUpdateManyDataInputInputObject =
  | Extract<keyof GuildMemberUpdateManyDataInput, string>
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  
export interface GuildUpsertWithWhereUniqueWithoutRealmInput {
  where?: GuildWhereUniqueInput
  update?: GuildUpdateWithoutRealmDataInput
  create?: GuildCreateWithoutRealmInput
}
export type GuildUpsertWithWhereUniqueWithoutRealmInputInputObject =
  | Extract<keyof GuildUpsertWithWhereUniqueWithoutRealmInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  avatar?: string | null
  avatar_not?: string | null
  avatar_in?: string[]
  avatar_not_in?: string[]
  avatar_lt?: string | null
  avatar_lte?: string | null
  avatar_gt?: string | null
  avatar_gte?: string | null
  avatar_contains?: string | null
  avatar_not_contains?: string | null
  avatar_starts_with?: string | null
  avatar_not_starts_with?: string | null
  avatar_ends_with?: string | null
  avatar_not_ends_with?: string | null
  lootingSystem?: prisma.GuildLootingSystem | null
  lootingSystem_not?: prisma.GuildLootingSystem | null
  lootingSystem_in?: prisma.GuildLootingSystem[]
  lootingSystem_not_in?: prisma.GuildLootingSystem[]
  AND?: GuildScalarWhereInput[]
  OR?: GuildScalarWhereInput[]
  NOT?: GuildScalarWhereInput[]
}
export type GuildScalarWhereInputInputObject =
  | Extract<keyof GuildScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'avatar_not', alias?: string  } 
  | { name: 'avatar_in', alias?: string  } 
  | { name: 'avatar_not_in', alias?: string  } 
  | { name: 'avatar_lt', alias?: string  } 
  | { name: 'avatar_lte', alias?: string  } 
  | { name: 'avatar_gt', alias?: string  } 
  | { name: 'avatar_gte', alias?: string  } 
  | { name: 'avatar_contains', alias?: string  } 
  | { name: 'avatar_not_contains', alias?: string  } 
  | { name: 'avatar_starts_with', alias?: string  } 
  | { name: 'avatar_not_starts_with', alias?: string  } 
  | { name: 'avatar_ends_with', alias?: string  } 
  | { name: 'avatar_not_ends_with', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'lootingSystem_not', alias?: string  } 
  | { name: 'lootingSystem_in', alias?: string  } 
  | { name: 'lootingSystem_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildUpdateManyWithWhereNestedInput {
  where?: GuildScalarWhereInput
  data?: GuildUpdateManyDataInput
}
export type GuildUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuildUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildUpdateManyDataInput {
  name?: string | null
  avatar?: string | null
  lootingSystem?: prisma.GuildLootingSystem | null
}
export type GuildUpdateManyDataInputInputObject =
  | Extract<keyof GuildUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  
export interface RealmUpsertWithoutCharactersInput {
  update?: RealmUpdateWithoutCharactersDataInput
  create?: RealmCreateWithoutCharactersInput
}
export type RealmUpsertWithoutCharactersInputInputObject =
  | Extract<keyof RealmUpsertWithoutCharactersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationUpdateManyWithoutCharacterInput {
  create?: GuildApplicationCreateWithoutCharacterInput[]
  delete?: GuildApplicationWhereUniqueInput[]
  connect?: GuildApplicationWhereUniqueInput[]
  set?: GuildApplicationWhereUniqueInput[]
  disconnect?: GuildApplicationWhereUniqueInput[]
  update?: GuildApplicationUpdateWithWhereUniqueWithoutCharacterInput[]
  upsert?: GuildApplicationUpsertWithWhereUniqueWithoutCharacterInput[]
  deleteMany?: GuildApplicationScalarWhereInput[]
  updateMany?: GuildApplicationUpdateManyWithWhereNestedInput[]
}
export type GuildApplicationUpdateManyWithoutCharacterInputInputObject =
  | Extract<keyof GuildApplicationUpdateManyWithoutCharacterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuildApplicationUpdateWithWhereUniqueWithoutCharacterInput {
  where?: GuildApplicationWhereUniqueInput
  data?: GuildApplicationUpdateWithoutCharacterDataInput
}
export type GuildApplicationUpdateWithWhereUniqueWithoutCharacterInputInputObject =
  | Extract<keyof GuildApplicationUpdateWithWhereUniqueWithoutCharacterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuildApplicationUpdateWithoutCharacterDataInput {
  guild?: GuildUpdateOneRequiredWithoutApplicationsInput | null
  answers?: GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInput | null
  status?: prisma.GuildApplicationStatus | null
  comment?: string | null
}
export type GuildApplicationUpdateWithoutCharacterDataInputInputObject =
  | Extract<keyof GuildApplicationUpdateWithoutCharacterDataInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildUpdateOneRequiredWithoutApplicationsInput {
  create?: GuildCreateWithoutApplicationsInput | null
  update?: GuildUpdateWithoutApplicationsDataInput | null
  upsert?: GuildUpsertWithoutApplicationsInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildUpdateOneRequiredWithoutApplicationsInputInputObject =
  | Extract<keyof GuildUpdateOneRequiredWithoutApplicationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildUpdateWithoutApplicationsDataInput {
  name?: string | null
  avatar?: string | null
  realm?: RealmUpdateOneRequiredWithoutGuildsInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberUpdateManyWithoutGuildInput | null
  posts?: GuildPostUpdateManyWithoutGuildInput | null
  events?: GuildEventUpdateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormUpdateOneWithoutGuildInput | null
}
export type GuildUpdateWithoutApplicationsDataInputInputObject =
  | Extract<keyof GuildUpdateWithoutApplicationsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildUpsertWithoutApplicationsInput {
  update?: GuildUpdateWithoutApplicationsDataInput
  create?: GuildCreateWithoutApplicationsInput
}
export type GuildUpsertWithoutApplicationsInputInputObject =
  | Extract<keyof GuildUpsertWithoutApplicationsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationUpsertWithWhereUniqueWithoutCharacterInput {
  where?: GuildApplicationWhereUniqueInput
  update?: GuildApplicationUpdateWithoutCharacterDataInput
  create?: GuildApplicationCreateWithoutCharacterInput
}
export type GuildApplicationUpsertWithWhereUniqueWithoutCharacterInputInputObject =
  | Extract<keyof GuildApplicationUpsertWithWhereUniqueWithoutCharacterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CharacterUpsertWithoutGuildInput {
  update?: CharacterUpdateWithoutGuildDataInput
  create?: CharacterCreateWithoutGuildInput
}
export type CharacterUpsertWithoutGuildInputInputObject =
  | Extract<keyof CharacterUpsertWithoutGuildInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildMemberUpsertWithWhereUniqueWithoutEventsInput {
  where?: GuildMemberWhereUniqueInput
  update?: GuildMemberUpdateWithoutEventsDataInput
  create?: GuildMemberCreateWithoutEventsInput
}
export type GuildMemberUpsertWithWhereUniqueWithoutEventsInputInputObject =
  | Extract<keyof GuildMemberUpsertWithWhereUniqueWithoutEventsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildEventUpsertWithWhereUniqueWithoutGuildInput {
  where?: GuildEventWhereUniqueInput
  update?: GuildEventUpdateWithoutGuildDataInput
  create?: GuildEventCreateWithoutGuildInput
}
export type GuildEventUpsertWithWhereUniqueWithoutGuildInputInputObject =
  | Extract<keyof GuildEventUpsertWithWhereUniqueWithoutGuildInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildUpsertWithoutRosterInput {
  update?: GuildUpdateWithoutRosterDataInput
  create?: GuildCreateWithoutRosterInput
}
export type GuildUpsertWithoutRosterInputInputObject =
  | Extract<keyof GuildUpsertWithoutRosterInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildMemberUpsertWithoutCharacterInput {
  update?: GuildMemberUpdateWithoutCharacterDataInput
  create?: GuildMemberCreateWithoutCharacterInput
}
export type GuildMemberUpsertWithoutCharacterInputInputObject =
  | Extract<keyof GuildMemberUpsertWithoutCharacterInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CharacterUpsertWithWhereUniqueWithoutRealmInput {
  where?: CharacterWhereUniqueInput
  update?: CharacterUpdateWithoutRealmDataInput
  create?: CharacterCreateWithoutRealmInput
}
export type CharacterUpsertWithWhereUniqueWithoutRealmInputInputObject =
  | Extract<keyof CharacterUpsertWithWhereUniqueWithoutRealmInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CharacterScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  class?: prisma.CharacterClassEnum | null
  class_not?: prisma.CharacterClassEnum | null
  class_in?: prisma.CharacterClassEnum[]
  class_not_in?: prisma.CharacterClassEnum[]
  AND?: CharacterScalarWhereInput[]
  OR?: CharacterScalarWhereInput[]
  NOT?: CharacterScalarWhereInput[]
}
export type CharacterScalarWhereInputInputObject =
  | Extract<keyof CharacterScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'class_not', alias?: string  } 
  | { name: 'class_in', alias?: string  } 
  | { name: 'class_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CharacterUpdateManyWithWhereNestedInput {
  where?: CharacterScalarWhereInput
  data?: CharacterUpdateManyDataInput
}
export type CharacterUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CharacterUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CharacterUpdateManyDataInput {
  name?: string | null
  class?: prisma.CharacterClassEnum | null
}
export type CharacterUpdateManyDataInputInputObject =
  | Extract<keyof CharacterUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  
export interface RealmUpsertWithoutGuildsInput {
  update?: RealmUpdateWithoutGuildsDataInput
  create?: RealmCreateWithoutGuildsInput
}
export type RealmUpsertWithoutGuildsInputInputObject =
  | Extract<keyof RealmUpsertWithoutGuildsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildUpdateManyMutationInput {
  name?: string | null
  avatar?: string | null
  lootingSystem?: prisma.GuildLootingSystem | null
}
export type GuildUpdateManyMutationInputInputObject =
  | Extract<keyof GuildUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  
export interface GuildEventCreateInput {
  title?: string
  startingAt?: string
  instance?: InstanceCreateOneInput
  guild?: GuildCreateOneWithoutEventsInput
  roster?: GuildMemberCreateManyWithoutEventsInput | null
}
export type GuildEventCreateInputInputObject =
  | Extract<keyof GuildEventCreateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  
export interface GuildEventUpdateInput {
  title?: string | null
  startingAt?: string | null
  instance?: InstanceUpdateOneRequiredInput | null
  guild?: GuildUpdateOneRequiredWithoutEventsInput | null
  roster?: GuildMemberUpdateManyWithoutEventsInput | null
}
export type GuildEventUpdateInputInputObject =
  | Extract<keyof GuildEventUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  | { name: 'instance', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  
export interface GuildEventUpdateManyMutationInput {
  title?: string | null
  startingAt?: string | null
}
export type GuildEventUpdateManyMutationInputInputObject =
  | Extract<keyof GuildEventUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'startingAt', alias?: string  } 
  
export interface GuildMemberCreateInput {
  character?: CharacterCreateOneWithoutGuildInput
  guild?: GuildCreateOneWithoutRosterInput
  guildRole?: prisma.GuildRole
  role?: prisma.Role
  dkp?: number | null
  events?: GuildEventCreateManyWithoutRosterInput | null
}
export type GuildMemberCreateInputInputObject =
  | Extract<keyof GuildMemberCreateInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'events', alias?: string  } 
  
export interface GuildMemberUpdateInput {
  character?: CharacterUpdateOneRequiredWithoutGuildInput | null
  guild?: GuildUpdateOneRequiredWithoutRosterInput | null
  guildRole?: prisma.GuildRole | null
  role?: prisma.Role | null
  dkp?: number | null
  events?: GuildEventUpdateManyWithoutRosterInput | null
}
export type GuildMemberUpdateInputInputObject =
  | Extract<keyof GuildMemberUpdateInput, string>
  | { name: 'character', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  | { name: 'events', alias?: string  } 
  
export interface GuildMemberUpdateManyMutationInput {
  guildRole?: prisma.GuildRole | null
  role?: prisma.Role | null
  dkp?: number | null
}
export type GuildMemberUpdateManyMutationInputInputObject =
  | Extract<keyof GuildMemberUpdateManyMutationInput, string>
  | { name: 'guildRole', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'dkp', alias?: string  } 
  
export interface GuildPostCreateInput {
  guild?: GuildCreateOneWithoutPostsInput
  title?: string
  body?: string
}
export type GuildPostCreateInputInputObject =
  | Extract<keyof GuildPostCreateInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface GuildCreateOneWithoutPostsInput {
  create?: GuildCreateWithoutPostsInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildCreateOneWithoutPostsInputInputObject =
  | Extract<keyof GuildCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildCreateWithoutPostsInput {
  name?: string
  avatar?: string | null
  realm?: RealmCreateOneWithoutGuildsInput
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberCreateManyWithoutGuildInput | null
  events?: GuildEventCreateManyWithoutGuildInput | null
  applications?: GuildApplicationCreateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormCreateOneWithoutGuildInput | null
}
export type GuildCreateWithoutPostsInputInputObject =
  | Extract<keyof GuildCreateWithoutPostsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildPostUpdateInput {
  guild?: GuildUpdateOneRequiredWithoutPostsInput | null
  title?: string | null
  body?: string | null
}
export type GuildPostUpdateInputInputObject =
  | Extract<keyof GuildPostUpdateInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface GuildUpdateOneRequiredWithoutPostsInput {
  create?: GuildCreateWithoutPostsInput | null
  update?: GuildUpdateWithoutPostsDataInput | null
  upsert?: GuildUpsertWithoutPostsInput | null
  connect?: GuildWhereUniqueInput | null
}
export type GuildUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof GuildUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildUpdateWithoutPostsDataInput {
  name?: string | null
  avatar?: string | null
  realm?: RealmUpdateOneRequiredWithoutGuildsInput | null
  lootingSystem?: prisma.GuildLootingSystem | null
  roster?: GuildMemberUpdateManyWithoutGuildInput | null
  events?: GuildEventUpdateManyWithoutGuildInput | null
  applications?: GuildApplicationUpdateManyWithoutGuildInput | null
  applicationForm?: GuildApplicationFormUpdateOneWithoutGuildInput | null
}
export type GuildUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof GuildUpdateWithoutPostsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'lootingSystem', alias?: string  } 
  | { name: 'roster', alias?: string  } 
  | { name: 'events', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  | { name: 'applicationForm', alias?: string  } 
  
export interface GuildUpsertWithoutPostsInput {
  update?: GuildUpdateWithoutPostsDataInput
  create?: GuildCreateWithoutPostsInput
}
export type GuildUpsertWithoutPostsInputInputObject =
  | Extract<keyof GuildUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildPostUpdateManyMutationInput {
  title?: string | null
  body?: string | null
}
export type GuildPostUpdateManyMutationInputInputObject =
  | Extract<keyof GuildPostUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface GuildApplicationCreateInput {
  guild?: GuildCreateOneWithoutApplicationsInput
  character?: CharacterCreateOneWithoutApplicationsInput
  answers?: GuildApplicationFormQuestionAnswerCreateManyWithoutApplicationInput | null
  status?: prisma.GuildApplicationStatus
  comment?: string | null
}
export type GuildApplicationCreateInputInputObject =
  | Extract<keyof GuildApplicationCreateInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'character', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildApplicationUpdateInput {
  guild?: GuildUpdateOneRequiredWithoutApplicationsInput | null
  character?: CharacterUpdateOneRequiredWithoutApplicationsInput | null
  answers?: GuildApplicationFormQuestionAnswerUpdateManyWithoutApplicationInput | null
  status?: prisma.GuildApplicationStatus | null
  comment?: string | null
}
export type GuildApplicationUpdateInputInputObject =
  | Extract<keyof GuildApplicationUpdateInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'character', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildApplicationUpdateManyMutationInput {
  status?: prisma.GuildApplicationStatus | null
  comment?: string | null
}
export type GuildApplicationUpdateManyMutationInputInputObject =
  | Extract<keyof GuildApplicationUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildApplicationFormCreateInput {
  lastUpdatedAt?: string
  guild?: GuildCreateOneWithoutApplicationFormInput
  questions?: GuildApplicationFormQuestionCreateManyWithoutGuildApplicationFormInput | null
}
export type GuildApplicationFormCreateInputInputObject =
  | Extract<keyof GuildApplicationFormCreateInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'questions', alias?: string  } 
  
export interface GuildApplicationFormUpdateInput {
  lastUpdatedAt?: string | null
  guild?: GuildUpdateOneRequiredWithoutApplicationFormInput | null
  questions?: GuildApplicationFormQuestionUpdateManyWithoutGuildApplicationFormInput | null
}
export type GuildApplicationFormUpdateInputInputObject =
  | Extract<keyof GuildApplicationFormUpdateInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'questions', alias?: string  } 
  
export interface GuildApplicationFormUpdateManyMutationInput {
  lastUpdatedAt?: string | null
}
export type GuildApplicationFormUpdateManyMutationInputInputObject =
  | Extract<keyof GuildApplicationFormUpdateManyMutationInput, string>
  | { name: 'lastUpdatedAt', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateInput {
  guildApplicationForm?: GuildApplicationFormUpdateOneRequiredWithoutQuestionsInput | null
  question?: string | null
  sequence?: number | null
}
export type GuildApplicationFormQuestionUpdateInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateInput, string>
  | { name: 'guildApplicationForm', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationFormQuestionUpdateManyMutationInput {
  question?: string | null
  sequence?: number | null
}
export type GuildApplicationFormQuestionUpdateManyMutationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionUpdateManyMutationInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'sequence', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerCreateInput {
  application?: GuildApplicationCreateOneWithoutAnswersInput
  question?: GuildApplicationFormQuestionCreateOneInput
  answer?: string
}
export type GuildApplicationFormQuestionAnswerCreateInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerCreateInput, string>
  | { name: 'application', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  
export interface GuildApplicationCreateOneWithoutAnswersInput {
  create?: GuildApplicationCreateWithoutAnswersInput | null
  connect?: GuildApplicationWhereUniqueInput | null
}
export type GuildApplicationCreateOneWithoutAnswersInputInputObject =
  | Extract<keyof GuildApplicationCreateOneWithoutAnswersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationCreateWithoutAnswersInput {
  guild?: GuildCreateOneWithoutApplicationsInput
  character?: CharacterCreateOneWithoutApplicationsInput
  status?: prisma.GuildApplicationStatus
  comment?: string | null
}
export type GuildApplicationCreateWithoutAnswersInputInputObject =
  | Extract<keyof GuildApplicationCreateWithoutAnswersInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'character', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateInput {
  application?: GuildApplicationUpdateOneRequiredWithoutAnswersInput | null
  question?: GuildApplicationFormQuestionUpdateOneRequiredInput | null
  answer?: string | null
}
export type GuildApplicationFormQuestionAnswerUpdateInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateInput, string>
  | { name: 'application', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  
export interface GuildApplicationUpdateOneRequiredWithoutAnswersInput {
  create?: GuildApplicationCreateWithoutAnswersInput | null
  update?: GuildApplicationUpdateWithoutAnswersDataInput | null
  upsert?: GuildApplicationUpsertWithoutAnswersInput | null
  connect?: GuildApplicationWhereUniqueInput | null
}
export type GuildApplicationUpdateOneRequiredWithoutAnswersInputInputObject =
  | Extract<keyof GuildApplicationUpdateOneRequiredWithoutAnswersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuildApplicationUpdateWithoutAnswersDataInput {
  guild?: GuildUpdateOneRequiredWithoutApplicationsInput | null
  character?: CharacterUpdateOneRequiredWithoutApplicationsInput | null
  status?: prisma.GuildApplicationStatus | null
  comment?: string | null
}
export type GuildApplicationUpdateWithoutAnswersDataInputInputObject =
  | Extract<keyof GuildApplicationUpdateWithoutAnswersDataInput, string>
  | { name: 'guild', alias?: string  } 
  | { name: 'character', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface GuildApplicationUpsertWithoutAnswersInput {
  update?: GuildApplicationUpdateWithoutAnswersDataInput
  create?: GuildApplicationCreateWithoutAnswersInput
}
export type GuildApplicationUpsertWithoutAnswersInputInputObject =
  | Extract<keyof GuildApplicationUpsertWithoutAnswersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerUpdateManyMutationInput {
  answer?: string | null
}
export type GuildApplicationFormQuestionAnswerUpdateManyMutationInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerUpdateManyMutationInput, string>
  | { name: 'answer', alias?: string  } 
  
export interface InstanceUpdateInput {
  name?: string | null
  Abbreviation?: string | null
  image?: string | null
  wiki?: string | null
  suggestedLevel?: string | null
  playersCap?: number | null
  location?: string | null
}
export type InstanceUpdateInputInputObject =
  | Extract<keyof InstanceUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'Abbreviation', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'wiki', alias?: string  } 
  | { name: 'suggestedLevel', alias?: string  } 
  | { name: 'playersCap', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface InstanceUpdateManyMutationInput {
  name?: string | null
  Abbreviation?: string | null
  image?: string | null
  wiki?: string | null
  suggestedLevel?: string | null
  playersCap?: number | null
  location?: string | null
}
export type InstanceUpdateManyMutationInputInputObject =
  | Extract<keyof InstanceUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'Abbreviation', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'wiki', alias?: string  } 
  | { name: 'suggestedLevel', alias?: string  } 
  | { name: 'playersCap', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface CharacterCreateInput {
  user?: UserCreateOneWithoutCharactersInput
  realm?: RealmCreateOneWithoutCharactersInput
  name?: string
  class?: prisma.CharacterClassEnum
  guild?: GuildMemberCreateOneWithoutCharacterInput | null
  applications?: GuildApplicationCreateManyWithoutCharacterInput | null
}
export type CharacterCreateInputInputObject =
  | Extract<keyof CharacterCreateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface CharacterUpdateInput {
  user?: UserUpdateOneRequiredWithoutCharactersInput | null
  realm?: RealmUpdateOneRequiredWithoutCharactersInput | null
  name?: string | null
  class?: prisma.CharacterClassEnum | null
  guild?: GuildMemberUpdateOneWithoutCharacterInput | null
  applications?: GuildApplicationUpdateManyWithoutCharacterInput | null
}
export type CharacterUpdateInputInputObject =
  | Extract<keyof CharacterUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface CharacterUpdateManyMutationInput {
  name?: string | null
  class?: prisma.CharacterClassEnum | null
}
export type CharacterUpdateManyMutationInputInputObject =
  | Extract<keyof CharacterUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  
export interface RealmCreateInput {
  name?: string
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
  characters?: CharacterCreateManyWithoutRealmInput | null
  guilds?: GuildCreateManyWithoutRealmInput | null
}
export type RealmCreateInputInputObject =
  | Extract<keyof RealmCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'characters', alias?: string  } 
  | { name: 'guilds', alias?: string  } 
  
export interface RealmUpdateInput {
  name?: string | null
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
  characters?: CharacterUpdateManyWithoutRealmInput | null
  guilds?: GuildUpdateManyWithoutRealmInput | null
}
export type RealmUpdateInputInputObject =
  | Extract<keyof RealmUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  | { name: 'characters', alias?: string  } 
  | { name: 'guilds', alias?: string  } 
  
export interface RealmUpdateManyMutationInput {
  name?: string | null
  type?: prisma.RealmType | null
  population?: prisma.RealmPopulation | null
}
export type RealmUpdateManyMutationInputInputObject =
  | Extract<keyof RealmUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'population', alias?: string  } 
  
export interface UserCreateInput {
  displayName?: string
  email?: string
  password?: string
  confirmed?: boolean | null
  avatar?: string | null
  characters?: CharacterCreateManyWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'displayName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'confirmed', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'characters', alias?: string  } 
  
export interface CharacterCreateManyWithoutUserInput {
  create?: CharacterCreateWithoutUserInput[]
  connect?: CharacterWhereUniqueInput[]
}
export type CharacterCreateManyWithoutUserInputInputObject =
  | Extract<keyof CharacterCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CharacterCreateWithoutUserInput {
  realm?: RealmCreateOneWithoutCharactersInput
  name?: string
  class?: prisma.CharacterClassEnum
  guild?: GuildMemberCreateOneWithoutCharacterInput | null
  applications?: GuildApplicationCreateManyWithoutCharacterInput | null
}
export type CharacterCreateWithoutUserInputInputObject =
  | Extract<keyof CharacterCreateWithoutUserInput, string>
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface UserUpdateInput {
  displayName?: string | null
  email?: string | null
  password?: string | null
  confirmed?: boolean | null
  avatar?: string | null
  characters?: CharacterUpdateManyWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'displayName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'confirmed', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'characters', alias?: string  } 
  
export interface CharacterUpdateManyWithoutUserInput {
  create?: CharacterCreateWithoutUserInput[]
  delete?: CharacterWhereUniqueInput[]
  connect?: CharacterWhereUniqueInput[]
  set?: CharacterWhereUniqueInput[]
  disconnect?: CharacterWhereUniqueInput[]
  update?: CharacterUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: CharacterUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: CharacterScalarWhereInput[]
  updateMany?: CharacterUpdateManyWithWhereNestedInput[]
}
export type CharacterUpdateManyWithoutUserInputInputObject =
  | Extract<keyof CharacterUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CharacterUpdateWithWhereUniqueWithoutUserInput {
  where?: CharacterWhereUniqueInput
  data?: CharacterUpdateWithoutUserDataInput
}
export type CharacterUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof CharacterUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CharacterUpdateWithoutUserDataInput {
  realm?: RealmUpdateOneRequiredWithoutCharactersInput | null
  name?: string | null
  class?: prisma.CharacterClassEnum | null
  guild?: GuildMemberUpdateOneWithoutCharacterInput | null
  applications?: GuildApplicationUpdateManyWithoutCharacterInput | null
}
export type CharacterUpdateWithoutUserDataInputInputObject =
  | Extract<keyof CharacterUpdateWithoutUserDataInput, string>
  | { name: 'realm', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'class', alias?: string  } 
  | { name: 'guild', alias?: string  } 
  | { name: 'applications', alias?: string  } 
  
export interface CharacterUpsertWithWhereUniqueWithoutUserInput {
  where?: CharacterWhereUniqueInput
  update?: CharacterUpdateWithoutUserDataInput
  create?: CharacterCreateWithoutUserInput
}
export type CharacterUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof CharacterUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  displayName?: string | null
  email?: string | null
  password?: string | null
  confirmed?: boolean | null
  avatar?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'displayName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'confirmed', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface GuildSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildWhereInput | null
  AND?: GuildSubscriptionWhereInput[]
  OR?: GuildSubscriptionWhereInput[]
  NOT?: GuildSubscriptionWhereInput[]
}
export type GuildSubscriptionWhereInputInputObject =
  | Extract<keyof GuildSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildEventSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildEventWhereInput | null
  AND?: GuildEventSubscriptionWhereInput[]
  OR?: GuildEventSubscriptionWhereInput[]
  NOT?: GuildEventSubscriptionWhereInput[]
}
export type GuildEventSubscriptionWhereInputInputObject =
  | Extract<keyof GuildEventSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildMemberSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildMemberWhereInput | null
  AND?: GuildMemberSubscriptionWhereInput[]
  OR?: GuildMemberSubscriptionWhereInput[]
  NOT?: GuildMemberSubscriptionWhereInput[]
}
export type GuildMemberSubscriptionWhereInputInputObject =
  | Extract<keyof GuildMemberSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildPostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildPostWhereInput | null
  AND?: GuildPostSubscriptionWhereInput[]
  OR?: GuildPostSubscriptionWhereInput[]
  NOT?: GuildPostSubscriptionWhereInput[]
}
export type GuildPostSubscriptionWhereInputInputObject =
  | Extract<keyof GuildPostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildApplicationWhereInput | null
  AND?: GuildApplicationSubscriptionWhereInput[]
  OR?: GuildApplicationSubscriptionWhereInput[]
  NOT?: GuildApplicationSubscriptionWhereInput[]
}
export type GuildApplicationSubscriptionWhereInputInputObject =
  | Extract<keyof GuildApplicationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildApplicationFormWhereInput | null
  AND?: GuildApplicationFormSubscriptionWhereInput[]
  OR?: GuildApplicationFormSubscriptionWhereInput[]
  NOT?: GuildApplicationFormSubscriptionWhereInput[]
}
export type GuildApplicationFormSubscriptionWhereInputInputObject =
  | Extract<keyof GuildApplicationFormSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormQuestionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildApplicationFormQuestionWhereInput | null
  AND?: GuildApplicationFormQuestionSubscriptionWhereInput[]
  OR?: GuildApplicationFormQuestionSubscriptionWhereInput[]
  NOT?: GuildApplicationFormQuestionSubscriptionWhereInput[]
}
export type GuildApplicationFormQuestionSubscriptionWhereInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuildApplicationFormQuestionAnswerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuildApplicationFormQuestionAnswerWhereInput | null
  AND?: GuildApplicationFormQuestionAnswerSubscriptionWhereInput[]
  OR?: GuildApplicationFormQuestionAnswerSubscriptionWhereInput[]
  NOT?: GuildApplicationFormQuestionAnswerSubscriptionWhereInput[]
}
export type GuildApplicationFormQuestionAnswerSubscriptionWhereInputInputObject =
  | Extract<keyof GuildApplicationFormQuestionAnswerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InstanceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InstanceWhereInput | null
  AND?: InstanceSubscriptionWhereInput[]
  OR?: InstanceSubscriptionWhereInput[]
  NOT?: InstanceSubscriptionWhereInput[]
}
export type InstanceSubscriptionWhereInputInputObject =
  | Extract<keyof InstanceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CharacterSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CharacterWhereInput | null
  AND?: CharacterSubscriptionWhereInput[]
  OR?: CharacterSubscriptionWhereInput[]
  NOT?: CharacterSubscriptionWhereInput[]
}
export type CharacterSubscriptionWhereInputInputObject =
  | Extract<keyof CharacterSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RealmSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RealmWhereInput | null
  AND?: RealmSubscriptionWhereInput[]
  OR?: RealmSubscriptionWhereInput[]
  NOT?: RealmSubscriptionWhereInput[]
}
export type RealmSubscriptionWhereInputInputObject =
  | Extract<keyof RealmSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RealmTypeValues =
  | 'RP'
  | 'RPPVP'
  | 'PVP'
  | 'NORMAL'
  | 'PVE'
  
export type RealmPopulationValues =
  | 'LOW'
  | 'NORMAL'
  | 'HIGH'
  | 'FULL'
  
export type GuildLootingSystemValues =
  | 'DKP'
  | 'COUNCIL'
  | 'CUSTOM'
  | 'NONE'
  
export type GuildRoleValues =
  | 'GuildMaster'
  | 'Officer'
  | 'Member'
  | 'Trail'
  | 'Alt'
  
export type RoleValues =
  | 'TANK'
  | 'MELEE'
  | 'RANGED'
  | 'HEALER'
  
export type GuildApplicationStatusValues =
  | 'ACCEPTED'
  | 'DECLINED'
  | 'NEW'
  
export type CharacterClassEnumValues =
  | 'DRUID'
  | 'HUNTER'
  | 'MAGE'
  | 'PALADIN'
  | 'PRIEST'
  | 'ROGUE'
  | 'SHAMAN'
  | 'WARLOCK'
  | 'WARRIOR'
  
export type CharacterOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'class_ASC'
  | 'class_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildEventOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'startingAt_ASC'
  | 'startingAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildMemberOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'guildRole_ASC'
  | 'guildRole_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'dkp_ASC'
  | 'dkp_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildApplicationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildApplicationFormQuestionAnswerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'answer_ASC'
  | 'answer_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildApplicationFormQuestionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'question_ASC'
  | 'question_DESC'
  | 'sequence_ASC'
  | 'sequence_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'avatar_ASC'
  | 'avatar_DESC'
  | 'lootingSystem_ASC'
  | 'lootingSystem_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildPostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'body_ASC'
  | 'body_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuildApplicationFormOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'lastUpdatedAt_ASC'
  | 'lastUpdatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InstanceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'Abbreviation_ASC'
  | 'Abbreviation_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'wiki_ASC'
  | 'wiki_DESC'
  | 'suggestedLevel_ASC'
  | 'suggestedLevel_DESC'
  | 'playersCap_ASC'
  | 'playersCap_DESC'
  | 'location_ASC'
  | 'location_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type RealmOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'population_ASC'
  | 'population_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'displayName_ASC'
  | 'displayName_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'confirmed_ASC'
  | 'confirmed_DESC'
  | 'avatar_ASC'
  | 'avatar_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  